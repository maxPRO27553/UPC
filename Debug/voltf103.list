
voltf103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bbc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001788  08006cd0  08006cd0  00016cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008458  08008458  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08008458  08008458  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008458  08008458  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800845c  0800845c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200001f4  08008654  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08008654  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfec  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fe1  00000000  00000000  0002c209  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  0002e1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  0002ec10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018115  00000000  00000000  0002f550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f54  00000000  00000000  00047665  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088473  00000000  00000000  000515b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9a2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c8  00000000  00000000  000d9aa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006cb4 	.word	0x08006cb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08006cb4 	.word	0x08006cb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <displayvolt>:
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	  while(__HAL_TIM_GET_COUNTER(&htim2) < msec);
}
*/
void displayvolt(uint16_t akb, uint16_t mainvolt, uint8_t cflag)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b08d      	sub	sp, #52	; 0x34
 8001034:	af02      	add	r7, sp, #8
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
 800103a:	460b      	mov	r3, r1
 800103c:	80bb      	strh	r3, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	70fb      	strb	r3, [r7, #3]
	float akbvoltage = akb * koef,
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fdd9 	bl	8000bfc <__aeabi_i2f>
 800104a:	4602      	mov	r2, r0
 800104c:	4b5e      	ldr	r3, [pc, #376]	; (80011c8 <displayvolt+0x198>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	4610      	mov	r0, r2
 8001054:	f7ff fe26 	bl	8000ca4 <__aeabi_fmul>
 8001058:	4603      	mov	r3, r0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
		  mainvoltage = mainvolt * koef;
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fdcc 	bl	8000bfc <__aeabi_i2f>
 8001064:	4602      	mov	r2, r0
 8001066:	4b58      	ldr	r3, [pc, #352]	; (80011c8 <displayvolt+0x198>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4619      	mov	r1, r3
 800106c:	4610      	mov	r0, r2
 800106e:	f7ff fe19 	bl	8000ca4 <__aeabi_fmul>
 8001072:	4603      	mov	r3, r0
 8001074:	623b      	str	r3, [r7, #32]

	char str[20];
	sprintf (str,"bat. %1.2f V", akbvoltage);
 8001076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001078:	f7ff f9d6 	bl	8000428 <__aeabi_f2d>
 800107c:	4603      	mov	r3, r0
 800107e:	460c      	mov	r4, r1
 8001080:	f107 000c 	add.w	r0, r7, #12
 8001084:	461a      	mov	r2, r3
 8001086:	4623      	mov	r3, r4
 8001088:	4950      	ldr	r1, [pc, #320]	; (80011cc <displayvolt+0x19c>)
 800108a:	f004 fa25 	bl	80054d8 <siprintf>
	SSD1306_Fill(0);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 fbfe 	bl	8001890 <SSD1306_Fill>
	SSD1306_GotoXY(0,12);
 8001094:	210c      	movs	r1, #12
 8001096:	2000      	movs	r0, #0
 8001098:	f000 fc70 	bl	800197c <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_7x10, 1);
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2201      	movs	r2, #1
 80010a2:	494b      	ldr	r1, [pc, #300]	; (80011d0 <displayvolt+0x1a0>)
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fcff 	bl	8001aa8 <SSD1306_Puts>
	SSD1306_DrawRectangle(4, 30, 110, 33, 1);
 80010aa:	2301      	movs	r3, #1
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2321      	movs	r3, #33	; 0x21
 80010b0:	226e      	movs	r2, #110	; 0x6e
 80010b2:	211e      	movs	r1, #30
 80010b4:	2004      	movs	r0, #4
 80010b6:	f000 fe17 	bl	8001ce8 <SSD1306_DrawRectangle>
	SSD1306_DrawFilledRectangle(114, 41, 5, 11, 1);
 80010ba:	2301      	movs	r3, #1
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	230b      	movs	r3, #11
 80010c0:	2205      	movs	r2, #5
 80010c2:	2129      	movs	r1, #41	; 0x29
 80010c4:	2072      	movs	r0, #114	; 0x72
 80010c6:	f000 fe79 	bl	8001dbc <SSD1306_DrawFilledRectangle>
	if (akbvoltage > 12.6f)
 80010ca:	4942      	ldr	r1, [pc, #264]	; (80011d4 <displayvolt+0x1a4>)
 80010cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010ce:	f7ff ffa5 	bl	800101c <__aeabi_fcmpgt>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <displayvolt+0xb8>
	{
		// 3212 3175
		SSD1306_DrawFilledRectangle(6, 32, 25, 29, 1);
 80010d8:	2301      	movs	r3, #1
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	231d      	movs	r3, #29
 80010de:	2219      	movs	r2, #25
 80010e0:	2120      	movs	r1, #32
 80010e2:	2006      	movs	r0, #6
 80010e4:	f000 fe6a 	bl	8001dbc <SSD1306_DrawFilledRectangle>
	}

	if (akbvoltage > 13.05f)
 80010e8:	493b      	ldr	r1, [pc, #236]	; (80011d8 <displayvolt+0x1a8>)
 80010ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010ec:	f7ff ff96 	bl	800101c <__aeabi_fcmpgt>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <displayvolt+0xd6>
	{
		SSD1306_DrawFilledRectangle(33, 32, 25, 29, 1);
 80010f6:	2301      	movs	r3, #1
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	231d      	movs	r3, #29
 80010fc:	2219      	movs	r2, #25
 80010fe:	2120      	movs	r1, #32
 8001100:	2021      	movs	r0, #33	; 0x21
 8001102:	f000 fe5b 	bl	8001dbc <SSD1306_DrawFilledRectangle>
	}
	if (akbvoltage > 13.5f)
 8001106:	4935      	ldr	r1, [pc, #212]	; (80011dc <displayvolt+0x1ac>)
 8001108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800110a:	f7ff ff87 	bl	800101c <__aeabi_fcmpgt>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <displayvolt+0xf4>
	{
		SSD1306_DrawFilledRectangle(60, 32, 25, 29, 1);
 8001114:	2301      	movs	r3, #1
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	231d      	movs	r3, #29
 800111a:	2219      	movs	r2, #25
 800111c:	2120      	movs	r1, #32
 800111e:	203c      	movs	r0, #60	; 0x3c
 8001120:	f000 fe4c 	bl	8001dbc <SSD1306_DrawFilledRectangle>
	}
	if (akbvoltage > 13.95f)
 8001124:	492e      	ldr	r1, [pc, #184]	; (80011e0 <displayvolt+0x1b0>)
 8001126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001128:	f7ff ff78 	bl	800101c <__aeabi_fcmpgt>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d007      	beq.n	8001142 <displayvolt+0x112>
	{
		SSD1306_DrawFilledRectangle(87, 32, 25, 29, 1);
 8001132:	2301      	movs	r3, #1
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	231d      	movs	r3, #29
 8001138:	2219      	movs	r2, #25
 800113a:	2120      	movs	r1, #32
 800113c:	2057      	movs	r0, #87	; 0x57
 800113e:	f000 fe3d 	bl	8001dbc <SSD1306_DrawFilledRectangle>
	}
	if (cflag == 1)
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d118      	bne.n	800117a <displayvolt+0x14a>
	{
		SSD1306_DrawLine(125, 2, 110, 12, 1);
 8001148:	2301      	movs	r3, #1
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	230c      	movs	r3, #12
 800114e:	226e      	movs	r2, #110	; 0x6e
 8001150:	2102      	movs	r1, #2
 8001152:	207d      	movs	r0, #125	; 0x7d
 8001154:	f000 fccd 	bl	8001af2 <SSD1306_DrawLine>
		SSD1306_DrawLine(125, 12, 110, 12, 1);
 8001158:	2301      	movs	r3, #1
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	230c      	movs	r3, #12
 800115e:	226e      	movs	r2, #110	; 0x6e
 8001160:	210c      	movs	r1, #12
 8001162:	207d      	movs	r0, #125	; 0x7d
 8001164:	f000 fcc5 	bl	8001af2 <SSD1306_DrawLine>
		SSD1306_DrawLine(125, 12, 110, 22, 1);
 8001168:	2301      	movs	r3, #1
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2316      	movs	r3, #22
 800116e:	226e      	movs	r2, #110	; 0x6e
 8001170:	210c      	movs	r1, #12
 8001172:	207d      	movs	r0, #125	; 0x7d
 8001174:	f000 fcbd 	bl	8001af2 <SSD1306_DrawLine>
 8001178:	e008      	b.n	800118c <displayvolt+0x15c>
	}
	else
	{
		SSD1306_GotoXY(85, 5);
 800117a:	2105      	movs	r1, #5
 800117c:	2055      	movs	r0, #85	; 0x55
 800117e:	f000 fbfd 	bl	800197c <SSD1306_GotoXY>
		//sprintf(str, "main %1.1f V", mainvoltage);
		SSD1306_Puts("UPS", &Font_11x18, 1);
 8001182:	2201      	movs	r2, #1
 8001184:	4917      	ldr	r1, [pc, #92]	; (80011e4 <displayvolt+0x1b4>)
 8001186:	4818      	ldr	r0, [pc, #96]	; (80011e8 <displayvolt+0x1b8>)
 8001188:	f000 fc8e 	bl	8001aa8 <SSD1306_Puts>
	}
	sprintf(str, "main %1.2f V", mainvoltage);
 800118c:	6a38      	ldr	r0, [r7, #32]
 800118e:	f7ff f94b 	bl	8000428 <__aeabi_f2d>
 8001192:	4603      	mov	r3, r0
 8001194:	460c      	mov	r4, r1
 8001196:	f107 000c 	add.w	r0, r7, #12
 800119a:	461a      	mov	r2, r3
 800119c:	4623      	mov	r3, r4
 800119e:	4913      	ldr	r1, [pc, #76]	; (80011ec <displayvolt+0x1bc>)
 80011a0:	f004 f99a 	bl	80054d8 <siprintf>
	SSD1306_GotoXY(0,0);
 80011a4:	2100      	movs	r1, #0
 80011a6:	2000      	movs	r0, #0
 80011a8:	f000 fbe8 	bl	800197c <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_7x10, 1);
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2201      	movs	r2, #1
 80011b2:	4907      	ldr	r1, [pc, #28]	; (80011d0 <displayvolt+0x1a0>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fc77 	bl	8001aa8 <SSD1306_Puts>

    SSD1306_UpdateScreen();
 80011ba:	f000 fb3b 	bl	8001834 <SSD1306_UpdateScreen>



    // 15 20 125 2, 125 22, 110 22, 110 2 12
}
 80011be:	bf00      	nop
 80011c0:	372c      	adds	r7, #44	; 0x2c
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd90      	pop	{r4, r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000014 	.word	0x20000014
 80011cc:	08006cd0 	.word	0x08006cd0
 80011d0:	20000000 	.word	0x20000000
 80011d4:	4149999a 	.word	0x4149999a
 80011d8:	4150cccd 	.word	0x4150cccd
 80011dc:	41580000 	.word	0x41580000
 80011e0:	415f3333 	.word	0x415f3333
 80011e4:	20000008 	.word	0x20000008
 80011e8:	08006ce0 	.word	0x08006ce0
 80011ec:	08006ce4 	.word	0x08006ce4

080011f0 <displaycounter>:

uint8_t displaycounter(uint8_t count)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]

	if(voltage[0] < voltage[1]-30)
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <displaycounter+0x48>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <displaycounter+0x48>)
 8001204:	885b      	ldrh	r3, [r3, #2]
 8001206:	b29b      	uxth	r3, r3
 8001208:	3b1e      	subs	r3, #30
 800120a:	429a      	cmp	r2, r3
 800120c:	da06      	bge.n	800121c <displaycounter+0x2c>
		count++;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	3301      	adds	r3, #1
 8001212:	71fb      	strb	r3, [r7, #7]
	{
		count = 0;
		return 0;
	}

	if (count > 4)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b04      	cmp	r3, #4
 8001218:	d908      	bls.n	800122c <displaycounter+0x3c>
 800121a:	e003      	b.n	8001224 <displaycounter+0x34>
		count = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	71fb      	strb	r3, [r7, #7]
		return 0;
 8001220:	2300      	movs	r3, #0
 8001222:	e003      	b.n	800122c <displaycounter+0x3c>
	{
		count = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	71fb      	strb	r3, [r7, #7]
		return 1;
 8001228:	2301      	movs	r3, #1
 800122a:	e7ff      	b.n	800122c <displaycounter+0x3c>
	}

}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000010 	.word	0x20000010

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001242:	f000 ffe7 	bl	8002214 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001246:	f000 f8b1 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124a:	f000 f9a5 	bl	8001598 <MX_GPIO_Init>
  MX_DMA_Init();
 800124e:	f000 f985 	bl	800155c <MX_DMA_Init>
  MX_I2C1_Init();
 8001252:	f000 f955 	bl	8001500 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001256:	f000 f905 	bl	8001464 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800125a:	f000 fa27 	bl	80016ac <SSD1306_Init>
  //HAL_TIM_Base_Start(&htim2);
  HAL_ADCEx_Calibration_Start(&hadc1);
 800125e:	484f      	ldr	r0, [pc, #316]	; (800139c <main+0x160>)
 8001260:	f001 fc6a 	bl	8002b38 <HAL_ADCEx_Calibration_Start>
   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&voltage, 2);
 8001264:	2202      	movs	r2, #2
 8001266:	494e      	ldr	r1, [pc, #312]	; (80013a0 <main+0x164>)
 8001268:	484c      	ldr	r0, [pc, #304]	; (800139c <main+0x160>)
 800126a:	f001 f92f 	bl	80024cc <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001274:	484b      	ldr	r0, [pc, #300]	; (80013a4 <main+0x168>)
 8001276:	f002 f99b 	bl	80035b0 <HAL_GPIO_WritePin>
 //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
   uint8_t displaycount = 0,
 800127a:	2300      	movs	r3, #0
 800127c:	70fb      	strb	r3, [r7, #3]
		   displayflag = 0,
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
		   chargeflag = 0,
 8001282:	2300      	movs	r3, #0
 8001284:	70bb      	strb	r3, [r7, #2]
		   //UPC = 0,
   	   	   AkOn = 0,
 8001286:	2300      	movs	r3, #0
 8001288:	71bb      	strb	r3, [r7, #6]
   	       AkOff = 0,
 800128a:	2300      	movs	r3, #0
 800128c:	717b      	strb	r3, [r7, #5]
		   AkSave = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	713b      	strb	r3, [r7, #4]

  while (1)
  {


	  	  if(flag)
 8001292:	4b45      	ldr	r3, [pc, #276]	; (80013a8 <main+0x16c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0fa      	beq.n	8001292 <main+0x56>
	  	  {
	  		  flag = 0;
 800129c:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <main+0x16c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]

			  HAL_ADC_Stop_DMA(&hadc1);
 80012a2:	483e      	ldr	r0, [pc, #248]	; (800139c <main+0x160>)
 80012a4:	f001 f9f0 	bl	8002688 <HAL_ADC_Stop_DMA>

			  chargeflag = displaycounter(displaycount);
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ffa0 	bl	80011f0 <displaycounter>
 80012b0:	4603      	mov	r3, r0
 80012b2:	70bb      	strb	r3, [r7, #2]

			  if(chargeflag == 0)
 80012b4:	78bb      	ldrb	r3, [r7, #2]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <main+0x8a>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c0:	4838      	ldr	r0, [pc, #224]	; (80013a4 <main+0x168>)
 80012c2:	f002 f975 	bl	80035b0 <HAL_GPIO_WritePin>


			  if(voltage[0] < 3063)
 80012c6:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <main+0x164>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	f640 32f6 	movw	r2, #3062	; 0xbf6
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d803      	bhi.n	80012dc <main+0xa0>
				  AkSave++;
 80012d4:	793b      	ldrb	r3, [r7, #4]
 80012d6:	3301      	adds	r3, #1
 80012d8:	713b      	strb	r3, [r7, #4]
 80012da:	e001      	b.n	80012e0 <main+0xa4>
			  else
				  AkSave = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	713b      	strb	r3, [r7, #4]

			  if(voltage[0] > 3620)
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <main+0x164>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f640 6224 	movw	r2, #3620	; 0xe24
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d903      	bls.n	80012f6 <main+0xba>
				  AkOff++;
 80012ee:	797b      	ldrb	r3, [r7, #5]
 80012f0:	3301      	adds	r3, #1
 80012f2:	717b      	strb	r3, [r7, #5]
 80012f4:	e001      	b.n	80012fa <main+0xbe>
			  else
				  AkOff = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	717b      	strb	r3, [r7, #5]

			  if(voltage[0] < 3392 && chargeflag == 1)
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <main+0x164>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	f5b3 6f54 	cmp.w	r3, #3392	; 0xd40
 8001304:	d206      	bcs.n	8001314 <main+0xd8>
 8001306:	78bb      	ldrb	r3, [r7, #2]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d103      	bne.n	8001314 <main+0xd8>
				  AkOn++;
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	3301      	adds	r3, #1
 8001310:	71bb      	strb	r3, [r7, #6]
 8001312:	e001      	b.n	8001318 <main+0xdc>
			  else
				  AkOn = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	71bb      	strb	r3, [r7, #6]

			  if(displayflag > 12)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	2b0c      	cmp	r3, #12
 800131c:	d90b      	bls.n	8001336 <main+0xfa>
			  {
				  displayvolt(voltage[0], voltage[1], chargeflag);
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <main+0x164>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b298      	uxth	r0, r3
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <main+0x164>)
 8001326:	885b      	ldrh	r3, [r3, #2]
 8001328:	b29b      	uxth	r3, r3
 800132a:	78ba      	ldrb	r2, [r7, #2]
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff fe7f 	bl	8001030 <displayvolt>
				  displayflag = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	71fb      	strb	r3, [r7, #7]
			  }

			  if(AkSave > 8)
 8001336:	793b      	ldrb	r3, [r7, #4]
 8001338:	2b08      	cmp	r3, #8
 800133a:	d907      	bls.n	800134c <main+0x110>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001342:	4818      	ldr	r0, [pc, #96]	; (80013a4 <main+0x168>)
 8001344:	f002 f934 	bl	80035b0 <HAL_GPIO_WritePin>
				  AkSave = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	713b      	strb	r3, [r7, #4]

			  }

			  if(AkOn > 49)
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	2b31      	cmp	r3, #49	; 0x31
 8001350:	d907      	bls.n	8001362 <main+0x126>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <main+0x168>)
 800135a:	f002 f929 	bl	80035b0 <HAL_GPIO_WritePin>
				  AkOn = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	71bb      	strb	r3, [r7, #6]
			  }

			  if(AkOff > 49)
 8001362:	797b      	ldrb	r3, [r7, #5]
 8001364:	2b31      	cmp	r3, #49	; 0x31
 8001366:	d907      	bls.n	8001378 <main+0x13c>
			  {
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <main+0x168>)
 8001370:	f002 f91e 	bl	80035b0 <HAL_GPIO_WritePin>
				  AkOff = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	717b      	strb	r3, [r7, #5]
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
				  powerofflag =0;
			  }*/
	  			  //something code

			  voltage[0] = 0;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <main+0x164>)
 800137a:	2200      	movs	r2, #0
 800137c:	801a      	strh	r2, [r3, #0]
	  		  voltage[1] = 0;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <main+0x164>)
 8001380:	2200      	movs	r2, #0
 8001382:	805a      	strh	r2, [r3, #2]
	  		  displayflag++;
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	3301      	adds	r3, #1
 8001388:	71fb      	strb	r3, [r7, #7]
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&voltage, 2);
 800138a:	2202      	movs	r2, #2
 800138c:	4904      	ldr	r1, [pc, #16]	; (80013a0 <main+0x164>)
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <main+0x160>)
 8001390:	f001 f89c 	bl	80024cc <HAL_ADC_Start_DMA>

			  HAL_Delay(50);
 8001394:	2032      	movs	r0, #50	; 0x32
 8001396:	f000 ff9f 	bl	80022d8 <HAL_Delay>
	  	  if(flag)
 800139a:	e77a      	b.n	8001292 <main+0x56>
 800139c:	2000067c 	.word	0x2000067c
 80013a0:	20000010 	.word	0x20000010
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	20000210 	.word	0x20000210

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b094      	sub	sp, #80	; 0x50
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b6:	2228      	movs	r2, #40	; 0x28
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f003 fc34 	bl	8004c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013dc:	2301      	movs	r3, #1
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ea:	2301      	movs	r3, #1
 80013ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ee:	2302      	movs	r3, #2
 80013f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001402:	4618      	mov	r0, r3
 8001404:	f002 fe58 	bl	80040b8 <HAL_RCC_OscConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800140e:	f000 f947 	bl	80016a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	230f      	movs	r3, #15
 8001414:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001422:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2102      	movs	r1, #2
 800142e:	4618      	mov	r0, r3
 8001430:	f003 f8c2 	bl	80045b8 <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800143a:	f000 f931 	bl	80016a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800143e:	2302      	movs	r3, #2
 8001440:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001446:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fa50 	bl	80048f0 <HAL_RCCEx_PeriphCLKConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001456:	f000 f923 	bl	80016a0 <Error_Handler>
  }
}
 800145a:	bf00      	nop
 800145c:	3750      	adds	r7, #80	; 0x50
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001474:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <MX_ADC1_Init+0x94>)
 8001476:	4a21      	ldr	r2, [pc, #132]	; (80014fc <MX_ADC1_Init+0x98>)
 8001478:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <MX_ADC1_Init+0x94>)
 800147c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001480:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <MX_ADC1_Init+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_ADC1_Init+0x94>)
 800148a:	2200      	movs	r2, #0
 800148c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_ADC1_Init+0x94>)
 8001490:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001494:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_ADC1_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_ADC1_Init+0x94>)
 800149e:	2202      	movs	r2, #2
 80014a0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a2:	4815      	ldr	r0, [pc, #84]	; (80014f8 <MX_ADC1_Init+0x94>)
 80014a4:	f000 ff3a 	bl	800231c <HAL_ADC_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80014ae:	f000 f8f7 	bl	80016a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_ADC1_Init+0x94>)
 80014c4:	f001 f93e 	bl	8002744 <HAL_ADC_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014ce:	f000 f8e7 	bl	80016a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_ADC1_Init+0x94>)
 80014e0:	f001 f930 	bl	8002744 <HAL_ADC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80014ea:	f000 f8d9 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000067c 	.word	0x2000067c
 80014fc:	40012400 	.word	0x40012400

08001500 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_I2C1_Init+0x50>)
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <MX_I2C1_Init+0x54>)
 8001508:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MX_I2C1_Init+0x50>)
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <MX_I2C1_Init+0x58>)
 800150e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_I2C1_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001516:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <MX_I2C1_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_I2C1_Init+0x50>)
 800151e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001522:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <MX_I2C1_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_I2C1_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_I2C1_Init+0x50>)
 800153e:	f002 f84f 	bl	80035e0 <HAL_I2C_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001548:	f000 f8aa 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000628 	.word	0x20000628
 8001554:	40005400 	.word	0x40005400
 8001558:	00061a80 	.word	0x00061a80

0800155c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_DMA_Init+0x38>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <MX_DMA_Init+0x38>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6153      	str	r3, [r2, #20]
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_DMA_Init+0x38>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	200b      	movs	r0, #11
 8001580:	f001 fc5d 	bl	8002e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001584:	200b      	movs	r0, #11
 8001586:	f001 fc76 	bl	8002e76 <HAL_NVIC_EnableIRQ>

}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <MX_GPIO_Init+0xd0>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a2d      	ldr	r2, [pc, #180]	; (8001668 <MX_GPIO_Init+0xd0>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <MX_GPIO_Init+0xd0>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <MX_GPIO_Init+0xd0>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a27      	ldr	r2, [pc, #156]	; (8001668 <MX_GPIO_Init+0xd0>)
 80015ca:	f043 0320 	orr.w	r3, r3, #32
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b25      	ldr	r3, [pc, #148]	; (8001668 <MX_GPIO_Init+0xd0>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <MX_GPIO_Init+0xd0>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a21      	ldr	r2, [pc, #132]	; (8001668 <MX_GPIO_Init+0xd0>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <MX_GPIO_Init+0xd0>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <MX_GPIO_Init+0xd0>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <MX_GPIO_Init+0xd0>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <MX_GPIO_Init+0xd0>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001612:	4816      	ldr	r0, [pc, #88]	; (800166c <MX_GPIO_Init+0xd4>)
 8001614:	f001 ffcc 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161e:	4814      	ldr	r0, [pc, #80]	; (8001670 <MX_GPIO_Init+0xd8>)
 8001620:	f001 ffc6 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2302      	movs	r3, #2
 8001634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4619      	mov	r1, r3
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <MX_GPIO_Init+0xd4>)
 800163e:	f001 fe5d 	bl	80032fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2302      	movs	r3, #2
 8001652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_GPIO_Init+0xd8>)
 800165c:	f001 fe4e 	bl	80032fc <HAL_GPIO_Init>

}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40021000 	.word	0x40021000
 800166c:	40011000 	.word	0x40011000
 8001670:	40010c00 	.word	0x40010c00

08001674 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_ADC_ConvCpltCallback+0x24>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d102      	bne.n	800168c <HAL_ADC_ConvCpltCallback+0x18>
		flag = 1;
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_ADC_ConvCpltCallback+0x28>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40012400 	.word	0x40012400
 800169c:	20000210 	.word	0x20000210

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80016b2:	f000 fbd1 	bl	8001e58 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80016b6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80016ba:	2201      	movs	r2, #1
 80016bc:	2178      	movs	r1, #120	; 0x78
 80016be:	485b      	ldr	r0, [pc, #364]	; (800182c <SSD1306_Init+0x180>)
 80016c0:	f002 f9c4 	bl	8003a4c <HAL_I2C_IsDeviceReady>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e0a9      	b.n	8001822 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80016ce:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80016d2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016d4:	e002      	b.n	80016dc <SSD1306_Init+0x30>
		p--;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3b01      	subs	r3, #1
 80016da:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f9      	bne.n	80016d6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80016e2:	22ae      	movs	r2, #174	; 0xae
 80016e4:	2100      	movs	r1, #0
 80016e6:	2078      	movs	r0, #120	; 0x78
 80016e8:	f000 fc12 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80016ec:	2220      	movs	r2, #32
 80016ee:	2100      	movs	r1, #0
 80016f0:	2078      	movs	r0, #120	; 0x78
 80016f2:	f000 fc0d 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80016f6:	2210      	movs	r2, #16
 80016f8:	2100      	movs	r1, #0
 80016fa:	2078      	movs	r0, #120	; 0x78
 80016fc:	f000 fc08 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001700:	22b0      	movs	r2, #176	; 0xb0
 8001702:	2100      	movs	r1, #0
 8001704:	2078      	movs	r0, #120	; 0x78
 8001706:	f000 fc03 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800170a:	22c8      	movs	r2, #200	; 0xc8
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	; 0x78
 8001710:	f000 fbfe 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2078      	movs	r0, #120	; 0x78
 800171a:	f000 fbf9 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800171e:	2210      	movs	r2, #16
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	; 0x78
 8001724:	f000 fbf4 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001728:	2240      	movs	r2, #64	; 0x40
 800172a:	2100      	movs	r1, #0
 800172c:	2078      	movs	r0, #120	; 0x78
 800172e:	f000 fbef 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001732:	2281      	movs	r2, #129	; 0x81
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	; 0x78
 8001738:	f000 fbea 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800173c:	22ff      	movs	r2, #255	; 0xff
 800173e:	2100      	movs	r1, #0
 8001740:	2078      	movs	r0, #120	; 0x78
 8001742:	f000 fbe5 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001746:	22a1      	movs	r2, #161	; 0xa1
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	; 0x78
 800174c:	f000 fbe0 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001750:	22a6      	movs	r2, #166	; 0xa6
 8001752:	2100      	movs	r1, #0
 8001754:	2078      	movs	r0, #120	; 0x78
 8001756:	f000 fbdb 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800175a:	22a8      	movs	r2, #168	; 0xa8
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	; 0x78
 8001760:	f000 fbd6 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001764:	223f      	movs	r2, #63	; 0x3f
 8001766:	2100      	movs	r1, #0
 8001768:	2078      	movs	r0, #120	; 0x78
 800176a:	f000 fbd1 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800176e:	22a4      	movs	r2, #164	; 0xa4
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	; 0x78
 8001774:	f000 fbcc 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001778:	22d3      	movs	r2, #211	; 0xd3
 800177a:	2100      	movs	r1, #0
 800177c:	2078      	movs	r0, #120	; 0x78
 800177e:	f000 fbc7 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	; 0x78
 8001788:	f000 fbc2 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800178c:	22d5      	movs	r2, #213	; 0xd5
 800178e:	2100      	movs	r1, #0
 8001790:	2078      	movs	r0, #120	; 0x78
 8001792:	f000 fbbd 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001796:	22f0      	movs	r2, #240	; 0xf0
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	; 0x78
 800179c:	f000 fbb8 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80017a0:	22d9      	movs	r2, #217	; 0xd9
 80017a2:	2100      	movs	r1, #0
 80017a4:	2078      	movs	r0, #120	; 0x78
 80017a6:	f000 fbb3 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80017aa:	2222      	movs	r2, #34	; 0x22
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	; 0x78
 80017b0:	f000 fbae 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80017b4:	22da      	movs	r2, #218	; 0xda
 80017b6:	2100      	movs	r1, #0
 80017b8:	2078      	movs	r0, #120	; 0x78
 80017ba:	f000 fba9 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80017be:	2212      	movs	r2, #18
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	; 0x78
 80017c4:	f000 fba4 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80017c8:	22db      	movs	r2, #219	; 0xdb
 80017ca:	2100      	movs	r1, #0
 80017cc:	2078      	movs	r0, #120	; 0x78
 80017ce:	f000 fb9f 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80017d2:	2220      	movs	r2, #32
 80017d4:	2100      	movs	r1, #0
 80017d6:	2078      	movs	r0, #120	; 0x78
 80017d8:	f000 fb9a 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80017dc:	228d      	movs	r2, #141	; 0x8d
 80017de:	2100      	movs	r1, #0
 80017e0:	2078      	movs	r0, #120	; 0x78
 80017e2:	f000 fb95 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80017e6:	2214      	movs	r2, #20
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	; 0x78
 80017ec:	f000 fb90 	bl	8001f10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80017f0:	22af      	movs	r2, #175	; 0xaf
 80017f2:	2100      	movs	r1, #0
 80017f4:	2078      	movs	r0, #120	; 0x78
 80017f6:	f000 fb8b 	bl	8001f10 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80017fa:	222e      	movs	r2, #46	; 0x2e
 80017fc:	2100      	movs	r1, #0
 80017fe:	2078      	movs	r0, #120	; 0x78
 8001800:	f000 fb86 	bl	8001f10 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001804:	2000      	movs	r0, #0
 8001806:	f000 f843 	bl	8001890 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800180a:	f000 f813 	bl	8001834 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <SSD1306_Init+0x184>)
 8001810:	2200      	movs	r2, #0
 8001812:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <SSD1306_Init+0x184>)
 8001816:	2200      	movs	r2, #0
 8001818:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800181a:	4b05      	ldr	r3, [pc, #20]	; (8001830 <SSD1306_Init+0x184>)
 800181c:	2201      	movs	r2, #1
 800181e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000628 	.word	0x20000628
 8001830:	20000614 	.word	0x20000614

08001834 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800183a:	2300      	movs	r3, #0
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	e01d      	b.n	800187c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	3b50      	subs	r3, #80	; 0x50
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	2078      	movs	r0, #120	; 0x78
 800184c:	f000 fb60 	bl	8001f10 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001850:	2200      	movs	r2, #0
 8001852:	2100      	movs	r1, #0
 8001854:	2078      	movs	r0, #120	; 0x78
 8001856:	f000 fb5b 	bl	8001f10 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800185a:	2210      	movs	r2, #16
 800185c:	2100      	movs	r1, #0
 800185e:	2078      	movs	r0, #120	; 0x78
 8001860:	f000 fb56 	bl	8001f10 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	01db      	lsls	r3, r3, #7
 8001868:	4a08      	ldr	r2, [pc, #32]	; (800188c <SSD1306_UpdateScreen+0x58>)
 800186a:	441a      	add	r2, r3
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	2140      	movs	r1, #64	; 0x40
 8001870:	2078      	movs	r0, #120	; 0x78
 8001872:	f000 fb05 	bl	8001e80 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	3301      	adds	r3, #1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b07      	cmp	r3, #7
 8001880:	d9de      	bls.n	8001840 <SSD1306_UpdateScreen+0xc>
	}
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000214 	.word	0x20000214

08001890 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <SSD1306_Fill+0x14>
 80018a0:	2300      	movs	r3, #0
 80018a2:	e000      	b.n	80018a6 <SSD1306_Fill+0x16>
 80018a4:	23ff      	movs	r3, #255	; 0xff
 80018a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018aa:	4619      	mov	r1, r3
 80018ac:	4803      	ldr	r0, [pc, #12]	; (80018bc <SSD1306_Fill+0x2c>)
 80018ae:	f003 f9bb 	bl	8004c28 <memset>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000214 	.word	0x20000214

080018c0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
 80018ca:	460b      	mov	r3, r1
 80018cc:	80bb      	strh	r3, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	70fb      	strb	r3, [r7, #3]
	if (
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	2b7f      	cmp	r3, #127	; 0x7f
 80018d6:	d848      	bhi.n	800196a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80018d8:	88bb      	ldrh	r3, [r7, #4]
 80018da:	2b3f      	cmp	r3, #63	; 0x3f
 80018dc:	d845      	bhi.n	800196a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <SSD1306_DrawPixel+0xb4>)
 80018e0:	791b      	ldrb	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf0c      	ite	eq
 80018ec:	2301      	moveq	r3, #1
 80018ee:	2300      	movne	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d11a      	bne.n	8001930 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	88bb      	ldrh	r3, [r7, #4]
 80018fe:	08db      	lsrs	r3, r3, #3
 8001900:	b298      	uxth	r0, r3
 8001902:	4603      	mov	r3, r0
 8001904:	01db      	lsls	r3, r3, #7
 8001906:	4413      	add	r3, r2
 8001908:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <SSD1306_DrawPixel+0xb8>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	b25a      	sxtb	r2, r3
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	b25b      	sxtb	r3, r3
 800191c:	4313      	orrs	r3, r2
 800191e:	b259      	sxtb	r1, r3
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	4603      	mov	r3, r0
 8001924:	01db      	lsls	r3, r3, #7
 8001926:	4413      	add	r3, r2
 8001928:	b2c9      	uxtb	r1, r1
 800192a:	4a13      	ldr	r2, [pc, #76]	; (8001978 <SSD1306_DrawPixel+0xb8>)
 800192c:	54d1      	strb	r1, [r2, r3]
 800192e:	e01d      	b.n	800196c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001930:	88fa      	ldrh	r2, [r7, #6]
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	08db      	lsrs	r3, r3, #3
 8001936:	b298      	uxth	r0, r3
 8001938:	4603      	mov	r3, r0
 800193a:	01db      	lsls	r3, r3, #7
 800193c:	4413      	add	r3, r2
 800193e:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <SSD1306_DrawPixel+0xb8>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	b25a      	sxtb	r2, r3
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	b25b      	sxtb	r3, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	b25b      	sxtb	r3, r3
 8001956:	4013      	ands	r3, r2
 8001958:	b259      	sxtb	r1, r3
 800195a:	88fa      	ldrh	r2, [r7, #6]
 800195c:	4603      	mov	r3, r0
 800195e:	01db      	lsls	r3, r3, #7
 8001960:	4413      	add	r3, r2
 8001962:	b2c9      	uxtb	r1, r1
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <SSD1306_DrawPixel+0xb8>)
 8001966:	54d1      	strb	r1, [r2, r3]
 8001968:	e000      	b.n	800196c <SSD1306_DrawPixel+0xac>
		return;
 800196a:	bf00      	nop
	}
}
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr
 8001974:	20000614 	.word	0x20000614
 8001978:	20000214 	.word	0x20000214

0800197c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	460a      	mov	r2, r1
 8001986:	80fb      	strh	r3, [r7, #6]
 8001988:	4613      	mov	r3, r2
 800198a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800198c:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <SSD1306_GotoXY+0x28>)
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <SSD1306_GotoXY+0x28>)
 8001994:	88bb      	ldrh	r3, [r7, #4]
 8001996:	8053      	strh	r3, [r2, #2]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000614 	.word	0x20000614

080019a8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80019b8:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <SSD1306_Putc+0xfc>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
	if (
 80019c4:	2b7f      	cmp	r3, #127	; 0x7f
 80019c6:	dc07      	bgt.n	80019d8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80019c8:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <SSD1306_Putc+0xfc>)
 80019ca:	885b      	ldrh	r3, [r3, #2]
 80019cc:	461a      	mov	r2, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	785b      	ldrb	r3, [r3, #1]
 80019d2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80019d4:	2b3f      	cmp	r3, #63	; 0x3f
 80019d6:	dd01      	ble.n	80019dc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	e05e      	b.n	8001a9a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	e04b      	b.n	8001a7a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	3b20      	subs	r3, #32
 80019ea:	6839      	ldr	r1, [r7, #0]
 80019ec:	7849      	ldrb	r1, [r1, #1]
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4619      	mov	r1, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	440b      	add	r3, r1
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	e030      	b.n	8001a68 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d010      	beq.n	8001a38 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <SSD1306_Putc+0xfc>)
 8001a18:	881a      	ldrh	r2, [r3, #0]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b298      	uxth	r0, r3
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <SSD1306_Putc+0xfc>)
 8001a24:	885a      	ldrh	r2, [r3, #2]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	79ba      	ldrb	r2, [r7, #6]
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff ff45 	bl	80018c0 <SSD1306_DrawPixel>
 8001a36:	e014      	b.n	8001a62 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <SSD1306_Putc+0xfc>)
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b298      	uxth	r0, r3
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <SSD1306_Putc+0xfc>)
 8001a46:	885a      	ldrh	r2, [r3, #2]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	b299      	uxth	r1, r3
 8001a50:	79bb      	ldrb	r3, [r7, #6]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf0c      	ite	eq
 8001a56:	2301      	moveq	r3, #1
 8001a58:	2300      	movne	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f7ff ff2f 	bl	80018c0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	3301      	adds	r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d3c8      	bcc.n	8001a06 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d3ad      	bcc.n	80019e2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <SSD1306_Putc+0xfc>)
 8001a88:	881a      	ldrh	r2, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4413      	add	r3, r2
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <SSD1306_Putc+0xfc>)
 8001a96:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001a98:	79fb      	ldrb	r3, [r7, #7]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000614 	.word	0x20000614

08001aa8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001ab6:	e012      	b.n	8001ade <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	79fa      	ldrb	r2, [r7, #7]
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff71 	bl	80019a8 <SSD1306_Putc>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d002      	beq.n	8001ad8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	e008      	b.n	8001aea <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3301      	adds	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1e8      	bne.n	8001ab8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001af2:	b590      	push	{r4, r7, lr}
 8001af4:	b087      	sub	sp, #28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4604      	mov	r4, r0
 8001afa:	4608      	mov	r0, r1
 8001afc:	4611      	mov	r1, r2
 8001afe:	461a      	mov	r2, r3
 8001b00:	4623      	mov	r3, r4
 8001b02:	80fb      	strh	r3, [r7, #6]
 8001b04:	4603      	mov	r3, r0
 8001b06:	80bb      	strh	r3, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	2b7f      	cmp	r3, #127	; 0x7f
 8001b14:	d901      	bls.n	8001b1a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001b16:	237f      	movs	r3, #127	; 0x7f
 8001b18:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b1e:	d901      	bls.n	8001b24 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001b20:	237f      	movs	r3, #127	; 0x7f
 8001b22:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	2b3f      	cmp	r3, #63	; 0x3f
 8001b28:	d901      	bls.n	8001b2e <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001b2a:	233f      	movs	r3, #63	; 0x3f
 8001b2c:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001b2e:	883b      	ldrh	r3, [r7, #0]
 8001b30:	2b3f      	cmp	r3, #63	; 0x3f
 8001b32:	d901      	bls.n	8001b38 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001b34:	233f      	movs	r3, #63	; 0x3f
 8001b36:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d205      	bcs.n	8001b4c <SSD1306_DrawLine+0x5a>
 8001b40:	887a      	ldrh	r2, [r7, #2]
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	e004      	b.n	8001b56 <SSD1306_DrawLine+0x64>
 8001b4c:	88fa      	ldrh	r2, [r7, #6]
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001b58:	88ba      	ldrh	r2, [r7, #4]
 8001b5a:	883b      	ldrh	r3, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d205      	bcs.n	8001b6c <SSD1306_DrawLine+0x7a>
 8001b60:	883a      	ldrh	r2, [r7, #0]
 8001b62:	88bb      	ldrh	r3, [r7, #4]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	e004      	b.n	8001b76 <SSD1306_DrawLine+0x84>
 8001b6c:	88ba      	ldrh	r2, [r7, #4]
 8001b6e:	883b      	ldrh	r3, [r7, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d201      	bcs.n	8001b84 <SSD1306_DrawLine+0x92>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e001      	b.n	8001b88 <SSD1306_DrawLine+0x96>
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001b8a:	88ba      	ldrh	r2, [r7, #4]
 8001b8c:	883b      	ldrh	r3, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d201      	bcs.n	8001b96 <SSD1306_DrawLine+0xa4>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e001      	b.n	8001b9a <SSD1306_DrawLine+0xa8>
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001b9c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ba0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dd06      	ble.n	8001bb6 <SSD1306_DrawLine+0xc4>
 8001ba8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bac:	0fda      	lsrs	r2, r3, #31
 8001bae:	4413      	add	r3, r2
 8001bb0:	105b      	asrs	r3, r3, #1
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	e006      	b.n	8001bc4 <SSD1306_DrawLine+0xd2>
 8001bb6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bba:	425b      	negs	r3, r3
 8001bbc:	0fda      	lsrs	r2, r3, #31
 8001bbe:	4413      	add	r3, r2
 8001bc0:	105b      	asrs	r3, r3, #1
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001bc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d129      	bne.n	8001c22 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001bce:	883a      	ldrh	r2, [r7, #0]
 8001bd0:	88bb      	ldrh	r3, [r7, #4]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d205      	bcs.n	8001be2 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001bd6:	883b      	ldrh	r3, [r7, #0]
 8001bd8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001bda:	88bb      	ldrh	r3, [r7, #4]
 8001bdc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001bde:	893b      	ldrh	r3, [r7, #8]
 8001be0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d205      	bcs.n	8001bf6 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001bea:	887b      	ldrh	r3, [r7, #2]
 8001bec:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001bf2:	893b      	ldrh	r3, [r7, #8]
 8001bf4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	82bb      	strh	r3, [r7, #20]
 8001bfa:	e00c      	b.n	8001c16 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001bfc:	8ab9      	ldrh	r1, [r7, #20]
 8001bfe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fe5b 	bl	80018c0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001c0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3301      	adds	r3, #1
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	82bb      	strh	r3, [r7, #20]
 8001c16:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c1a:	883b      	ldrh	r3, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dded      	ble.n	8001bfc <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001c20:	e05f      	b.n	8001ce2 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001c22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d129      	bne.n	8001c7e <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001c2a:	883a      	ldrh	r2, [r7, #0]
 8001c2c:	88bb      	ldrh	r3, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d205      	bcs.n	8001c3e <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001c32:	883b      	ldrh	r3, [r7, #0]
 8001c34:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c36:	88bb      	ldrh	r3, [r7, #4]
 8001c38:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c3a:	893b      	ldrh	r3, [r7, #8]
 8001c3c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d205      	bcs.n	8001c52 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c4e:	893b      	ldrh	r3, [r7, #8]
 8001c50:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	82bb      	strh	r3, [r7, #20]
 8001c56:	e00c      	b.n	8001c72 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001c58:	8abb      	ldrh	r3, [r7, #20]
 8001c5a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c5e:	88b9      	ldrh	r1, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fe2d 	bl	80018c0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001c66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	82bb      	strh	r3, [r7, #20]
 8001c72:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dded      	ble.n	8001c58 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001c7c:	e031      	b.n	8001ce2 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001c7e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c82:	88b9      	ldrh	r1, [r7, #4]
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fe1a 	bl	80018c0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d103      	bne.n	8001c9c <SSD1306_DrawLine+0x1aa>
 8001c94:	88ba      	ldrh	r2, [r7, #4]
 8001c96:	883b      	ldrh	r3, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d021      	beq.n	8001ce0 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001c9c:	8afb      	ldrh	r3, [r7, #22]
 8001c9e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001ca0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ca4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ca8:	425b      	negs	r3, r3
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dd08      	ble.n	8001cc0 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001cae:	8afa      	ldrh	r2, [r7, #22]
 8001cb0:	8a3b      	ldrh	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001cb8:	89fa      	ldrh	r2, [r7, #14]
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001cc0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001cc4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dad8      	bge.n	8001c7e <SSD1306_DrawLine+0x18c>
			err += dx;
 8001ccc:	8afa      	ldrh	r2, [r7, #22]
 8001cce:	8a7b      	ldrh	r3, [r7, #18]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001cd6:	89ba      	ldrh	r2, [r7, #12]
 8001cd8:	88bb      	ldrh	r3, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001cde:	e7ce      	b.n	8001c7e <SSD1306_DrawLine+0x18c>
			break;
 8001ce0:	bf00      	nop
		} 
	}
}
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd90      	pop	{r4, r7, pc}

08001ce8 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	4604      	mov	r4, r0
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	80fb      	strh	r3, [r7, #6]
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80bb      	strh	r3, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	807b      	strh	r3, [r7, #2]
 8001d02:	4613      	mov	r3, r2
 8001d04:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	2b7f      	cmp	r3, #127	; 0x7f
 8001d0a:	d853      	bhi.n	8001db4 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001d0c:	88bb      	ldrh	r3, [r7, #4]
 8001d0e:	2b3f      	cmp	r3, #63	; 0x3f
 8001d10:	d850      	bhi.n	8001db4 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001d12:	88fa      	ldrh	r2, [r7, #6]
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	4413      	add	r3, r2
 8001d18:	2b7f      	cmp	r3, #127	; 0x7f
 8001d1a:	dd03      	ble.n	8001d24 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d22:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001d24:	88ba      	ldrh	r2, [r7, #4]
 8001d26:	883b      	ldrh	r3, [r7, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	2b3f      	cmp	r3, #63	; 0x3f
 8001d2c:	dd03      	ble.n	8001d36 <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001d2e:	88bb      	ldrh	r3, [r7, #4]
 8001d30:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001d34:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001d36:	88fa      	ldrh	r2, [r7, #6]
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	88bc      	ldrh	r4, [r7, #4]
 8001d40:	88b9      	ldrh	r1, [r7, #4]
 8001d42:	88f8      	ldrh	r0, [r7, #6]
 8001d44:	7e3b      	ldrb	r3, [r7, #24]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	4623      	mov	r3, r4
 8001d4a:	f7ff fed2 	bl	8001af2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001d4e:	88ba      	ldrh	r2, [r7, #4]
 8001d50:	883b      	ldrh	r3, [r7, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	b299      	uxth	r1, r3
 8001d56:	88fa      	ldrh	r2, [r7, #6]
 8001d58:	887b      	ldrh	r3, [r7, #2]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b29c      	uxth	r4, r3
 8001d5e:	88ba      	ldrh	r2, [r7, #4]
 8001d60:	883b      	ldrh	r3, [r7, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	88f8      	ldrh	r0, [r7, #6]
 8001d68:	7e3b      	ldrb	r3, [r7, #24]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	4622      	mov	r2, r4
 8001d70:	f7ff febf 	bl	8001af2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001d74:	88ba      	ldrh	r2, [r7, #4]
 8001d76:	883b      	ldrh	r3, [r7, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b29c      	uxth	r4, r3
 8001d7c:	88fa      	ldrh	r2, [r7, #6]
 8001d7e:	88b9      	ldrh	r1, [r7, #4]
 8001d80:	88f8      	ldrh	r0, [r7, #6]
 8001d82:	7e3b      	ldrb	r3, [r7, #24]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	4623      	mov	r3, r4
 8001d88:	f7ff feb3 	bl	8001af2 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001d8c:	88fa      	ldrh	r2, [r7, #6]
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	4413      	add	r3, r2
 8001d92:	b298      	uxth	r0, r3
 8001d94:	88fa      	ldrh	r2, [r7, #6]
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	4413      	add	r3, r2
 8001d9a:	b29c      	uxth	r4, r3
 8001d9c:	88ba      	ldrh	r2, [r7, #4]
 8001d9e:	883b      	ldrh	r3, [r7, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	88b9      	ldrh	r1, [r7, #4]
 8001da6:	7e3b      	ldrb	r3, [r7, #24]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	4622      	mov	r2, r4
 8001dae:	f7ff fea0 	bl	8001af2 <SSD1306_DrawLine>
 8001db2:	e000      	b.n	8001db6 <SSD1306_DrawRectangle+0xce>
		return;
 8001db4:	bf00      	nop
}
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd90      	pop	{r4, r7, pc}

08001dbc <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	4608      	mov	r0, r1
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4623      	mov	r3, r4
 8001dcc:	80fb      	strh	r3, [r7, #6]
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80bb      	strh	r3, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8001dde:	d836      	bhi.n	8001e4e <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001de0:	88bb      	ldrh	r3, [r7, #4]
 8001de2:	2b3f      	cmp	r3, #63	; 0x3f
 8001de4:	d833      	bhi.n	8001e4e <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001de6:	88fa      	ldrh	r2, [r7, #6]
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	4413      	add	r3, r2
 8001dec:	2b7f      	cmp	r3, #127	; 0x7f
 8001dee:	dd03      	ble.n	8001df8 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001df6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001df8:	88ba      	ldrh	r2, [r7, #4]
 8001dfa:	883b      	ldrh	r3, [r7, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	2b3f      	cmp	r3, #63	; 0x3f
 8001e00:	dd03      	ble.n	8001e0a <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001e02:	88bb      	ldrh	r3, [r7, #4]
 8001e04:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001e08:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	e018      	b.n	8001e42 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	88bb      	ldrh	r3, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	b299      	uxth	r1, r3
 8001e1a:	88fa      	ldrh	r2, [r7, #6]
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	4413      	add	r3, r2
 8001e20:	b29c      	uxth	r4, r3
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	88bb      	ldrh	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	88f8      	ldrh	r0, [r7, #6]
 8001e2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	4622      	mov	r2, r4
 8001e38:	f7ff fe5b 	bl	8001af2 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	883a      	ldrh	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d2e1      	bcs.n	8001e10 <SSD1306_DrawFilledRectangle+0x54>
 8001e4c:	e000      	b.n	8001e50 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8001e4e:	bf00      	nop
	}
}
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}
	...

08001e58 <ssd1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);  
}


void ssd1306_I2C_Init() {
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <ssd1306_I2C_Init+0x24>)
 8001e60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e62:	e002      	b.n	8001e6a <ssd1306_I2C_Init+0x12>
		p--;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f9      	bne.n	8001e64 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	0003d090 	.word	0x0003d090

08001e80 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b0c7      	sub	sp, #284	; 0x11c
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	4604      	mov	r4, r0
 8001e88:	4608      	mov	r0, r1
 8001e8a:	4639      	mov	r1, r7
 8001e8c:	600a      	str	r2, [r1, #0]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	1dfb      	adds	r3, r7, #7
 8001e92:	4622      	mov	r2, r4
 8001e94:	701a      	strb	r2, [r3, #0]
 8001e96:	1dbb      	adds	r3, r7, #6
 8001e98:	4602      	mov	r2, r0
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	460a      	mov	r2, r1
 8001ea0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	1dba      	adds	r2, r7, #6
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001eb2:	e010      	b.n	8001ed6 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001eb4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001eb8:	463a      	mov	r2, r7
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	441a      	add	r2, r3
 8001ebe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	7811      	ldrb	r1, [r2, #0]
 8001ec6:	f107 020c 	add.w	r2, r7, #12
 8001eca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ecc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001ed6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	1d3a      	adds	r2, r7, #4
 8001ede:	8812      	ldrh	r2, [r2, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d8e7      	bhi.n	8001eb4 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001ee4:	1dfb      	adds	r3, r7, #7
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b299      	uxth	r1, r3
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b298      	uxth	r0, r3
 8001ef2:	f107 020c 	add.w	r2, r7, #12
 8001ef6:	230a      	movs	r3, #10
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	4603      	mov	r3, r0
 8001efc:	4803      	ldr	r0, [pc, #12]	; (8001f0c <ssd1306_I2C_WriteMulti+0x8c>)
 8001efe:	f001 fca7 	bl	8003850 <HAL_I2C_Master_Transmit>
}
 8001f02:	bf00      	nop
 8001f04:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd90      	pop	{r4, r7, pc}
 8001f0c:	20000628 	.word	0x20000628

08001f10 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	71bb      	strb	r3, [r7, #6]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001f22:	79bb      	ldrb	r3, [r7, #6]
 8001f24:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001f26:	797b      	ldrb	r3, [r7, #5]
 8001f28:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	b299      	uxth	r1, r3
 8001f2e:	f107 020c 	add.w	r2, r7, #12
 8001f32:	230a      	movs	r3, #10
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2302      	movs	r3, #2
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <ssd1306_I2C_Write+0x38>)
 8001f3a:	f001 fc89 	bl	8003850 <HAL_I2C_Master_Transmit>
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000628 	.word	0x20000628

08001f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	4a14      	ldr	r2, [pc, #80]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6193      	str	r3, [r2, #24]
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_MspInit+0x5c>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_MspInit+0x60>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_MspInit+0x60>)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40010000 	.word	0x40010000

08001fb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a28      	ldr	r2, [pc, #160]	; (800206c <HAL_ADC_MspInit+0xbc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d149      	bne.n	8002064 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_ADC_MspInit+0xc0>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a26      	ldr	r2, [pc, #152]	; (8002070 <HAL_ADC_MspInit+0xc0>)
 8001fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_ADC_MspInit+0xc0>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_ADC_MspInit+0xc0>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a20      	ldr	r2, [pc, #128]	; (8002070 <HAL_ADC_MspInit+0xc0>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_ADC_MspInit+0xc0>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002000:	2303      	movs	r3, #3
 8002002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002004:	2303      	movs	r3, #3
 8002006:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	4619      	mov	r1, r3
 800200e:	4819      	ldr	r0, [pc, #100]	; (8002074 <HAL_ADC_MspInit+0xc4>)
 8002010:	f001 f974 	bl	80032fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_ADC_MspInit+0xc8>)
 8002016:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_ADC_MspInit+0xcc>)
 8002018:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_ADC_MspInit+0xc8>)
 800201c:	2200      	movs	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002020:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_ADC_MspInit+0xc8>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_ADC_MspInit+0xc8>)
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_ADC_MspInit+0xc8>)
 800202e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002032:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_ADC_MspInit+0xc8>)
 8002036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800203a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <HAL_ADC_MspInit+0xc8>)
 800203e:	2200      	movs	r2, #0
 8002040:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_ADC_MspInit+0xc8>)
 8002044:	2200      	movs	r2, #0
 8002046:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002048:	480b      	ldr	r0, [pc, #44]	; (8002078 <HAL_ADC_MspInit+0xc8>)
 800204a:	f000 ff2f 	bl	8002eac <HAL_DMA_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002054:	f7ff fb24 	bl	80016a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_ADC_MspInit+0xc8>)
 800205c:	621a      	str	r2, [r3, #32]
 800205e:	4a06      	ldr	r2, [pc, #24]	; (8002078 <HAL_ADC_MspInit+0xc8>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40012400 	.word	0x40012400
 8002070:	40021000 	.word	0x40021000
 8002074:	40010800 	.word	0x40010800
 8002078:	200006ac 	.word	0x200006ac
 800207c:	40020008 	.word	0x40020008

08002080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0310 	add.w	r3, r7, #16
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <HAL_I2C_MspInit+0x70>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d123      	bne.n	80020e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_I2C_MspInit+0x74>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	4a13      	ldr	r2, [pc, #76]	; (80020f4 <HAL_I2C_MspInit+0x74>)
 80020a6:	f043 0308 	orr.w	r3, r3, #8
 80020aa:	6193      	str	r3, [r2, #24]
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_I2C_MspInit+0x74>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020b8:	23c0      	movs	r3, #192	; 0xc0
 80020ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020bc:	2312      	movs	r3, #18
 80020be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	4619      	mov	r1, r3
 80020ca:	480b      	ldr	r0, [pc, #44]	; (80020f8 <HAL_I2C_MspInit+0x78>)
 80020cc:	f001 f916 	bl	80032fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_I2C_MspInit+0x74>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_I2C_MspInit+0x74>)
 80020d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020da:	61d3      	str	r3, [r2, #28]
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_I2C_MspInit+0x74>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020e8:	bf00      	nop
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40005400 	.word	0x40005400
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40010c00 	.word	0x40010c00

080020fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <HardFault_Handler+0x4>

0800210e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <MemManage_Handler+0x4>

08002114 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <BusFault_Handler+0x4>

0800211a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <UsageFault_Handler+0x4>

08002120 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002148:	f000 f8aa 	bl	80022a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}

08002150 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <DMA1_Channel1_IRQHandler+0x10>)
 8002156:	f000 ff9d 	bl	8003094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200006ac 	.word	0x200006ac

08002164 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <_sbrk+0x50>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d102      	bne.n	800217a <_sbrk+0x16>
		heap_end = &end;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <_sbrk+0x50>)
 8002176:	4a10      	ldr	r2, [pc, #64]	; (80021b8 <_sbrk+0x54>)
 8002178:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <_sbrk+0x50>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <_sbrk+0x50>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	466a      	mov	r2, sp
 800218a:	4293      	cmp	r3, r2
 800218c:	d907      	bls.n	800219e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800218e:	f002 fd21 	bl	8004bd4 <__errno>
 8002192:	4602      	mov	r2, r0
 8002194:	230c      	movs	r3, #12
 8002196:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
 800219c:	e006      	b.n	80021ac <_sbrk+0x48>
	}

	heap_end += incr;
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <_sbrk+0x50>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <_sbrk+0x50>)
 80021a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80021aa:	68fb      	ldr	r3, [r7, #12]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000061c 	.word	0x2000061c
 80021b8:	200006f8 	.word	0x200006f8

080021bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ca:	490d      	ldr	r1, [pc, #52]	; (8002200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e0:	4c0a      	ldr	r4, [pc, #40]	; (800220c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021ee:	f7ff ffe5 	bl	80021bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f2:	f002 fcf5 	bl	8004be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021f6:	f7ff f821 	bl	800123c <main>
  bx lr
 80021fa:	4770      	bx	lr
  ldr r0, =_sdata
 80021fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002200:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002204:	08008460 	.word	0x08008460
  ldr r2, =_sbss
 8002208:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800220c:	200006f8 	.word	0x200006f8

08002210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC1_2_IRQHandler>
	...

08002214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <HAL_Init+0x28>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a07      	ldr	r2, [pc, #28]	; (800223c <HAL_Init+0x28>)
 800221e:	f043 0310 	orr.w	r3, r3, #16
 8002222:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002224:	2003      	movs	r0, #3
 8002226:	f000 fdff 	bl	8002e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222a:	2000      	movs	r0, #0
 800222c:	f000 f808 	bl	8002240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002230:	f7ff fe8c 	bl	8001f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40022000 	.word	0x40022000

08002240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_InitTick+0x54>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x58>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002256:	fbb3 f3f1 	udiv	r3, r3, r1
 800225a:	fbb2 f3f3 	udiv	r3, r2, r3
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fe17 	bl	8002e92 <HAL_SYSTICK_Config>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00e      	b.n	800228c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b0f      	cmp	r3, #15
 8002272:	d80a      	bhi.n	800228a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002274:	2200      	movs	r2, #0
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f000 fddf 	bl	8002e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002280:	4a06      	ldr	r2, [pc, #24]	; (800229c <HAL_InitTick+0x5c>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000018 	.word	0x20000018
 8002298:	20000020 	.word	0x20000020
 800229c:	2000001c 	.word	0x2000001c

080022a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_IncTick+0x1c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_IncTick+0x20>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a03      	ldr	r2, [pc, #12]	; (80022c0 <HAL_IncTick+0x20>)
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	20000020 	.word	0x20000020
 80022c0:	200006f0 	.word	0x200006f0

080022c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return uwTick;
 80022c8:	4b02      	ldr	r3, [pc, #8]	; (80022d4 <HAL_GetTick+0x10>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	200006f0 	.word	0x200006f0

080022d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff fff0 	bl	80022c4 <HAL_GetTick>
 80022e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d005      	beq.n	80022fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_Delay+0x40>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022fe:	bf00      	nop
 8002300:	f7ff ffe0 	bl	80022c4 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8f7      	bhi.n	8002300 <HAL_Delay+0x28>
  {
  }
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000020 	.word	0x20000020

0800231c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0be      	b.n	80024bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fe28 	bl	8001fb0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fb41 	bl	80029e8 <ADC_ConversionStop_Disable>
 8002366:	4603      	mov	r3, r0
 8002368:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 8099 	bne.w	80024aa <HAL_ADC_Init+0x18e>
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 8095 	bne.w	80024aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002388:	f023 0302 	bic.w	r3, r3, #2
 800238c:	f043 0202 	orr.w	r2, r3, #2
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800239c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7b1b      	ldrb	r3, [r3, #12]
 80023a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b4:	d003      	beq.n	80023be <HAL_ADC_Init+0xa2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d102      	bne.n	80023c4 <HAL_ADC_Init+0xa8>
 80023be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c2:	e000      	b.n	80023c6 <HAL_ADC_Init+0xaa>
 80023c4:	2300      	movs	r3, #0
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7d1b      	ldrb	r3, [r3, #20]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d119      	bne.n	8002408 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7b1b      	ldrb	r3, [r3, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	035a      	lsls	r2, r3, #13
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	e00b      	b.n	8002408 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	430a      	orrs	r2, r1
 800241a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	4b28      	ldr	r3, [pc, #160]	; (80024c4 <HAL_ADC_Init+0x1a8>)
 8002424:	4013      	ands	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	430b      	orrs	r3, r1
 800242e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002438:	d003      	beq.n	8002442 <HAL_ADC_Init+0x126>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d104      	bne.n	800244c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	3b01      	subs	r3, #1
 8002448:	051b      	lsls	r3, r3, #20
 800244a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	430a      	orrs	r2, r1
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_ADC_Init+0x1ac>)
 8002468:	4013      	ands	r3, r2
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	d10b      	bne.n	8002488 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	f043 0201 	orr.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002486:	e018      	b.n	80024ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	f023 0312 	bic.w	r3, r3, #18
 8002490:	f043 0210 	orr.w	r2, r3, #16
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024a8:	e007      	b.n	80024ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	f043 0210 	orr.w	r2, r3, #16
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	ffe1f7fd 	.word	0xffe1f7fd
 80024c8:	ff1f0efe 	.word	0xff1f0efe

080024cc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a64      	ldr	r2, [pc, #400]	; (8002674 <HAL_ADC_Start_DMA+0x1a8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d004      	beq.n	80024f0 <HAL_ADC_Start_DMA+0x24>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a63      	ldr	r2, [pc, #396]	; (8002678 <HAL_ADC_Start_DMA+0x1ac>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d106      	bne.n	80024fe <HAL_ADC_Start_DMA+0x32>
 80024f0:	4b60      	ldr	r3, [pc, #384]	; (8002674 <HAL_ADC_Start_DMA+0x1a8>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f040 80b3 	bne.w	8002664 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_ADC_Start_DMA+0x40>
 8002508:	2302      	movs	r3, #2
 800250a:	e0ae      	b.n	800266a <HAL_ADC_Start_DMA+0x19e>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 fa0d 	bl	8002934 <ADC_Enable>
 800251a:	4603      	mov	r3, r0
 800251c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	2b00      	cmp	r3, #0
 8002522:	f040 809a 	bne.w	800265a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a4e      	ldr	r2, [pc, #312]	; (8002678 <HAL_ADC_Start_DMA+0x1ac>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d105      	bne.n	8002550 <HAL_ADC_Start_DMA+0x84>
 8002544:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <HAL_ADC_Start_DMA+0x1a8>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d115      	bne.n	800257c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002566:	2b00      	cmp	r3, #0
 8002568:	d026      	beq.n	80025b8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002572:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800257a:	e01d      	b.n	80025b8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a39      	ldr	r2, [pc, #228]	; (8002674 <HAL_ADC_Start_DMA+0x1a8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d004      	beq.n	800259c <HAL_ADC_Start_DMA+0xd0>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a38      	ldr	r2, [pc, #224]	; (8002678 <HAL_ADC_Start_DMA+0x1ac>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d10d      	bne.n	80025b8 <HAL_ADC_Start_DMA+0xec>
 800259c:	4b35      	ldr	r3, [pc, #212]	; (8002674 <HAL_ADC_Start_DMA+0x1a8>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d006      	beq.n	80025d2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	f023 0206 	bic.w	r2, r3, #6
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80025d0:	e002      	b.n	80025d8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a25      	ldr	r2, [pc, #148]	; (800267c <HAL_ADC_Start_DMA+0x1b0>)
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4a24      	ldr	r2, [pc, #144]	; (8002680 <HAL_ADC_Start_DMA+0x1b4>)
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4a23      	ldr	r2, [pc, #140]	; (8002684 <HAL_ADC_Start_DMA+0x1b8>)
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0202 	mvn.w	r2, #2
 8002600:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002610:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a18      	ldr	r0, [r3, #32]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	334c      	adds	r3, #76	; 0x4c
 800261c:	4619      	mov	r1, r3
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f000 fc9d 	bl	8002f60 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002630:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002634:	d108      	bne.n	8002648 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002644:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002646:	e00f      	b.n	8002668 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002656:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002658:	e006      	b.n	8002668 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002662:	e001      	b.n	8002668 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002668:	7dfb      	ldrb	r3, [r7, #23]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40012400 	.word	0x40012400
 8002678:	40012800 	.word	0x40012800
 800267c:	08002a6b 	.word	0x08002a6b
 8002680:	08002ae7 	.word	0x08002ae7
 8002684:	08002b03 	.word	0x08002b03

08002688 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_ADC_Stop_DMA+0x1a>
 800269e:	2302      	movs	r3, #2
 80026a0:	e039      	b.n	8002716 <HAL_ADC_Stop_DMA+0x8e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f99c 	bl	80029e8 <ADC_ConversionStop_Disable>
 80026b0:	4603      	mov	r3, r0
 80026b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d128      	bne.n	800270c <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026c8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d11a      	bne.n	800270c <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fc9f 	bl	800301e <HAL_DMA_Abort>
 80026e0:	4603      	mov	r3, r0
 80026e2:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
 80026fe:	e005      	b.n	800270c <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
	...

08002744 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x20>
 8002760:	2302      	movs	r3, #2
 8002762:	e0dc      	b.n	800291e <HAL_ADC_ConfigChannel+0x1da>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b06      	cmp	r3, #6
 8002772:	d81c      	bhi.n	80027ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	3b05      	subs	r3, #5
 8002786:	221f      	movs	r2, #31
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	4019      	ands	r1, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	3b05      	subs	r3, #5
 80027a0:	fa00 f203 	lsl.w	r2, r0, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34
 80027ac:	e03c      	b.n	8002828 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d81c      	bhi.n	80027f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	3b23      	subs	r3, #35	; 0x23
 80027c8:	221f      	movs	r2, #31
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	4019      	ands	r1, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b23      	subs	r3, #35	; 0x23
 80027e2:	fa00 f203 	lsl.w	r2, r0, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
 80027ee:	e01b      	b.n	8002828 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	3b41      	subs	r3, #65	; 0x41
 8002802:	221f      	movs	r2, #31
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	4019      	ands	r1, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3b41      	subs	r3, #65	; 0x41
 800281c:	fa00 f203 	lsl.w	r2, r0, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b09      	cmp	r3, #9
 800282e:	d91c      	bls.n	800286a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68d9      	ldr	r1, [r3, #12]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	3b1e      	subs	r3, #30
 8002842:	2207      	movs	r2, #7
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	4019      	ands	r1, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	6898      	ldr	r0, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	3b1e      	subs	r3, #30
 800285c:	fa00 f203 	lsl.w	r2, r0, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	60da      	str	r2, [r3, #12]
 8002868:	e019      	b.n	800289e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6919      	ldr	r1, [r3, #16]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	2207      	movs	r2, #7
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	4019      	ands	r1, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6898      	ldr	r0, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	fa00 f203 	lsl.w	r2, r0, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d003      	beq.n	80028ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028aa:	2b11      	cmp	r3, #17
 80028ac:	d132      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <HAL_ADC_ConfigChannel+0x1e4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d125      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d126      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80028d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d11a      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028de:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_ADC_ConfigChannel+0x1e8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a13      	ldr	r2, [pc, #76]	; (8002930 <HAL_ADC_ConfigChannel+0x1ec>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	0c9a      	lsrs	r2, r3, #18
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028f4:	e002      	b.n	80028fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f9      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x1b2>
 8002902:	e007      	b.n	8002914 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40012400 	.word	0x40012400
 800292c:	20000018 	.word	0x20000018
 8002930:	431bde83 	.word	0x431bde83

08002934 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d040      	beq.n	80029d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <ADC_Enable+0xac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <ADC_Enable+0xb0>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	0c9b      	lsrs	r3, r3, #18
 800296e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002970:	e002      	b.n	8002978 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3b01      	subs	r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f9      	bne.n	8002972 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800297e:	f7ff fca1 	bl	80022c4 <HAL_GetTick>
 8002982:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002984:	e01f      	b.n	80029c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002986:	f7ff fc9d 	bl	80022c4 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d918      	bls.n	80029c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d011      	beq.n	80029c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	f043 0210 	orr.w	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e007      	b.n	80029d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d1d8      	bne.n	8002986 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000018 	.word	0x20000018
 80029e4:	431bde83 	.word	0x431bde83

080029e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d12e      	bne.n	8002a60 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a12:	f7ff fc57 	bl	80022c4 <HAL_GetTick>
 8002a16:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a18:	e01b      	b.n	8002a52 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a1a:	f7ff fc53 	bl	80022c4 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d914      	bls.n	8002a52 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d10d      	bne.n	8002a52 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e007      	b.n	8002a62 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d0dc      	beq.n	8002a1a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d127      	bne.n	8002ad4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a9a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a9e:	d115      	bne.n	8002acc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d111      	bne.n	8002acc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7fe fdd1 	bl	8001674 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002ad2:	e004      	b.n	8002ade <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f7ff fe12 	bl	800271e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f043 0204 	orr.w	r2, r3, #4
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff fe01 	bl	8002730 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_ADCEx_Calibration_Start+0x1e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e095      	b.n	8002c82 <HAL_ADCEx_Calibration_Start+0x14a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ff42 	bl	80029e8 <ADC_ConversionStop_Disable>
 8002b64:	4603      	mov	r3, r0
 8002b66:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 8084 	bne.w	8002c78 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b78:	f023 0302 	bic.w	r3, r3, #2
 8002b7c:	f043 0202 	orr.w	r2, r3, #2
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002b84:	4b41      	ldr	r3, [pc, #260]	; (8002c8c <HAL_ADCEx_Calibration_Start+0x154>)
 8002b86:	681c      	ldr	r4, [r3, #0]
 8002b88:	2002      	movs	r0, #2
 8002b8a:	f001 ff67 	bl	8004a5c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002b94:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002b96:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002b98:	e002      	b.n	8002ba0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f9      	bne.n	8002b9a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fec4 	bl	8002934 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0208 	orr.w	r2, r2, #8
 8002bba:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002bbc:	f7ff fb82 	bl	80022c4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002bc2:	e01b      	b.n	8002bfc <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002bc4:	f7ff fb7e 	bl	80022c4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b0a      	cmp	r3, #10
 8002bd0:	d914      	bls.n	8002bfc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	f023 0312 	bic.w	r3, r3, #18
 8002be8:	f043 0210 	orr.w	r2, r3, #16
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e042      	b.n	8002c82 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1dc      	bne.n	8002bc4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0204 	orr.w	r2, r2, #4
 8002c18:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002c1a:	f7ff fb53 	bl	80022c4 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c20:	e01b      	b.n	8002c5a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c22:	f7ff fb4f 	bl	80022c4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b0a      	cmp	r3, #10
 8002c2e:	d914      	bls.n	8002c5a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f023 0312 	bic.w	r3, r3, #18
 8002c46:	f043 0210 	orr.w	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e013      	b.n	8002c82 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1dc      	bne.n	8002c22 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	f023 0303 	bic.w	r3, r3, #3
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd90      	pop	{r4, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000018 	.word	0x20000018

08002c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cac:	4013      	ands	r3, r2
 8002cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	60d3      	str	r3, [r2, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	0a1b      	lsrs	r3, r3, #8
 8002ce2:	f003 0307 	and.w	r3, r3, #7
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	db0b      	blt.n	8002d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	f003 021f 	and.w	r2, r3, #31
 8002d0c:	4906      	ldr	r1, [pc, #24]	; (8002d28 <__NVIC_EnableIRQ+0x34>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2001      	movs	r0, #1
 8002d16:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	e000e100 	.word	0xe000e100

08002d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	6039      	str	r1, [r7, #0]
 8002d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	db0a      	blt.n	8002d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	490c      	ldr	r1, [pc, #48]	; (8002d78 <__NVIC_SetPriority+0x4c>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d54:	e00a      	b.n	8002d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4908      	ldr	r1, [pc, #32]	; (8002d7c <__NVIC_SetPriority+0x50>)
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3b04      	subs	r3, #4
 8002d64:	0112      	lsls	r2, r2, #4
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	440b      	add	r3, r1
 8002d6a:	761a      	strb	r2, [r3, #24]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f1c3 0307 	rsb	r3, r3, #7
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	bf28      	it	cs
 8002d9e:	2304      	movcs	r3, #4
 8002da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d902      	bls.n	8002db0 <NVIC_EncodePriority+0x30>
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3b03      	subs	r3, #3
 8002dae:	e000      	b.n	8002db2 <NVIC_EncodePriority+0x32>
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	401a      	ands	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	43d9      	mvns	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	4313      	orrs	r3, r2
         );
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df4:	d301      	bcc.n	8002dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00f      	b.n	8002e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dfa:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <SysTick_Config+0x40>)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e02:	210f      	movs	r1, #15
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295
 8002e08:	f7ff ff90 	bl	8002d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <SysTick_Config+0x40>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e12:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <SysTick_Config+0x40>)
 8002e14:	2207      	movs	r2, #7
 8002e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	e000e010 	.word	0xe000e010

08002e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ff2d 	bl	8002c90 <__NVIC_SetPriorityGrouping>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b086      	sub	sp, #24
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	4603      	mov	r3, r0
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e50:	f7ff ff42 	bl	8002cd8 <__NVIC_GetPriorityGrouping>
 8002e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	6978      	ldr	r0, [r7, #20]
 8002e5c:	f7ff ff90 	bl	8002d80 <NVIC_EncodePriority>
 8002e60:	4602      	mov	r2, r0
 8002e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff5f 	bl	8002d2c <__NVIC_SetPriority>
}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff35 	bl	8002cf4 <__NVIC_EnableIRQ>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ffa2 	bl	8002de4 <SysTick_Config>
 8002ea0:	4603      	mov	r3, r0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e043      	b.n	8002f4a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <HAL_DMA_Init+0xa8>)
 8002eca:	4413      	add	r3, r2
 8002ecc:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_DMA_Init+0xac>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	009a      	lsls	r2, r3, #2
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_DMA_Init+0xb0>)
 8002ede:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ef6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002efa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	bffdfff8 	.word	0xbffdfff8
 8002f58:	cccccccd 	.word	0xcccccccd
 8002f5c:	40020000 	.word	0x40020000

08002f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_DMA_Start_IT+0x20>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e04a      	b.n	8003016 <HAL_DMA_Start_IT+0xb6>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d13a      	bne.n	8003008 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2202      	movs	r2, #2
 8002f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f972 	bl	80032a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 020e 	orr.w	r2, r2, #14
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e00f      	b.n	8002ff6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0204 	bic.w	r2, r2, #4
 8002fe4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 020a 	orr.w	r2, r2, #10
 8002ff4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e005      	b.n	8003014 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003010:	2302      	movs	r3, #2
 8003012:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003014:	7dfb      	ldrb	r3, [r7, #23]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003030:	2b02      	cmp	r3, #2
 8003032:	d008      	beq.n	8003046 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2204      	movs	r2, #4
 8003038:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e020      	b.n	8003088 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 020e 	bic.w	r2, r2, #14
 8003054:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0201 	bic.w	r2, r2, #1
 8003064:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f202 	lsl.w	r2, r1, r2
 8003074:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003086:	7bfb      	ldrb	r3, [r7, #15]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
	...

08003094 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	2204      	movs	r2, #4
 80030b2:	409a      	lsls	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d04f      	beq.n	800315c <HAL_DMA_IRQHandler+0xc8>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d04a      	beq.n	800315c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d107      	bne.n	80030e4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0204 	bic.w	r2, r2, #4
 80030e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a66      	ldr	r2, [pc, #408]	; (8003284 <HAL_DMA_IRQHandler+0x1f0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d029      	beq.n	8003142 <HAL_DMA_IRQHandler+0xae>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a65      	ldr	r2, [pc, #404]	; (8003288 <HAL_DMA_IRQHandler+0x1f4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d022      	beq.n	800313e <HAL_DMA_IRQHandler+0xaa>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a63      	ldr	r2, [pc, #396]	; (800328c <HAL_DMA_IRQHandler+0x1f8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01a      	beq.n	8003138 <HAL_DMA_IRQHandler+0xa4>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a62      	ldr	r2, [pc, #392]	; (8003290 <HAL_DMA_IRQHandler+0x1fc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d012      	beq.n	8003132 <HAL_DMA_IRQHandler+0x9e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a60      	ldr	r2, [pc, #384]	; (8003294 <HAL_DMA_IRQHandler+0x200>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00a      	beq.n	800312c <HAL_DMA_IRQHandler+0x98>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a5f      	ldr	r2, [pc, #380]	; (8003298 <HAL_DMA_IRQHandler+0x204>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d102      	bne.n	8003126 <HAL_DMA_IRQHandler+0x92>
 8003120:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003124:	e00e      	b.n	8003144 <HAL_DMA_IRQHandler+0xb0>
 8003126:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800312a:	e00b      	b.n	8003144 <HAL_DMA_IRQHandler+0xb0>
 800312c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003130:	e008      	b.n	8003144 <HAL_DMA_IRQHandler+0xb0>
 8003132:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003136:	e005      	b.n	8003144 <HAL_DMA_IRQHandler+0xb0>
 8003138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800313c:	e002      	b.n	8003144 <HAL_DMA_IRQHandler+0xb0>
 800313e:	2340      	movs	r3, #64	; 0x40
 8003140:	e000      	b.n	8003144 <HAL_DMA_IRQHandler+0xb0>
 8003142:	2304      	movs	r3, #4
 8003144:	4a55      	ldr	r2, [pc, #340]	; (800329c <HAL_DMA_IRQHandler+0x208>)
 8003146:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8094 	beq.w	800327a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800315a:	e08e      	b.n	800327a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	2202      	movs	r2, #2
 8003162:	409a      	lsls	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d056      	beq.n	800321a <HAL_DMA_IRQHandler+0x186>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d051      	beq.n	800321a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 020a 	bic.w	r2, r2, #10
 8003192:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a38      	ldr	r2, [pc, #224]	; (8003284 <HAL_DMA_IRQHandler+0x1f0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d029      	beq.n	80031fa <HAL_DMA_IRQHandler+0x166>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a37      	ldr	r2, [pc, #220]	; (8003288 <HAL_DMA_IRQHandler+0x1f4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x162>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a35      	ldr	r2, [pc, #212]	; (800328c <HAL_DMA_IRQHandler+0x1f8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01a      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x15c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a34      	ldr	r2, [pc, #208]	; (8003290 <HAL_DMA_IRQHandler+0x1fc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d012      	beq.n	80031ea <HAL_DMA_IRQHandler+0x156>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a32      	ldr	r2, [pc, #200]	; (8003294 <HAL_DMA_IRQHandler+0x200>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00a      	beq.n	80031e4 <HAL_DMA_IRQHandler+0x150>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a31      	ldr	r2, [pc, #196]	; (8003298 <HAL_DMA_IRQHandler+0x204>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d102      	bne.n	80031de <HAL_DMA_IRQHandler+0x14a>
 80031d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031dc:	e00e      	b.n	80031fc <HAL_DMA_IRQHandler+0x168>
 80031de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e2:	e00b      	b.n	80031fc <HAL_DMA_IRQHandler+0x168>
 80031e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031e8:	e008      	b.n	80031fc <HAL_DMA_IRQHandler+0x168>
 80031ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031ee:	e005      	b.n	80031fc <HAL_DMA_IRQHandler+0x168>
 80031f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031f4:	e002      	b.n	80031fc <HAL_DMA_IRQHandler+0x168>
 80031f6:	2320      	movs	r3, #32
 80031f8:	e000      	b.n	80031fc <HAL_DMA_IRQHandler+0x168>
 80031fa:	2302      	movs	r3, #2
 80031fc:	4a27      	ldr	r2, [pc, #156]	; (800329c <HAL_DMA_IRQHandler+0x208>)
 80031fe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	2b00      	cmp	r3, #0
 800320e:	d034      	beq.n	800327a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003218:	e02f      	b.n	800327a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2208      	movs	r2, #8
 8003220:	409a      	lsls	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d028      	beq.n	800327c <HAL_DMA_IRQHandler+0x1e8>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b00      	cmp	r3, #0
 8003232:	d023      	beq.n	800327c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 020e 	bic.w	r2, r2, #14
 8003242:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	2101      	movs	r1, #1
 800324e:	fa01 f202 	lsl.w	r2, r1, r2
 8003252:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	2b00      	cmp	r3, #0
 8003270:	d004      	beq.n	800327c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
    }
  }
  return;
 800327a:	bf00      	nop
 800327c:	bf00      	nop
}
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40020008 	.word	0x40020008
 8003288:	4002001c 	.word	0x4002001c
 800328c:	40020030 	.word	0x40020030
 8003290:	40020044 	.word	0x40020044
 8003294:	40020058 	.word	0x40020058
 8003298:	4002006c 	.word	0x4002006c
 800329c:	40020000 	.word	0x40020000

080032a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f202 	lsl.w	r2, r1, r2
 80032bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d108      	bne.n	80032e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032de:	e007      	b.n	80032f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b08b      	sub	sp, #44	; 0x2c
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003306:	2300      	movs	r3, #0
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800330a:	2300      	movs	r3, #0
 800330c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330e:	e127      	b.n	8003560 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003310:	2201      	movs	r2, #1
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	429a      	cmp	r2, r3
 800332a:	f040 8116 	bne.w	800355a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b12      	cmp	r3, #18
 8003334:	d034      	beq.n	80033a0 <HAL_GPIO_Init+0xa4>
 8003336:	2b12      	cmp	r3, #18
 8003338:	d80d      	bhi.n	8003356 <HAL_GPIO_Init+0x5a>
 800333a:	2b02      	cmp	r3, #2
 800333c:	d02b      	beq.n	8003396 <HAL_GPIO_Init+0x9a>
 800333e:	2b02      	cmp	r3, #2
 8003340:	d804      	bhi.n	800334c <HAL_GPIO_Init+0x50>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d031      	beq.n	80033aa <HAL_GPIO_Init+0xae>
 8003346:	2b01      	cmp	r3, #1
 8003348:	d01c      	beq.n	8003384 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800334a:	e048      	b.n	80033de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800334c:	2b03      	cmp	r3, #3
 800334e:	d043      	beq.n	80033d8 <HAL_GPIO_Init+0xdc>
 8003350:	2b11      	cmp	r3, #17
 8003352:	d01b      	beq.n	800338c <HAL_GPIO_Init+0x90>
          break;
 8003354:	e043      	b.n	80033de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003356:	4a89      	ldr	r2, [pc, #548]	; (800357c <HAL_GPIO_Init+0x280>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d026      	beq.n	80033aa <HAL_GPIO_Init+0xae>
 800335c:	4a87      	ldr	r2, [pc, #540]	; (800357c <HAL_GPIO_Init+0x280>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d806      	bhi.n	8003370 <HAL_GPIO_Init+0x74>
 8003362:	4a87      	ldr	r2, [pc, #540]	; (8003580 <HAL_GPIO_Init+0x284>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d020      	beq.n	80033aa <HAL_GPIO_Init+0xae>
 8003368:	4a86      	ldr	r2, [pc, #536]	; (8003584 <HAL_GPIO_Init+0x288>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d01d      	beq.n	80033aa <HAL_GPIO_Init+0xae>
          break;
 800336e:	e036      	b.n	80033de <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003370:	4a85      	ldr	r2, [pc, #532]	; (8003588 <HAL_GPIO_Init+0x28c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d019      	beq.n	80033aa <HAL_GPIO_Init+0xae>
 8003376:	4a85      	ldr	r2, [pc, #532]	; (800358c <HAL_GPIO_Init+0x290>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d016      	beq.n	80033aa <HAL_GPIO_Init+0xae>
 800337c:	4a84      	ldr	r2, [pc, #528]	; (8003590 <HAL_GPIO_Init+0x294>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <HAL_GPIO_Init+0xae>
          break;
 8003382:	e02c      	b.n	80033de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	623b      	str	r3, [r7, #32]
          break;
 800338a:	e028      	b.n	80033de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	3304      	adds	r3, #4
 8003392:	623b      	str	r3, [r7, #32]
          break;
 8003394:	e023      	b.n	80033de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	3308      	adds	r3, #8
 800339c:	623b      	str	r3, [r7, #32]
          break;
 800339e:	e01e      	b.n	80033de <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	330c      	adds	r3, #12
 80033a6:	623b      	str	r3, [r7, #32]
          break;
 80033a8:	e019      	b.n	80033de <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033b2:	2304      	movs	r3, #4
 80033b4:	623b      	str	r3, [r7, #32]
          break;
 80033b6:	e012      	b.n	80033de <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d105      	bne.n	80033cc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033c0:	2308      	movs	r3, #8
 80033c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	611a      	str	r2, [r3, #16]
          break;
 80033ca:	e008      	b.n	80033de <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033cc:	2308      	movs	r3, #8
 80033ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	615a      	str	r2, [r3, #20]
          break;
 80033d6:	e002      	b.n	80033de <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033d8:	2300      	movs	r3, #0
 80033da:	623b      	str	r3, [r7, #32]
          break;
 80033dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2bff      	cmp	r3, #255	; 0xff
 80033e2:	d801      	bhi.n	80033e8 <HAL_GPIO_Init+0xec>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	e001      	b.n	80033ec <HAL_GPIO_Init+0xf0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3304      	adds	r3, #4
 80033ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2bff      	cmp	r3, #255	; 0xff
 80033f2:	d802      	bhi.n	80033fa <HAL_GPIO_Init+0xfe>
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	e002      	b.n	8003400 <HAL_GPIO_Init+0x104>
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	3b08      	subs	r3, #8
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	210f      	movs	r1, #15
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	401a      	ands	r2, r3
 8003412:	6a39      	ldr	r1, [r7, #32]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	431a      	orrs	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8096 	beq.w	800355a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800342e:	4b59      	ldr	r3, [pc, #356]	; (8003594 <HAL_GPIO_Init+0x298>)
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	4a58      	ldr	r2, [pc, #352]	; (8003594 <HAL_GPIO_Init+0x298>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6193      	str	r3, [r2, #24]
 800343a:	4b56      	ldr	r3, [pc, #344]	; (8003594 <HAL_GPIO_Init+0x298>)
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003446:	4a54      	ldr	r2, [pc, #336]	; (8003598 <HAL_GPIO_Init+0x29c>)
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	3302      	adds	r3, #2
 800344e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003452:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	220f      	movs	r2, #15
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4013      	ands	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a4b      	ldr	r2, [pc, #300]	; (800359c <HAL_GPIO_Init+0x2a0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_GPIO_Init+0x19e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a4a      	ldr	r2, [pc, #296]	; (80035a0 <HAL_GPIO_Init+0x2a4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00d      	beq.n	8003496 <HAL_GPIO_Init+0x19a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a49      	ldr	r2, [pc, #292]	; (80035a4 <HAL_GPIO_Init+0x2a8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <HAL_GPIO_Init+0x196>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a48      	ldr	r2, [pc, #288]	; (80035a8 <HAL_GPIO_Init+0x2ac>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_GPIO_Init+0x192>
 800348a:	2303      	movs	r3, #3
 800348c:	e006      	b.n	800349c <HAL_GPIO_Init+0x1a0>
 800348e:	2304      	movs	r3, #4
 8003490:	e004      	b.n	800349c <HAL_GPIO_Init+0x1a0>
 8003492:	2302      	movs	r3, #2
 8003494:	e002      	b.n	800349c <HAL_GPIO_Init+0x1a0>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_GPIO_Init+0x1a0>
 800349a:	2300      	movs	r3, #0
 800349c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349e:	f002 0203 	and.w	r2, r2, #3
 80034a2:	0092      	lsls	r2, r2, #2
 80034a4:	4093      	lsls	r3, r2
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034ac:	493a      	ldr	r1, [pc, #232]	; (8003598 <HAL_GPIO_Init+0x29c>)
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	3302      	adds	r3, #2
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d006      	beq.n	80034d4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034c6:	4b39      	ldr	r3, [pc, #228]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	4938      	ldr	r1, [pc, #224]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
 80034d2:	e006      	b.n	80034e2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034d4:	4b35      	ldr	r3, [pc, #212]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	43db      	mvns	r3, r3
 80034dc:	4933      	ldr	r1, [pc, #204]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 80034de:	4013      	ands	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d006      	beq.n	80034fc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034ee:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	492e      	ldr	r1, [pc, #184]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	604b      	str	r3, [r1, #4]
 80034fa:	e006      	b.n	800350a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034fc:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	43db      	mvns	r3, r3
 8003504:	4929      	ldr	r1, [pc, #164]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 8003506:	4013      	ands	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003516:	4b25      	ldr	r3, [pc, #148]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	4924      	ldr	r1, [pc, #144]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
 8003522:	e006      	b.n	8003532 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003524:	4b21      	ldr	r3, [pc, #132]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	43db      	mvns	r3, r3
 800352c:	491f      	ldr	r1, [pc, #124]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 800352e:	4013      	ands	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	491a      	ldr	r1, [pc, #104]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	60cb      	str	r3, [r1, #12]
 800354a:	e006      	b.n	800355a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800354c:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	43db      	mvns	r3, r3
 8003554:	4915      	ldr	r1, [pc, #84]	; (80035ac <HAL_GPIO_Init+0x2b0>)
 8003556:	4013      	ands	r3, r2
 8003558:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	3301      	adds	r3, #1
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	f47f aed0 	bne.w	8003310 <HAL_GPIO_Init+0x14>
  }
}
 8003570:	bf00      	nop
 8003572:	372c      	adds	r7, #44	; 0x2c
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	10210000 	.word	0x10210000
 8003580:	10110000 	.word	0x10110000
 8003584:	10120000 	.word	0x10120000
 8003588:	10310000 	.word	0x10310000
 800358c:	10320000 	.word	0x10320000
 8003590:	10220000 	.word	0x10220000
 8003594:	40021000 	.word	0x40021000
 8003598:	40010000 	.word	0x40010000
 800359c:	40010800 	.word	0x40010800
 80035a0:	40010c00 	.word	0x40010c00
 80035a4:	40011000 	.word	0x40011000
 80035a8:	40011400 	.word	0x40011400
 80035ac:	40010400 	.word	0x40010400

080035b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
 80035bc:	4613      	mov	r3, r2
 80035be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035c0:	787b      	ldrb	r3, [r7, #1]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035cc:	e003      	b.n	80035d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035ce:	887b      	ldrh	r3, [r7, #2]
 80035d0:	041a      	lsls	r2, r3, #16
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	611a      	str	r2, [r3, #16]
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e11f      	b.n	8003832 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fe fd3a 	bl	8002080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2224      	movs	r2, #36	; 0x24
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003644:	f001 f90e 	bl	8004864 <HAL_RCC_GetPCLK1Freq>
 8003648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4a7b      	ldr	r2, [pc, #492]	; (800383c <HAL_I2C_Init+0x25c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d807      	bhi.n	8003664 <HAL_I2C_Init+0x84>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a7a      	ldr	r2, [pc, #488]	; (8003840 <HAL_I2C_Init+0x260>)
 8003658:	4293      	cmp	r3, r2
 800365a:	bf94      	ite	ls
 800365c:	2301      	movls	r3, #1
 800365e:	2300      	movhi	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e006      	b.n	8003672 <HAL_I2C_Init+0x92>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4a77      	ldr	r2, [pc, #476]	; (8003844 <HAL_I2C_Init+0x264>)
 8003668:	4293      	cmp	r3, r2
 800366a:	bf94      	ite	ls
 800366c:	2301      	movls	r3, #1
 800366e:	2300      	movhi	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e0db      	b.n	8003832 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a72      	ldr	r2, [pc, #456]	; (8003848 <HAL_I2C_Init+0x268>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	0c9b      	lsrs	r3, r3, #18
 8003684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a64      	ldr	r2, [pc, #400]	; (800383c <HAL_I2C_Init+0x25c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d802      	bhi.n	80036b4 <HAL_I2C_Init+0xd4>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3301      	adds	r3, #1
 80036b2:	e009      	b.n	80036c8 <HAL_I2C_Init+0xe8>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	4a63      	ldr	r2, [pc, #396]	; (800384c <HAL_I2C_Init+0x26c>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	3301      	adds	r3, #1
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4956      	ldr	r1, [pc, #344]	; (800383c <HAL_I2C_Init+0x25c>)
 80036e4:	428b      	cmp	r3, r1
 80036e6:	d80d      	bhi.n	8003704 <HAL_I2C_Init+0x124>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1e59      	subs	r1, r3, #1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	bf38      	it	cc
 8003700:	2304      	movcc	r3, #4
 8003702:	e04f      	b.n	80037a4 <HAL_I2C_Init+0x1c4>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d111      	bne.n	8003730 <HAL_I2C_Init+0x150>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	1e58      	subs	r0, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6859      	ldr	r1, [r3, #4]
 8003714:	460b      	mov	r3, r1
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	440b      	add	r3, r1
 800371a:	fbb0 f3f3 	udiv	r3, r0, r3
 800371e:	3301      	adds	r3, #1
 8003720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf0c      	ite	eq
 8003728:	2301      	moveq	r3, #1
 800372a:	2300      	movne	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	e012      	b.n	8003756 <HAL_I2C_Init+0x176>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1e58      	subs	r0, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6859      	ldr	r1, [r3, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	0099      	lsls	r1, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	fbb0 f3f3 	udiv	r3, r0, r3
 8003746:	3301      	adds	r3, #1
 8003748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Init+0x17e>
 800375a:	2301      	movs	r3, #1
 800375c:	e022      	b.n	80037a4 <HAL_I2C_Init+0x1c4>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10e      	bne.n	8003784 <HAL_I2C_Init+0x1a4>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1e58      	subs	r0, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6859      	ldr	r1, [r3, #4]
 800376e:	460b      	mov	r3, r1
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	440b      	add	r3, r1
 8003774:	fbb0 f3f3 	udiv	r3, r0, r3
 8003778:	3301      	adds	r3, #1
 800377a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003782:	e00f      	b.n	80037a4 <HAL_I2C_Init+0x1c4>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e58      	subs	r0, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	0099      	lsls	r1, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	fbb0 f3f3 	udiv	r3, r0, r3
 800379a:	3301      	adds	r3, #1
 800379c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	6809      	ldr	r1, [r1, #0]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69da      	ldr	r2, [r3, #28]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6911      	ldr	r1, [r2, #16]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68d2      	ldr	r2, [r2, #12]
 80037de:	4311      	orrs	r1, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695a      	ldr	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	430a      	orrs	r2, r1
 8003802:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	000186a0 	.word	0x000186a0
 8003840:	001e847f 	.word	0x001e847f
 8003844:	003d08ff 	.word	0x003d08ff
 8003848:	431bde83 	.word	0x431bde83
 800384c:	10624dd3 	.word	0x10624dd3

08003850 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	461a      	mov	r2, r3
 800385c:	460b      	mov	r3, r1
 800385e:	817b      	strh	r3, [r7, #10]
 8003860:	4613      	mov	r3, r2
 8003862:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003864:	f7fe fd2e 	bl	80022c4 <HAL_GetTick>
 8003868:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	f040 80e0 	bne.w	8003a38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2319      	movs	r3, #25
 800387e:	2201      	movs	r2, #1
 8003880:	4970      	ldr	r1, [pc, #448]	; (8003a44 <HAL_I2C_Master_Transmit+0x1f4>)
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fa92 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800388e:	2302      	movs	r3, #2
 8003890:	e0d3      	b.n	8003a3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_I2C_Master_Transmit+0x50>
 800389c:	2302      	movs	r3, #2
 800389e:	e0cc      	b.n	8003a3a <HAL_I2C_Master_Transmit+0x1ea>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d007      	beq.n	80038c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0201 	orr.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2221      	movs	r2, #33	; 0x21
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2210      	movs	r2, #16
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	893a      	ldrh	r2, [r7, #8]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a50      	ldr	r2, [pc, #320]	; (8003a48 <HAL_I2C_Master_Transmit+0x1f8>)
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003908:	8979      	ldrh	r1, [r7, #10]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f9ca 	bl	8003ca8 <I2C_MasterRequestWrite>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e08d      	b.n	8003a3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391e:	2300      	movs	r3, #0
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003934:	e066      	b.n	8003a04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	6a39      	ldr	r1, [r7, #32]
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fb0c 	bl	8003f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00d      	beq.n	8003962 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2b04      	cmp	r3, #4
 800394c:	d107      	bne.n	800395e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e06b      	b.n	8003a3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	781a      	ldrb	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b04      	cmp	r3, #4
 800399e:	d11b      	bne.n	80039d8 <HAL_I2C_Master_Transmit+0x188>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d017      	beq.n	80039d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	781a      	ldrb	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	6a39      	ldr	r1, [r7, #32]
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fafc 	bl	8003fda <I2C_WaitOnBTFFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d107      	bne.n	8003a00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e01a      	b.n	8003a3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d194      	bne.n	8003936 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	00100002 	.word	0x00100002
 8003a48:	ffff0000 	.word	0xffff0000

08003a4c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a5c:	f7fe fc32 	bl	80022c4 <HAL_GetTick>
 8003a60:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003a62:	2301      	movs	r3, #1
 8003a64:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	f040 8111 	bne.w	8003c96 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2319      	movs	r3, #25
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4988      	ldr	r1, [pc, #544]	; (8003ca0 <HAL_I2C_IsDeviceReady+0x254>)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f994 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e104      	b.n	8003c98 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_I2C_IsDeviceReady+0x50>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e0fd      	b.n	8003c98 <HAL_I2C_IsDeviceReady+0x24c>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d007      	beq.n	8003ac2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2224      	movs	r2, #36	; 0x24
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a70      	ldr	r2, [pc, #448]	; (8003ca4 <HAL_I2C_IsDeviceReady+0x258>)
 8003ae4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f952 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1c:	d103      	bne.n	8003b26 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e0b6      	b.n	8003c98 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b38:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7fe fbc3 	bl	80022c4 <HAL_GetTick>
 8003b3e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	bf0c      	ite	eq
 8003b4e:	2301      	moveq	r3, #1
 8003b50:	2300      	movne	r3, #0
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b64:	bf0c      	ite	eq
 8003b66:	2301      	moveq	r3, #1
 8003b68:	2300      	movne	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b6e:	e025      	b.n	8003bbc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b70:	f7fe fba8 	bl	80022c4 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <HAL_I2C_IsDeviceReady+0x13a>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d103      	bne.n	8003b8e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	22a0      	movs	r2, #160	; 0xa0
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb2:	bf0c      	ite	eq
 8003bb4:	2301      	moveq	r3, #1
 8003bb6:	2300      	movne	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2ba0      	cmp	r3, #160	; 0xa0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_I2C_IsDeviceReady+0x188>
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <HAL_I2C_IsDeviceReady+0x188>
 8003bce:	7dbb      	ldrb	r3, [r7, #22]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0cd      	beq.n	8003b70 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d129      	bne.n	8003c3e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2319      	movs	r3, #25
 8003c16:	2201      	movs	r2, #1
 8003c18:	4921      	ldr	r1, [pc, #132]	; (8003ca0 <HAL_I2C_IsDeviceReady+0x254>)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f8c6 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e036      	b.n	8003c98 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	e02c      	b.n	8003c98 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2319      	movs	r3, #25
 8003c5e:	2201      	movs	r2, #1
 8003c60:	490f      	ldr	r1, [pc, #60]	; (8003ca0 <HAL_I2C_IsDeviceReady+0x254>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f8a2 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e012      	b.n	8003c98 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	3301      	adds	r3, #1
 8003c76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	f4ff af32 	bcc.w	8003ae6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c96:	2302      	movs	r3, #2
  }
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	00100002 	.word	0x00100002
 8003ca4:	ffff0000 	.word	0xffff0000

08003ca8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d006      	beq.n	8003cd2 <I2C_MasterRequestWrite+0x2a>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d003      	beq.n	8003cd2 <I2C_MasterRequestWrite+0x2a>
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd0:	d108      	bne.n	8003ce4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e00b      	b.n	8003cfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	2b12      	cmp	r3, #18
 8003cea:	d107      	bne.n	8003cfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f84f 	bl	8003dac <I2C_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d22:	d103      	bne.n	8003d2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e035      	b.n	8003d9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d38:	d108      	bne.n	8003d4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d3a:	897b      	ldrh	r3, [r7, #10]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d48:	611a      	str	r2, [r3, #16]
 8003d4a:	e01b      	b.n	8003d84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d4c:	897b      	ldrh	r3, [r7, #10]
 8003d4e:	11db      	asrs	r3, r3, #7
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f003 0306 	and.w	r3, r3, #6
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f063 030f 	orn	r3, r3, #15
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	490e      	ldr	r1, [pc, #56]	; (8003da4 <I2C_MasterRequestWrite+0xfc>)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f875 	bl	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e010      	b.n	8003d9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d7a:	897b      	ldrh	r3, [r7, #10]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4907      	ldr	r1, [pc, #28]	; (8003da8 <I2C_MasterRequestWrite+0x100>)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f865 	bl	8003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	00010008 	.word	0x00010008
 8003da8:	00010002 	.word	0x00010002

08003dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dbc:	e025      	b.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d021      	beq.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc6:	f7fe fa7d 	bl	80022c4 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d302      	bcc.n	8003ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d116      	bne.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f043 0220 	orr.w	r2, r3, #32
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e023      	b.n	8003e52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d10d      	bne.n	8003e30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	43da      	mvns	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bf0c      	ite	eq
 8003e26:	2301      	moveq	r3, #1
 8003e28:	2300      	movne	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	e00c      	b.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	43da      	mvns	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d0b6      	beq.n	8003dbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e68:	e051      	b.n	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e78:	d123      	bne.n	8003ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f043 0204 	orr.w	r2, r3, #4
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e046      	b.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d021      	beq.n	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eca:	f7fe f9fb 	bl	80022c4 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d302      	bcc.n	8003ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d116      	bne.n	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f043 0220 	orr.w	r2, r3, #32
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e020      	b.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	0c1b      	lsrs	r3, r3, #16
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d10c      	bne.n	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4013      	ands	r3, r2
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bf14      	ite	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	2300      	moveq	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	e00b      	b.n	8003f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	43da      	mvns	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d18d      	bne.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f64:	e02d      	b.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f878 	bl	800405c <I2C_IsAcknowledgeFailed>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e02d      	b.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d021      	beq.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7e:	f7fe f9a1 	bl	80022c4 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d302      	bcc.n	8003f94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d116      	bne.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f043 0220 	orr.w	r2, r3, #32
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e007      	b.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d1ca      	bne.n	8003f66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fe6:	e02d      	b.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f837 	bl	800405c <I2C_IsAcknowledgeFailed>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e02d      	b.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d021      	beq.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004000:	f7fe f960 	bl	80022c4 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	d302      	bcc.n	8004016 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d116      	bne.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f043 0220 	orr.w	r2, r3, #32
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e007      	b.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b04      	cmp	r3, #4
 8004050:	d1ca      	bne.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004072:	d11b      	bne.n	80040ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800407c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	f043 0204 	orr.w	r2, r3, #4
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bc80      	pop	{r7}
 80040b6:	4770      	bx	lr

080040b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e26c      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8087 	beq.w	80041e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040d8:	4b92      	ldr	r3, [pc, #584]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 030c 	and.w	r3, r3, #12
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d00c      	beq.n	80040fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040e4:	4b8f      	ldr	r3, [pc, #572]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d112      	bne.n	8004116 <HAL_RCC_OscConfig+0x5e>
 80040f0:	4b8c      	ldr	r3, [pc, #560]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fc:	d10b      	bne.n	8004116 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fe:	4b89      	ldr	r3, [pc, #548]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d06c      	beq.n	80041e4 <HAL_RCC_OscConfig+0x12c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d168      	bne.n	80041e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e246      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411e:	d106      	bne.n	800412e <HAL_RCC_OscConfig+0x76>
 8004120:	4b80      	ldr	r3, [pc, #512]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a7f      	ldr	r2, [pc, #508]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	e02e      	b.n	800418c <HAL_RCC_OscConfig+0xd4>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10c      	bne.n	8004150 <HAL_RCC_OscConfig+0x98>
 8004136:	4b7b      	ldr	r3, [pc, #492]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a7a      	ldr	r2, [pc, #488]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 800413c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	4b78      	ldr	r3, [pc, #480]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a77      	ldr	r2, [pc, #476]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004148:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e01d      	b.n	800418c <HAL_RCC_OscConfig+0xd4>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004158:	d10c      	bne.n	8004174 <HAL_RCC_OscConfig+0xbc>
 800415a:	4b72      	ldr	r3, [pc, #456]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a71      	ldr	r2, [pc, #452]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4b6f      	ldr	r3, [pc, #444]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a6e      	ldr	r2, [pc, #440]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e00b      	b.n	800418c <HAL_RCC_OscConfig+0xd4>
 8004174:	4b6b      	ldr	r3, [pc, #428]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a6a      	ldr	r2, [pc, #424]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 800417a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b68      	ldr	r3, [pc, #416]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a67      	ldr	r2, [pc, #412]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d013      	beq.n	80041bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fe f896 	bl	80022c4 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800419c:	f7fe f892 	bl	80022c4 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e1fa      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	4b5d      	ldr	r3, [pc, #372]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0xe4>
 80041ba:	e014      	b.n	80041e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fe f882 	bl	80022c4 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fe f87e 	bl	80022c4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1e6      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d6:	4b53      	ldr	r3, [pc, #332]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x10c>
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d063      	beq.n	80042ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041f2:	4b4c      	ldr	r3, [pc, #304]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041fe:	4b49      	ldr	r3, [pc, #292]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b08      	cmp	r3, #8
 8004208:	d11c      	bne.n	8004244 <HAL_RCC_OscConfig+0x18c>
 800420a:	4b46      	ldr	r3, [pc, #280]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d116      	bne.n	8004244 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004216:	4b43      	ldr	r3, [pc, #268]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RCC_OscConfig+0x176>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e1ba      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422e:	4b3d      	ldr	r3, [pc, #244]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4939      	ldr	r1, [pc, #228]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	e03a      	b.n	80042ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d020      	beq.n	800428e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800424c:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_RCC_OscConfig+0x270>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004252:	f7fe f837 	bl	80022c4 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800425a:	f7fe f833 	bl	80022c4 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e19b      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426c:	4b2d      	ldr	r3, [pc, #180]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004278:	4b2a      	ldr	r3, [pc, #168]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4927      	ldr	r1, [pc, #156]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
 800428c:	e015      	b.n	80042ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428e:	4b26      	ldr	r3, [pc, #152]	; (8004328 <HAL_RCC_OscConfig+0x270>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004294:	f7fe f816 	bl	80022c4 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429c:	f7fe f812 	bl	80022c4 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e17a      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d03a      	beq.n	800433c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d019      	beq.n	8004302 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ce:	4b17      	ldr	r3, [pc, #92]	; (800432c <HAL_RCC_OscConfig+0x274>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d4:	f7fd fff6 	bl	80022c4 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042dc:	f7fd fff2 	bl	80022c4 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e15a      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ee:	4b0d      	ldr	r3, [pc, #52]	; (8004324 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042fa:	2001      	movs	r0, #1
 80042fc:	f000 fada 	bl	80048b4 <RCC_Delay>
 8004300:	e01c      	b.n	800433c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004302:	4b0a      	ldr	r3, [pc, #40]	; (800432c <HAL_RCC_OscConfig+0x274>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004308:	f7fd ffdc 	bl	80022c4 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800430e:	e00f      	b.n	8004330 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004310:	f7fd ffd8 	bl	80022c4 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d908      	bls.n	8004330 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e140      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
 8004328:	42420000 	.word	0x42420000
 800432c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004330:	4b9e      	ldr	r3, [pc, #632]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e9      	bne.n	8004310 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80a6 	beq.w	8004496 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800434a:	2300      	movs	r3, #0
 800434c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800434e:	4b97      	ldr	r3, [pc, #604]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10d      	bne.n	8004376 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800435a:	4b94      	ldr	r3, [pc, #592]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	4a93      	ldr	r2, [pc, #588]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004364:	61d3      	str	r3, [r2, #28]
 8004366:	4b91      	ldr	r3, [pc, #580]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004372:	2301      	movs	r3, #1
 8004374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004376:	4b8e      	ldr	r3, [pc, #568]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d118      	bne.n	80043b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004382:	4b8b      	ldr	r3, [pc, #556]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a8a      	ldr	r2, [pc, #552]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 8004388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438e:	f7fd ff99 	bl	80022c4 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004396:	f7fd ff95 	bl	80022c4 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b64      	cmp	r3, #100	; 0x64
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e0fd      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a8:	4b81      	ldr	r3, [pc, #516]	; (80045b0 <HAL_RCC_OscConfig+0x4f8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d106      	bne.n	80043ca <HAL_RCC_OscConfig+0x312>
 80043bc:	4b7b      	ldr	r3, [pc, #492]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	4a7a      	ldr	r2, [pc, #488]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	6213      	str	r3, [r2, #32]
 80043c8:	e02d      	b.n	8004426 <HAL_RCC_OscConfig+0x36e>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10c      	bne.n	80043ec <HAL_RCC_OscConfig+0x334>
 80043d2:	4b76      	ldr	r3, [pc, #472]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	4a75      	ldr	r2, [pc, #468]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	6213      	str	r3, [r2, #32]
 80043de:	4b73      	ldr	r3, [pc, #460]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	4a72      	ldr	r2, [pc, #456]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80043e4:	f023 0304 	bic.w	r3, r3, #4
 80043e8:	6213      	str	r3, [r2, #32]
 80043ea:	e01c      	b.n	8004426 <HAL_RCC_OscConfig+0x36e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b05      	cmp	r3, #5
 80043f2:	d10c      	bne.n	800440e <HAL_RCC_OscConfig+0x356>
 80043f4:	4b6d      	ldr	r3, [pc, #436]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	4a6c      	ldr	r2, [pc, #432]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80043fa:	f043 0304 	orr.w	r3, r3, #4
 80043fe:	6213      	str	r3, [r2, #32]
 8004400:	4b6a      	ldr	r3, [pc, #424]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	4a69      	ldr	r2, [pc, #420]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	6213      	str	r3, [r2, #32]
 800440c:	e00b      	b.n	8004426 <HAL_RCC_OscConfig+0x36e>
 800440e:	4b67      	ldr	r3, [pc, #412]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	4a66      	ldr	r2, [pc, #408]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004414:	f023 0301 	bic.w	r3, r3, #1
 8004418:	6213      	str	r3, [r2, #32]
 800441a:	4b64      	ldr	r3, [pc, #400]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	4a63      	ldr	r2, [pc, #396]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004420:	f023 0304 	bic.w	r3, r3, #4
 8004424:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d015      	beq.n	800445a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fd ff49 	bl	80022c4 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004434:	e00a      	b.n	800444c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f7fd ff45 	bl	80022c4 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	; 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e0ab      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444c:	4b57      	ldr	r3, [pc, #348]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0ee      	beq.n	8004436 <HAL_RCC_OscConfig+0x37e>
 8004458:	e014      	b.n	8004484 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445a:	f7fd ff33 	bl	80022c4 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004460:	e00a      	b.n	8004478 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004462:	f7fd ff2f 	bl	80022c4 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004470:	4293      	cmp	r3, r2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e095      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004478:	4b4c      	ldr	r3, [pc, #304]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1ee      	bne.n	8004462 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004484:	7dfb      	ldrb	r3, [r7, #23]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d105      	bne.n	8004496 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800448a:	4b48      	ldr	r3, [pc, #288]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	4a47      	ldr	r2, [pc, #284]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004494:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8081 	beq.w	80045a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a0:	4b42      	ldr	r3, [pc, #264]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 030c 	and.w	r3, r3, #12
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d061      	beq.n	8004570 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d146      	bne.n	8004542 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b4:	4b3f      	ldr	r3, [pc, #252]	; (80045b4 <HAL_RCC_OscConfig+0x4fc>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fd ff03 	bl	80022c4 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fd feff 	bl	80022c4 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e067      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e8:	d108      	bne.n	80044fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044ea:	4b30      	ldr	r3, [pc, #192]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	492d      	ldr	r1, [pc, #180]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fc:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a19      	ldr	r1, [r3, #32]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	430b      	orrs	r3, r1
 800450e:	4927      	ldr	r1, [pc, #156]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004510:	4313      	orrs	r3, r2
 8004512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004514:	4b27      	ldr	r3, [pc, #156]	; (80045b4 <HAL_RCC_OscConfig+0x4fc>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451a:	f7fd fed3 	bl	80022c4 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004522:	f7fd fecf 	bl	80022c4 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e037      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCC_OscConfig+0x46a>
 8004540:	e02f      	b.n	80045a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004542:	4b1c      	ldr	r3, [pc, #112]	; (80045b4 <HAL_RCC_OscConfig+0x4fc>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fd febc 	bl	80022c4 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004550:	f7fd feb8 	bl	80022c4 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e020      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x498>
 800456e:	e018      	b.n	80045a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e013      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCC_OscConfig+0x4f4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	429a      	cmp	r2, r3
 800458e:	d106      	bne.n	800459e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40007000 	.word	0x40007000
 80045b4:	42420060 	.word	0x42420060

080045b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0d0      	b.n	800476e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045cc:	4b6a      	ldr	r3, [pc, #424]	; (8004778 <HAL_RCC_ClockConfig+0x1c0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d910      	bls.n	80045fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b67      	ldr	r3, [pc, #412]	; (8004778 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 0207 	bic.w	r2, r3, #7
 80045e2:	4965      	ldr	r1, [pc, #404]	; (8004778 <HAL_RCC_ClockConfig+0x1c0>)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0b8      	b.n	800476e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004614:	4b59      	ldr	r3, [pc, #356]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a58      	ldr	r2, [pc, #352]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800461e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800462c:	4b53      	ldr	r3, [pc, #332]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4a52      	ldr	r2, [pc, #328]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004632:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004636:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b50      	ldr	r3, [pc, #320]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	494d      	ldr	r1, [pc, #308]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004646:	4313      	orrs	r3, r2
 8004648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d040      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d115      	bne.n	8004696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e07f      	b.n	800476e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d107      	bne.n	8004686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004676:	4b41      	ldr	r3, [pc, #260]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d109      	bne.n	8004696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e073      	b.n	800476e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004686:	4b3d      	ldr	r3, [pc, #244]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e06b      	b.n	800476e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004696:	4b39      	ldr	r3, [pc, #228]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4936      	ldr	r1, [pc, #216]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a8:	f7fd fe0c 	bl	80022c4 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	e00a      	b.n	80046c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b0:	f7fd fe08 	bl	80022c4 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	4293      	cmp	r3, r2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e053      	b.n	800476e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c6:	4b2d      	ldr	r3, [pc, #180]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 020c 	and.w	r2, r3, #12
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d1eb      	bne.n	80046b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046d8:	4b27      	ldr	r3, [pc, #156]	; (8004778 <HAL_RCC_ClockConfig+0x1c0>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d210      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e6:	4b24      	ldr	r3, [pc, #144]	; (8004778 <HAL_RCC_ClockConfig+0x1c0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 0207 	bic.w	r2, r3, #7
 80046ee:	4922      	ldr	r1, [pc, #136]	; (8004778 <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_RCC_ClockConfig+0x1c0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e032      	b.n	800476e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4916      	ldr	r1, [pc, #88]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	490e      	ldr	r1, [pc, #56]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 8004742:	4313      	orrs	r3, r2
 8004744:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004746:	f000 f821 	bl	800478c <HAL_RCC_GetSysClockFreq>
 800474a:	4601      	mov	r1, r0
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_ClockConfig+0x1c4>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	4a0a      	ldr	r2, [pc, #40]	; (8004780 <HAL_RCC_ClockConfig+0x1c8>)
 8004758:	5cd3      	ldrb	r3, [r2, r3]
 800475a:	fa21 f303 	lsr.w	r3, r1, r3
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1cc>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x1d0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd fd6a 	bl	8002240 <HAL_InitTick>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40022000 	.word	0x40022000
 800477c:	40021000 	.word	0x40021000
 8004780:	080081e4 	.word	0x080081e4
 8004784:	20000018 	.word	0x20000018
 8004788:	2000001c 	.word	0x2000001c

0800478c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800478c:	b490      	push	{r4, r7}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004792:	4b2a      	ldr	r3, [pc, #168]	; (800483c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004794:	1d3c      	adds	r4, r7, #4
 8004796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800479c:	4b28      	ldr	r3, [pc, #160]	; (8004840 <HAL_RCC_GetSysClockFreq+0xb4>)
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	2300      	movs	r3, #0
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	2300      	movs	r3, #0
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047b6:	4b23      	ldr	r3, [pc, #140]	; (8004844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d002      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x40>
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d003      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0x46>
 80047ca:	e02d      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047cc:	4b1e      	ldr	r3, [pc, #120]	; (8004848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047ce:	623b      	str	r3, [r7, #32]
      break;
 80047d0:	e02d      	b.n	800482e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	0c9b      	lsrs	r3, r3, #18
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047de:	4413      	add	r3, r2
 80047e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d013      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047f0:	4b14      	ldr	r3, [pc, #80]	; (8004844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	0c5b      	lsrs	r3, r3, #17
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047fe:	4413      	add	r3, r2
 8004800:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004804:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	4a0f      	ldr	r2, [pc, #60]	; (8004848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800480a:	fb02 f203 	mul.w	r2, r2, r3
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	fbb2 f3f3 	udiv	r3, r2, r3
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
 8004816:	e004      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	4a0c      	ldr	r2, [pc, #48]	; (800484c <HAL_RCC_GetSysClockFreq+0xc0>)
 800481c:	fb02 f303 	mul.w	r3, r2, r3
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	623b      	str	r3, [r7, #32]
      break;
 8004826:	e002      	b.n	800482e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004828:	4b07      	ldr	r3, [pc, #28]	; (8004848 <HAL_RCC_GetSysClockFreq+0xbc>)
 800482a:	623b      	str	r3, [r7, #32]
      break;
 800482c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482e:	6a3b      	ldr	r3, [r7, #32]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3728      	adds	r7, #40	; 0x28
 8004834:	46bd      	mov	sp, r7
 8004836:	bc90      	pop	{r4, r7}
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	08006cf4 	.word	0x08006cf4
 8004840:	08006d04 	.word	0x08006d04
 8004844:	40021000 	.word	0x40021000
 8004848:	007a1200 	.word	0x007a1200
 800484c:	003d0900 	.word	0x003d0900

08004850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004854:	4b02      	ldr	r3, [pc, #8]	; (8004860 <HAL_RCC_GetHCLKFreq+0x10>)
 8004856:	681b      	ldr	r3, [r3, #0]
}
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	20000018 	.word	0x20000018

08004864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004868:	f7ff fff2 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 800486c:	4601      	mov	r1, r0
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	4a03      	ldr	r2, [pc, #12]	; (8004888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800487a:	5cd3      	ldrb	r3, [r2, r3]
 800487c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004880:	4618      	mov	r0, r3
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000
 8004888:	080081f4 	.word	0x080081f4

0800488c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004890:	f7ff ffde 	bl	8004850 <HAL_RCC_GetHCLKFreq>
 8004894:	4601      	mov	r1, r0
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	0adb      	lsrs	r3, r3, #11
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4a03      	ldr	r2, [pc, #12]	; (80048b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048a2:	5cd3      	ldrb	r3, [r2, r3]
 80048a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40021000 	.word	0x40021000
 80048b0:	080081f4 	.word	0x080081f4

080048b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <RCC_Delay+0x34>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <RCC_Delay+0x38>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	0a5b      	lsrs	r3, r3, #9
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048d0:	bf00      	nop
  }
  while (Delay --);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	1e5a      	subs	r2, r3, #1
 80048d6:	60fa      	str	r2, [r7, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f9      	bne.n	80048d0 <RCC_Delay+0x1c>
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000018 	.word	0x20000018
 80048ec:	10624dd3 	.word	0x10624dd3

080048f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d07d      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800490c:	2300      	movs	r3, #0
 800490e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004910:	4b4f      	ldr	r3, [pc, #316]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10d      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800491c:	4b4c      	ldr	r3, [pc, #304]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	4a4b      	ldr	r2, [pc, #300]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004926:	61d3      	str	r3, [r2, #28]
 8004928:	4b49      	ldr	r3, [pc, #292]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004938:	4b46      	ldr	r3, [pc, #280]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d118      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004944:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a42      	ldr	r2, [pc, #264]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800494a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004950:	f7fd fcb8 	bl	80022c4 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004956:	e008      	b.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004958:	f7fd fcb4 	bl	80022c4 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e06d      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496a:	4b3a      	ldr	r3, [pc, #232]	; (8004a54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004976:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d02e      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	429a      	cmp	r2, r3
 8004992:	d027      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004994:	4b2e      	ldr	r3, [pc, #184]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800499e:	4b2e      	ldr	r3, [pc, #184]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049a4:	4b2c      	ldr	r3, [pc, #176]	; (8004a58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049aa:	4a29      	ldr	r2, [pc, #164]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d014      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ba:	f7fd fc83 	bl	80022c4 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c0:	e00a      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c2:	f7fd fc7f 	bl	80022c4 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e036      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d8:	4b1d      	ldr	r3, [pc, #116]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0ee      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049e4:	4b1a      	ldr	r3, [pc, #104]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4917      	ldr	r1, [pc, #92]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d105      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049fc:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	4a13      	ldr	r2, [pc, #76]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a14:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	490b      	ldr	r1, [pc, #44]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d008      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a32:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	4904      	ldr	r1, [pc, #16]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40021000 	.word	0x40021000
 8004a54:	40007000 	.word	0x40007000
 8004a58:	42420440 	.word	0x42420440

08004a5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b08d      	sub	sp, #52	; 0x34
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a64:	4b55      	ldr	r3, [pc, #340]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004a66:	f107 040c 	add.w	r4, r7, #12
 8004a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a70:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a7e:	2300      	movs	r3, #0
 8004a80:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	2300      	movs	r3, #0
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d07f      	beq.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004a90:	2b10      	cmp	r3, #16
 8004a92:	d002      	beq.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d048      	beq.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004a98:	e08b      	b.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8004a9a:	4b4a      	ldr	r3, [pc, #296]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004aa0:	4b48      	ldr	r3, [pc, #288]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d07f      	beq.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	0c9b      	lsrs	r3, r3, #18
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ab8:	4413      	add	r3, r2
 8004aba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004abe:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d018      	beq.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004aca:	4b3e      	ldr	r3, [pc, #248]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	0c5b      	lsrs	r3, r3, #17
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ad8:	4413      	add	r3, r2
 8004ada:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004aea:	4a37      	ldr	r2, [pc, #220]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	fb02 f303 	mul.w	r3, r2, r3
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004afa:	e004      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	4a33      	ldr	r2, [pc, #204]	; (8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004b00:	fb02 f303 	mul.w	r3, r2, r3
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004b06:	4b2f      	ldr	r3, [pc, #188]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b12:	d102      	bne.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004b18:	e048      	b.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4a2c      	ldr	r2, [pc, #176]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004b28:	e040      	b.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004b2a:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d108      	bne.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b4c:	e01f      	b.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b58:	d109      	bne.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004b66:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6c:	e00f      	b.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b78:	d11a      	bne.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d014      	beq.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004b86:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004b8c:	e010      	b.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004b8e:	e00f      	b.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004b90:	f7ff fe7c 	bl	800488c <HAL_RCC_GetPCLK2Freq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	0b9b      	lsrs	r3, r3, #14
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004baa:	e002      	b.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004bac:	bf00      	nop
 8004bae:	e000      	b.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004bb0:	bf00      	nop
    }
  }
  return (frequency);
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3734      	adds	r7, #52	; 0x34
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd90      	pop	{r4, r7, pc}
 8004bbc:	08006d08 	.word	0x08006d08
 8004bc0:	08006d18 	.word	0x08006d18
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	007a1200 	.word	0x007a1200
 8004bcc:	003d0900 	.word	0x003d0900
 8004bd0:	aaaaaaab 	.word	0xaaaaaaab

08004bd4 <__errno>:
 8004bd4:	4b01      	ldr	r3, [pc, #4]	; (8004bdc <__errno+0x8>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	20000024 	.word	0x20000024

08004be0 <__libc_init_array>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	2500      	movs	r5, #0
 8004be4:	4e0c      	ldr	r6, [pc, #48]	; (8004c18 <__libc_init_array+0x38>)
 8004be6:	4c0d      	ldr	r4, [pc, #52]	; (8004c1c <__libc_init_array+0x3c>)
 8004be8:	1ba4      	subs	r4, r4, r6
 8004bea:	10a4      	asrs	r4, r4, #2
 8004bec:	42a5      	cmp	r5, r4
 8004bee:	d109      	bne.n	8004c04 <__libc_init_array+0x24>
 8004bf0:	f002 f860 	bl	8006cb4 <_init>
 8004bf4:	2500      	movs	r5, #0
 8004bf6:	4e0a      	ldr	r6, [pc, #40]	; (8004c20 <__libc_init_array+0x40>)
 8004bf8:	4c0a      	ldr	r4, [pc, #40]	; (8004c24 <__libc_init_array+0x44>)
 8004bfa:	1ba4      	subs	r4, r4, r6
 8004bfc:	10a4      	asrs	r4, r4, #2
 8004bfe:	42a5      	cmp	r5, r4
 8004c00:	d105      	bne.n	8004c0e <__libc_init_array+0x2e>
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c08:	4798      	blx	r3
 8004c0a:	3501      	adds	r5, #1
 8004c0c:	e7ee      	b.n	8004bec <__libc_init_array+0xc>
 8004c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c12:	4798      	blx	r3
 8004c14:	3501      	adds	r5, #1
 8004c16:	e7f2      	b.n	8004bfe <__libc_init_array+0x1e>
 8004c18:	08008458 	.word	0x08008458
 8004c1c:	08008458 	.word	0x08008458
 8004c20:	08008458 	.word	0x08008458
 8004c24:	0800845c 	.word	0x0800845c

08004c28 <memset>:
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4402      	add	r2, r0
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d100      	bne.n	8004c32 <memset+0xa>
 8004c30:	4770      	bx	lr
 8004c32:	f803 1b01 	strb.w	r1, [r3], #1
 8004c36:	e7f9      	b.n	8004c2c <memset+0x4>

08004c38 <__cvt>:
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3e:	461e      	mov	r6, r3
 8004c40:	bfbb      	ittet	lt
 8004c42:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004c46:	461e      	movlt	r6, r3
 8004c48:	2300      	movge	r3, #0
 8004c4a:	232d      	movlt	r3, #45	; 0x2d
 8004c4c:	b088      	sub	sp, #32
 8004c4e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004c50:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004c54:	f027 0720 	bic.w	r7, r7, #32
 8004c58:	2f46      	cmp	r7, #70	; 0x46
 8004c5a:	4614      	mov	r4, r2
 8004c5c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004c5e:	700b      	strb	r3, [r1, #0]
 8004c60:	d004      	beq.n	8004c6c <__cvt+0x34>
 8004c62:	2f45      	cmp	r7, #69	; 0x45
 8004c64:	d100      	bne.n	8004c68 <__cvt+0x30>
 8004c66:	3501      	adds	r5, #1
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e000      	b.n	8004c6e <__cvt+0x36>
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	aa07      	add	r2, sp, #28
 8004c70:	9204      	str	r2, [sp, #16]
 8004c72:	aa06      	add	r2, sp, #24
 8004c74:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004c78:	e9cd 3500 	strd	r3, r5, [sp]
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	4633      	mov	r3, r6
 8004c80:	f000 fcda 	bl	8005638 <_dtoa_r>
 8004c84:	2f47      	cmp	r7, #71	; 0x47
 8004c86:	4680      	mov	r8, r0
 8004c88:	d102      	bne.n	8004c90 <__cvt+0x58>
 8004c8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c8c:	07db      	lsls	r3, r3, #31
 8004c8e:	d526      	bpl.n	8004cde <__cvt+0xa6>
 8004c90:	2f46      	cmp	r7, #70	; 0x46
 8004c92:	eb08 0905 	add.w	r9, r8, r5
 8004c96:	d111      	bne.n	8004cbc <__cvt+0x84>
 8004c98:	f898 3000 	ldrb.w	r3, [r8]
 8004c9c:	2b30      	cmp	r3, #48	; 0x30
 8004c9e:	d10a      	bne.n	8004cb6 <__cvt+0x7e>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	f7fb fe7e 	bl	80009a8 <__aeabi_dcmpeq>
 8004cac:	b918      	cbnz	r0, 8004cb6 <__cvt+0x7e>
 8004cae:	f1c5 0501 	rsb	r5, r5, #1
 8004cb2:	f8ca 5000 	str.w	r5, [sl]
 8004cb6:	f8da 3000 	ldr.w	r3, [sl]
 8004cba:	4499      	add	r9, r3
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	f7fb fe70 	bl	80009a8 <__aeabi_dcmpeq>
 8004cc8:	b938      	cbnz	r0, 8004cda <__cvt+0xa2>
 8004cca:	2230      	movs	r2, #48	; 0x30
 8004ccc:	9b07      	ldr	r3, [sp, #28]
 8004cce:	454b      	cmp	r3, r9
 8004cd0:	d205      	bcs.n	8004cde <__cvt+0xa6>
 8004cd2:	1c59      	adds	r1, r3, #1
 8004cd4:	9107      	str	r1, [sp, #28]
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	e7f8      	b.n	8004ccc <__cvt+0x94>
 8004cda:	f8cd 901c 	str.w	r9, [sp, #28]
 8004cde:	4640      	mov	r0, r8
 8004ce0:	9b07      	ldr	r3, [sp, #28]
 8004ce2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ce4:	eba3 0308 	sub.w	r3, r3, r8
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	b008      	add	sp, #32
 8004cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004cf0 <__exponent>:
 8004cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cf2:	2900      	cmp	r1, #0
 8004cf4:	bfb4      	ite	lt
 8004cf6:	232d      	movlt	r3, #45	; 0x2d
 8004cf8:	232b      	movge	r3, #43	; 0x2b
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	bfb8      	it	lt
 8004cfe:	4249      	neglt	r1, r1
 8004d00:	2909      	cmp	r1, #9
 8004d02:	f804 2b02 	strb.w	r2, [r4], #2
 8004d06:	7043      	strb	r3, [r0, #1]
 8004d08:	dd21      	ble.n	8004d4e <__exponent+0x5e>
 8004d0a:	f10d 0307 	add.w	r3, sp, #7
 8004d0e:	461f      	mov	r7, r3
 8004d10:	260a      	movs	r6, #10
 8004d12:	fb91 f5f6 	sdiv	r5, r1, r6
 8004d16:	fb06 1115 	mls	r1, r6, r5, r1
 8004d1a:	2d09      	cmp	r5, #9
 8004d1c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004d20:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d24:	f103 32ff 	add.w	r2, r3, #4294967295
 8004d28:	4629      	mov	r1, r5
 8004d2a:	dc09      	bgt.n	8004d40 <__exponent+0x50>
 8004d2c:	3130      	adds	r1, #48	; 0x30
 8004d2e:	3b02      	subs	r3, #2
 8004d30:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004d34:	42bb      	cmp	r3, r7
 8004d36:	4622      	mov	r2, r4
 8004d38:	d304      	bcc.n	8004d44 <__exponent+0x54>
 8004d3a:	1a10      	subs	r0, r2, r0
 8004d3c:	b003      	add	sp, #12
 8004d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d40:	4613      	mov	r3, r2
 8004d42:	e7e6      	b.n	8004d12 <__exponent+0x22>
 8004d44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d48:	f804 2b01 	strb.w	r2, [r4], #1
 8004d4c:	e7f2      	b.n	8004d34 <__exponent+0x44>
 8004d4e:	2330      	movs	r3, #48	; 0x30
 8004d50:	4419      	add	r1, r3
 8004d52:	7083      	strb	r3, [r0, #2]
 8004d54:	1d02      	adds	r2, r0, #4
 8004d56:	70c1      	strb	r1, [r0, #3]
 8004d58:	e7ef      	b.n	8004d3a <__exponent+0x4a>
	...

08004d5c <_printf_float>:
 8004d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d60:	b091      	sub	sp, #68	; 0x44
 8004d62:	460c      	mov	r4, r1
 8004d64:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004d66:	4693      	mov	fp, r2
 8004d68:	461e      	mov	r6, r3
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	f001 fa18 	bl	80061a0 <_localeconv_r>
 8004d70:	6803      	ldr	r3, [r0, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	9309      	str	r3, [sp, #36]	; 0x24
 8004d76:	f7fb f9eb 	bl	8000150 <strlen>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	900a      	str	r0, [sp, #40]	; 0x28
 8004d82:	3307      	adds	r3, #7
 8004d84:	f023 0307 	bic.w	r3, r3, #7
 8004d88:	f103 0208 	add.w	r2, r3, #8
 8004d8c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004d90:	f8d4 a000 	ldr.w	sl, [r4]
 8004d94:	603a      	str	r2, [r7, #0]
 8004d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d9e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004da2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dac:	4ba6      	ldr	r3, [pc, #664]	; (8005048 <_printf_float+0x2ec>)
 8004dae:	4638      	mov	r0, r7
 8004db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004db2:	f7fb fe2b 	bl	8000a0c <__aeabi_dcmpun>
 8004db6:	bb68      	cbnz	r0, 8004e14 <_printf_float+0xb8>
 8004db8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dbc:	4ba2      	ldr	r3, [pc, #648]	; (8005048 <_printf_float+0x2ec>)
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dc2:	f7fb fe05 	bl	80009d0 <__aeabi_dcmple>
 8004dc6:	bb28      	cbnz	r0, 8004e14 <_printf_float+0xb8>
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2300      	movs	r3, #0
 8004dcc:	4638      	mov	r0, r7
 8004dce:	4649      	mov	r1, r9
 8004dd0:	f7fb fdf4 	bl	80009bc <__aeabi_dcmplt>
 8004dd4:	b110      	cbz	r0, 8004ddc <_printf_float+0x80>
 8004dd6:	232d      	movs	r3, #45	; 0x2d
 8004dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ddc:	4f9b      	ldr	r7, [pc, #620]	; (800504c <_printf_float+0x2f0>)
 8004dde:	4b9c      	ldr	r3, [pc, #624]	; (8005050 <_printf_float+0x2f4>)
 8004de0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004de4:	bf98      	it	ls
 8004de6:	461f      	movls	r7, r3
 8004de8:	2303      	movs	r3, #3
 8004dea:	f04f 0900 	mov.w	r9, #0
 8004dee:	6123      	str	r3, [r4, #16]
 8004df0:	f02a 0304 	bic.w	r3, sl, #4
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	9600      	str	r6, [sp, #0]
 8004df8:	465b      	mov	r3, fp
 8004dfa:	aa0f      	add	r2, sp, #60	; 0x3c
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 f9e2 	bl	80051c8 <_printf_common>
 8004e04:	3001      	adds	r0, #1
 8004e06:	f040 8090 	bne.w	8004f2a <_printf_float+0x1ce>
 8004e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0e:	b011      	add	sp, #68	; 0x44
 8004e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e14:	463a      	mov	r2, r7
 8004e16:	464b      	mov	r3, r9
 8004e18:	4638      	mov	r0, r7
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	f7fb fdf6 	bl	8000a0c <__aeabi_dcmpun>
 8004e20:	b110      	cbz	r0, 8004e28 <_printf_float+0xcc>
 8004e22:	4f8c      	ldr	r7, [pc, #560]	; (8005054 <_printf_float+0x2f8>)
 8004e24:	4b8c      	ldr	r3, [pc, #560]	; (8005058 <_printf_float+0x2fc>)
 8004e26:	e7db      	b.n	8004de0 <_printf_float+0x84>
 8004e28:	6863      	ldr	r3, [r4, #4]
 8004e2a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	a80d      	add	r0, sp, #52	; 0x34
 8004e32:	a90e      	add	r1, sp, #56	; 0x38
 8004e34:	d140      	bne.n	8004eb8 <_printf_float+0x15c>
 8004e36:	2306      	movs	r3, #6
 8004e38:	6063      	str	r3, [r4, #4]
 8004e3a:	f04f 0c00 	mov.w	ip, #0
 8004e3e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004e42:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	6022      	str	r2, [r4, #0]
 8004e4a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	463a      	mov	r2, r7
 8004e52:	464b      	mov	r3, r9
 8004e54:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004e58:	4628      	mov	r0, r5
 8004e5a:	f7ff feed 	bl	8004c38 <__cvt>
 8004e5e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004e62:	2b47      	cmp	r3, #71	; 0x47
 8004e64:	4607      	mov	r7, r0
 8004e66:	d109      	bne.n	8004e7c <_printf_float+0x120>
 8004e68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e6a:	1cd8      	adds	r0, r3, #3
 8004e6c:	db02      	blt.n	8004e74 <_printf_float+0x118>
 8004e6e:	6862      	ldr	r2, [r4, #4]
 8004e70:	4293      	cmp	r3, r2
 8004e72:	dd47      	ble.n	8004f04 <_printf_float+0x1a8>
 8004e74:	f1a8 0802 	sub.w	r8, r8, #2
 8004e78:	fa5f f888 	uxtb.w	r8, r8
 8004e7c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004e80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e82:	d824      	bhi.n	8004ece <_printf_float+0x172>
 8004e84:	3901      	subs	r1, #1
 8004e86:	4642      	mov	r2, r8
 8004e88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e8c:	910d      	str	r1, [sp, #52]	; 0x34
 8004e8e:	f7ff ff2f 	bl	8004cf0 <__exponent>
 8004e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e94:	4681      	mov	r9, r0
 8004e96:	1813      	adds	r3, r2, r0
 8004e98:	2a01      	cmp	r2, #1
 8004e9a:	6123      	str	r3, [r4, #16]
 8004e9c:	dc02      	bgt.n	8004ea4 <_printf_float+0x148>
 8004e9e:	6822      	ldr	r2, [r4, #0]
 8004ea0:	07d1      	lsls	r1, r2, #31
 8004ea2:	d501      	bpl.n	8004ea8 <_printf_float+0x14c>
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0a2      	beq.n	8004df6 <_printf_float+0x9a>
 8004eb0:	232d      	movs	r3, #45	; 0x2d
 8004eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eb6:	e79e      	b.n	8004df6 <_printf_float+0x9a>
 8004eb8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004ebc:	f000 816e 	beq.w	800519c <_printf_float+0x440>
 8004ec0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ec4:	d1b9      	bne.n	8004e3a <_printf_float+0xde>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1b7      	bne.n	8004e3a <_printf_float+0xde>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e7b4      	b.n	8004e38 <_printf_float+0xdc>
 8004ece:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004ed2:	d119      	bne.n	8004f08 <_printf_float+0x1ac>
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	6863      	ldr	r3, [r4, #4]
 8004ed8:	dd0c      	ble.n	8004ef4 <_printf_float+0x198>
 8004eda:	6121      	str	r1, [r4, #16]
 8004edc:	b913      	cbnz	r3, 8004ee4 <_printf_float+0x188>
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	07d2      	lsls	r2, r2, #31
 8004ee2:	d502      	bpl.n	8004eea <_printf_float+0x18e>
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	440b      	add	r3, r1
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eec:	f04f 0900 	mov.w	r9, #0
 8004ef0:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ef2:	e7d9      	b.n	8004ea8 <_printf_float+0x14c>
 8004ef4:	b913      	cbnz	r3, 8004efc <_printf_float+0x1a0>
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	07d0      	lsls	r0, r2, #31
 8004efa:	d501      	bpl.n	8004f00 <_printf_float+0x1a4>
 8004efc:	3302      	adds	r3, #2
 8004efe:	e7f3      	b.n	8004ee8 <_printf_float+0x18c>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e7f1      	b.n	8004ee8 <_printf_float+0x18c>
 8004f04:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004f08:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	db05      	blt.n	8004f1c <_printf_float+0x1c0>
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	6123      	str	r3, [r4, #16]
 8004f14:	07d1      	lsls	r1, r2, #31
 8004f16:	d5e8      	bpl.n	8004eea <_printf_float+0x18e>
 8004f18:	3301      	adds	r3, #1
 8004f1a:	e7e5      	b.n	8004ee8 <_printf_float+0x18c>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bfcc      	ite	gt
 8004f20:	2301      	movgt	r3, #1
 8004f22:	f1c3 0302 	rsble	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	e7de      	b.n	8004ee8 <_printf_float+0x18c>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	055a      	lsls	r2, r3, #21
 8004f2e:	d407      	bmi.n	8004f40 <_printf_float+0x1e4>
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	463a      	mov	r2, r7
 8004f34:	4659      	mov	r1, fp
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b0      	blx	r6
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d129      	bne.n	8004f92 <_printf_float+0x236>
 8004f3e:	e764      	b.n	8004e0a <_printf_float+0xae>
 8004f40:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004f44:	f240 80d7 	bls.w	80050f6 <_printf_float+0x39a>
 8004f48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f7fb fd2a 	bl	80009a8 <__aeabi_dcmpeq>
 8004f54:	b388      	cbz	r0, 8004fba <_printf_float+0x25e>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4a40      	ldr	r2, [pc, #256]	; (800505c <_printf_float+0x300>)
 8004f5a:	4659      	mov	r1, fp
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b0      	blx	r6
 8004f60:	3001      	adds	r0, #1
 8004f62:	f43f af52 	beq.w	8004e0a <_printf_float+0xae>
 8004f66:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	db02      	blt.n	8004f74 <_printf_float+0x218>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	07d8      	lsls	r0, r3, #31
 8004f72:	d50e      	bpl.n	8004f92 <_printf_float+0x236>
 8004f74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f78:	4659      	mov	r1, fp
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	47b0      	blx	r6
 8004f7e:	3001      	adds	r0, #1
 8004f80:	f43f af43 	beq.w	8004e0a <_printf_float+0xae>
 8004f84:	2700      	movs	r7, #0
 8004f86:	f104 081a 	add.w	r8, r4, #26
 8004f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	42bb      	cmp	r3, r7
 8004f90:	dc09      	bgt.n	8004fa6 <_printf_float+0x24a>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	079f      	lsls	r7, r3, #30
 8004f96:	f100 80fd 	bmi.w	8005194 <_printf_float+0x438>
 8004f9a:	68e0      	ldr	r0, [r4, #12]
 8004f9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f9e:	4298      	cmp	r0, r3
 8004fa0:	bfb8      	it	lt
 8004fa2:	4618      	movlt	r0, r3
 8004fa4:	e733      	b.n	8004e0e <_printf_float+0xb2>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4642      	mov	r2, r8
 8004faa:	4659      	mov	r1, fp
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b0      	blx	r6
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	f43f af2a 	beq.w	8004e0a <_printf_float+0xae>
 8004fb6:	3701      	adds	r7, #1
 8004fb8:	e7e7      	b.n	8004f8a <_printf_float+0x22e>
 8004fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dc2b      	bgt.n	8005018 <_printf_float+0x2bc>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	4a26      	ldr	r2, [pc, #152]	; (800505c <_printf_float+0x300>)
 8004fc4:	4659      	mov	r1, fp
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	47b0      	blx	r6
 8004fca:	3001      	adds	r0, #1
 8004fcc:	f43f af1d 	beq.w	8004e0a <_printf_float+0xae>
 8004fd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fd2:	b923      	cbnz	r3, 8004fde <_printf_float+0x282>
 8004fd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fd6:	b913      	cbnz	r3, 8004fde <_printf_float+0x282>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	07d9      	lsls	r1, r3, #31
 8004fdc:	d5d9      	bpl.n	8004f92 <_printf_float+0x236>
 8004fde:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fe2:	4659      	mov	r1, fp
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b0      	blx	r6
 8004fe8:	3001      	adds	r0, #1
 8004fea:	f43f af0e 	beq.w	8004e0a <_printf_float+0xae>
 8004fee:	f04f 0800 	mov.w	r8, #0
 8004ff2:	f104 091a 	add.w	r9, r4, #26
 8004ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ff8:	425b      	negs	r3, r3
 8004ffa:	4543      	cmp	r3, r8
 8004ffc:	dc01      	bgt.n	8005002 <_printf_float+0x2a6>
 8004ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005000:	e797      	b.n	8004f32 <_printf_float+0x1d6>
 8005002:	2301      	movs	r3, #1
 8005004:	464a      	mov	r2, r9
 8005006:	4659      	mov	r1, fp
 8005008:	4628      	mov	r0, r5
 800500a:	47b0      	blx	r6
 800500c:	3001      	adds	r0, #1
 800500e:	f43f aefc 	beq.w	8004e0a <_printf_float+0xae>
 8005012:	f108 0801 	add.w	r8, r8, #1
 8005016:	e7ee      	b.n	8004ff6 <_printf_float+0x29a>
 8005018:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800501a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800501c:	429a      	cmp	r2, r3
 800501e:	bfa8      	it	ge
 8005020:	461a      	movge	r2, r3
 8005022:	2a00      	cmp	r2, #0
 8005024:	4690      	mov	r8, r2
 8005026:	dd07      	ble.n	8005038 <_printf_float+0x2dc>
 8005028:	4613      	mov	r3, r2
 800502a:	4659      	mov	r1, fp
 800502c:	463a      	mov	r2, r7
 800502e:	4628      	mov	r0, r5
 8005030:	47b0      	blx	r6
 8005032:	3001      	adds	r0, #1
 8005034:	f43f aee9 	beq.w	8004e0a <_printf_float+0xae>
 8005038:	f104 031a 	add.w	r3, r4, #26
 800503c:	f04f 0a00 	mov.w	sl, #0
 8005040:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005044:	930b      	str	r3, [sp, #44]	; 0x2c
 8005046:	e015      	b.n	8005074 <_printf_float+0x318>
 8005048:	7fefffff 	.word	0x7fefffff
 800504c:	08008200 	.word	0x08008200
 8005050:	080081fc 	.word	0x080081fc
 8005054:	08008208 	.word	0x08008208
 8005058:	08008204 	.word	0x08008204
 800505c:	0800820c 	.word	0x0800820c
 8005060:	2301      	movs	r3, #1
 8005062:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005064:	4659      	mov	r1, fp
 8005066:	4628      	mov	r0, r5
 8005068:	47b0      	blx	r6
 800506a:	3001      	adds	r0, #1
 800506c:	f43f aecd 	beq.w	8004e0a <_printf_float+0xae>
 8005070:	f10a 0a01 	add.w	sl, sl, #1
 8005074:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005078:	eba9 0308 	sub.w	r3, r9, r8
 800507c:	4553      	cmp	r3, sl
 800507e:	dcef      	bgt.n	8005060 <_printf_float+0x304>
 8005080:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005084:	429a      	cmp	r2, r3
 8005086:	444f      	add	r7, r9
 8005088:	db14      	blt.n	80050b4 <_printf_float+0x358>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	07da      	lsls	r2, r3, #31
 800508e:	d411      	bmi.n	80050b4 <_printf_float+0x358>
 8005090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005092:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005094:	eba3 0209 	sub.w	r2, r3, r9
 8005098:	eba3 0901 	sub.w	r9, r3, r1
 800509c:	4591      	cmp	r9, r2
 800509e:	bfa8      	it	ge
 80050a0:	4691      	movge	r9, r2
 80050a2:	f1b9 0f00 	cmp.w	r9, #0
 80050a6:	dc0d      	bgt.n	80050c4 <_printf_float+0x368>
 80050a8:	2700      	movs	r7, #0
 80050aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050ae:	f104 081a 	add.w	r8, r4, #26
 80050b2:	e018      	b.n	80050e6 <_printf_float+0x38a>
 80050b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050b8:	4659      	mov	r1, fp
 80050ba:	4628      	mov	r0, r5
 80050bc:	47b0      	blx	r6
 80050be:	3001      	adds	r0, #1
 80050c0:	d1e6      	bne.n	8005090 <_printf_float+0x334>
 80050c2:	e6a2      	b.n	8004e0a <_printf_float+0xae>
 80050c4:	464b      	mov	r3, r9
 80050c6:	463a      	mov	r2, r7
 80050c8:	4659      	mov	r1, fp
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b0      	blx	r6
 80050ce:	3001      	adds	r0, #1
 80050d0:	d1ea      	bne.n	80050a8 <_printf_float+0x34c>
 80050d2:	e69a      	b.n	8004e0a <_printf_float+0xae>
 80050d4:	2301      	movs	r3, #1
 80050d6:	4642      	mov	r2, r8
 80050d8:	4659      	mov	r1, fp
 80050da:	4628      	mov	r0, r5
 80050dc:	47b0      	blx	r6
 80050de:	3001      	adds	r0, #1
 80050e0:	f43f ae93 	beq.w	8004e0a <_printf_float+0xae>
 80050e4:	3701      	adds	r7, #1
 80050e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	eba3 0309 	sub.w	r3, r3, r9
 80050f0:	42bb      	cmp	r3, r7
 80050f2:	dcef      	bgt.n	80050d4 <_printf_float+0x378>
 80050f4:	e74d      	b.n	8004f92 <_printf_float+0x236>
 80050f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050f8:	2a01      	cmp	r2, #1
 80050fa:	dc01      	bgt.n	8005100 <_printf_float+0x3a4>
 80050fc:	07db      	lsls	r3, r3, #31
 80050fe:	d538      	bpl.n	8005172 <_printf_float+0x416>
 8005100:	2301      	movs	r3, #1
 8005102:	463a      	mov	r2, r7
 8005104:	4659      	mov	r1, fp
 8005106:	4628      	mov	r0, r5
 8005108:	47b0      	blx	r6
 800510a:	3001      	adds	r0, #1
 800510c:	f43f ae7d 	beq.w	8004e0a <_printf_float+0xae>
 8005110:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005114:	4659      	mov	r1, fp
 8005116:	4628      	mov	r0, r5
 8005118:	47b0      	blx	r6
 800511a:	3001      	adds	r0, #1
 800511c:	f107 0701 	add.w	r7, r7, #1
 8005120:	f43f ae73 	beq.w	8004e0a <_printf_float+0xae>
 8005124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800512a:	2200      	movs	r2, #0
 800512c:	f103 38ff 	add.w	r8, r3, #4294967295
 8005130:	2300      	movs	r3, #0
 8005132:	f7fb fc39 	bl	80009a8 <__aeabi_dcmpeq>
 8005136:	b9c0      	cbnz	r0, 800516a <_printf_float+0x40e>
 8005138:	4643      	mov	r3, r8
 800513a:	463a      	mov	r2, r7
 800513c:	4659      	mov	r1, fp
 800513e:	4628      	mov	r0, r5
 8005140:	47b0      	blx	r6
 8005142:	3001      	adds	r0, #1
 8005144:	d10d      	bne.n	8005162 <_printf_float+0x406>
 8005146:	e660      	b.n	8004e0a <_printf_float+0xae>
 8005148:	2301      	movs	r3, #1
 800514a:	4642      	mov	r2, r8
 800514c:	4659      	mov	r1, fp
 800514e:	4628      	mov	r0, r5
 8005150:	47b0      	blx	r6
 8005152:	3001      	adds	r0, #1
 8005154:	f43f ae59 	beq.w	8004e0a <_printf_float+0xae>
 8005158:	3701      	adds	r7, #1
 800515a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800515c:	3b01      	subs	r3, #1
 800515e:	42bb      	cmp	r3, r7
 8005160:	dcf2      	bgt.n	8005148 <_printf_float+0x3ec>
 8005162:	464b      	mov	r3, r9
 8005164:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005168:	e6e4      	b.n	8004f34 <_printf_float+0x1d8>
 800516a:	2700      	movs	r7, #0
 800516c:	f104 081a 	add.w	r8, r4, #26
 8005170:	e7f3      	b.n	800515a <_printf_float+0x3fe>
 8005172:	2301      	movs	r3, #1
 8005174:	e7e1      	b.n	800513a <_printf_float+0x3de>
 8005176:	2301      	movs	r3, #1
 8005178:	4642      	mov	r2, r8
 800517a:	4659      	mov	r1, fp
 800517c:	4628      	mov	r0, r5
 800517e:	47b0      	blx	r6
 8005180:	3001      	adds	r0, #1
 8005182:	f43f ae42 	beq.w	8004e0a <_printf_float+0xae>
 8005186:	3701      	adds	r7, #1
 8005188:	68e3      	ldr	r3, [r4, #12]
 800518a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	42bb      	cmp	r3, r7
 8005190:	dcf1      	bgt.n	8005176 <_printf_float+0x41a>
 8005192:	e702      	b.n	8004f9a <_printf_float+0x23e>
 8005194:	2700      	movs	r7, #0
 8005196:	f104 0819 	add.w	r8, r4, #25
 800519a:	e7f5      	b.n	8005188 <_printf_float+0x42c>
 800519c:	2b00      	cmp	r3, #0
 800519e:	f43f ae94 	beq.w	8004eca <_printf_float+0x16e>
 80051a2:	f04f 0c00 	mov.w	ip, #0
 80051a6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80051aa:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80051ae:	6022      	str	r2, [r4, #0]
 80051b0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80051b4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	463a      	mov	r2, r7
 80051bc:	464b      	mov	r3, r9
 80051be:	4628      	mov	r0, r5
 80051c0:	f7ff fd3a 	bl	8004c38 <__cvt>
 80051c4:	4607      	mov	r7, r0
 80051c6:	e64f      	b.n	8004e68 <_printf_float+0x10c>

080051c8 <_printf_common>:
 80051c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051cc:	4691      	mov	r9, r2
 80051ce:	461f      	mov	r7, r3
 80051d0:	688a      	ldr	r2, [r1, #8]
 80051d2:	690b      	ldr	r3, [r1, #16]
 80051d4:	4606      	mov	r6, r0
 80051d6:	4293      	cmp	r3, r2
 80051d8:	bfb8      	it	lt
 80051da:	4613      	movlt	r3, r2
 80051dc:	f8c9 3000 	str.w	r3, [r9]
 80051e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051e4:	460c      	mov	r4, r1
 80051e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051ea:	b112      	cbz	r2, 80051f2 <_printf_common+0x2a>
 80051ec:	3301      	adds	r3, #1
 80051ee:	f8c9 3000 	str.w	r3, [r9]
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	0699      	lsls	r1, r3, #26
 80051f6:	bf42      	ittt	mi
 80051f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80051fc:	3302      	addmi	r3, #2
 80051fe:	f8c9 3000 	strmi.w	r3, [r9]
 8005202:	6825      	ldr	r5, [r4, #0]
 8005204:	f015 0506 	ands.w	r5, r5, #6
 8005208:	d107      	bne.n	800521a <_printf_common+0x52>
 800520a:	f104 0a19 	add.w	sl, r4, #25
 800520e:	68e3      	ldr	r3, [r4, #12]
 8005210:	f8d9 2000 	ldr.w	r2, [r9]
 8005214:	1a9b      	subs	r3, r3, r2
 8005216:	42ab      	cmp	r3, r5
 8005218:	dc29      	bgt.n	800526e <_printf_common+0xa6>
 800521a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800521e:	6822      	ldr	r2, [r4, #0]
 8005220:	3300      	adds	r3, #0
 8005222:	bf18      	it	ne
 8005224:	2301      	movne	r3, #1
 8005226:	0692      	lsls	r2, r2, #26
 8005228:	d42e      	bmi.n	8005288 <_printf_common+0xc0>
 800522a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800522e:	4639      	mov	r1, r7
 8005230:	4630      	mov	r0, r6
 8005232:	47c0      	blx	r8
 8005234:	3001      	adds	r0, #1
 8005236:	d021      	beq.n	800527c <_printf_common+0xb4>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	68e5      	ldr	r5, [r4, #12]
 800523c:	f003 0306 	and.w	r3, r3, #6
 8005240:	2b04      	cmp	r3, #4
 8005242:	bf18      	it	ne
 8005244:	2500      	movne	r5, #0
 8005246:	f8d9 2000 	ldr.w	r2, [r9]
 800524a:	f04f 0900 	mov.w	r9, #0
 800524e:	bf08      	it	eq
 8005250:	1aad      	subeq	r5, r5, r2
 8005252:	68a3      	ldr	r3, [r4, #8]
 8005254:	6922      	ldr	r2, [r4, #16]
 8005256:	bf08      	it	eq
 8005258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800525c:	4293      	cmp	r3, r2
 800525e:	bfc4      	itt	gt
 8005260:	1a9b      	subgt	r3, r3, r2
 8005262:	18ed      	addgt	r5, r5, r3
 8005264:	341a      	adds	r4, #26
 8005266:	454d      	cmp	r5, r9
 8005268:	d11a      	bne.n	80052a0 <_printf_common+0xd8>
 800526a:	2000      	movs	r0, #0
 800526c:	e008      	b.n	8005280 <_printf_common+0xb8>
 800526e:	2301      	movs	r3, #1
 8005270:	4652      	mov	r2, sl
 8005272:	4639      	mov	r1, r7
 8005274:	4630      	mov	r0, r6
 8005276:	47c0      	blx	r8
 8005278:	3001      	adds	r0, #1
 800527a:	d103      	bne.n	8005284 <_printf_common+0xbc>
 800527c:	f04f 30ff 	mov.w	r0, #4294967295
 8005280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005284:	3501      	adds	r5, #1
 8005286:	e7c2      	b.n	800520e <_printf_common+0x46>
 8005288:	2030      	movs	r0, #48	; 0x30
 800528a:	18e1      	adds	r1, r4, r3
 800528c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005290:	1c5a      	adds	r2, r3, #1
 8005292:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005296:	4422      	add	r2, r4
 8005298:	3302      	adds	r3, #2
 800529a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800529e:	e7c4      	b.n	800522a <_printf_common+0x62>
 80052a0:	2301      	movs	r3, #1
 80052a2:	4622      	mov	r2, r4
 80052a4:	4639      	mov	r1, r7
 80052a6:	4630      	mov	r0, r6
 80052a8:	47c0      	blx	r8
 80052aa:	3001      	adds	r0, #1
 80052ac:	d0e6      	beq.n	800527c <_printf_common+0xb4>
 80052ae:	f109 0901 	add.w	r9, r9, #1
 80052b2:	e7d8      	b.n	8005266 <_printf_common+0x9e>

080052b4 <_printf_i>:
 80052b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052bc:	460c      	mov	r4, r1
 80052be:	7e09      	ldrb	r1, [r1, #24]
 80052c0:	b085      	sub	sp, #20
 80052c2:	296e      	cmp	r1, #110	; 0x6e
 80052c4:	4617      	mov	r7, r2
 80052c6:	4606      	mov	r6, r0
 80052c8:	4698      	mov	r8, r3
 80052ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052cc:	f000 80b3 	beq.w	8005436 <_printf_i+0x182>
 80052d0:	d822      	bhi.n	8005318 <_printf_i+0x64>
 80052d2:	2963      	cmp	r1, #99	; 0x63
 80052d4:	d036      	beq.n	8005344 <_printf_i+0x90>
 80052d6:	d80a      	bhi.n	80052ee <_printf_i+0x3a>
 80052d8:	2900      	cmp	r1, #0
 80052da:	f000 80b9 	beq.w	8005450 <_printf_i+0x19c>
 80052de:	2958      	cmp	r1, #88	; 0x58
 80052e0:	f000 8083 	beq.w	80053ea <_printf_i+0x136>
 80052e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80052ec:	e032      	b.n	8005354 <_printf_i+0xa0>
 80052ee:	2964      	cmp	r1, #100	; 0x64
 80052f0:	d001      	beq.n	80052f6 <_printf_i+0x42>
 80052f2:	2969      	cmp	r1, #105	; 0x69
 80052f4:	d1f6      	bne.n	80052e4 <_printf_i+0x30>
 80052f6:	6820      	ldr	r0, [r4, #0]
 80052f8:	6813      	ldr	r3, [r2, #0]
 80052fa:	0605      	lsls	r5, r0, #24
 80052fc:	f103 0104 	add.w	r1, r3, #4
 8005300:	d52a      	bpl.n	8005358 <_printf_i+0xa4>
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6011      	str	r1, [r2, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	da03      	bge.n	8005312 <_printf_i+0x5e>
 800530a:	222d      	movs	r2, #45	; 0x2d
 800530c:	425b      	negs	r3, r3
 800530e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005312:	486f      	ldr	r0, [pc, #444]	; (80054d0 <_printf_i+0x21c>)
 8005314:	220a      	movs	r2, #10
 8005316:	e039      	b.n	800538c <_printf_i+0xd8>
 8005318:	2973      	cmp	r1, #115	; 0x73
 800531a:	f000 809d 	beq.w	8005458 <_printf_i+0x1a4>
 800531e:	d808      	bhi.n	8005332 <_printf_i+0x7e>
 8005320:	296f      	cmp	r1, #111	; 0x6f
 8005322:	d020      	beq.n	8005366 <_printf_i+0xb2>
 8005324:	2970      	cmp	r1, #112	; 0x70
 8005326:	d1dd      	bne.n	80052e4 <_printf_i+0x30>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	f043 0320 	orr.w	r3, r3, #32
 800532e:	6023      	str	r3, [r4, #0]
 8005330:	e003      	b.n	800533a <_printf_i+0x86>
 8005332:	2975      	cmp	r1, #117	; 0x75
 8005334:	d017      	beq.n	8005366 <_printf_i+0xb2>
 8005336:	2978      	cmp	r1, #120	; 0x78
 8005338:	d1d4      	bne.n	80052e4 <_printf_i+0x30>
 800533a:	2378      	movs	r3, #120	; 0x78
 800533c:	4865      	ldr	r0, [pc, #404]	; (80054d4 <_printf_i+0x220>)
 800533e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005342:	e055      	b.n	80053f0 <_printf_i+0x13c>
 8005344:	6813      	ldr	r3, [r2, #0]
 8005346:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800534a:	1d19      	adds	r1, r3, #4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6011      	str	r1, [r2, #0]
 8005350:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005354:	2301      	movs	r3, #1
 8005356:	e08c      	b.n	8005472 <_printf_i+0x1be>
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800535e:	6011      	str	r1, [r2, #0]
 8005360:	bf18      	it	ne
 8005362:	b21b      	sxthne	r3, r3
 8005364:	e7cf      	b.n	8005306 <_printf_i+0x52>
 8005366:	6813      	ldr	r3, [r2, #0]
 8005368:	6825      	ldr	r5, [r4, #0]
 800536a:	1d18      	adds	r0, r3, #4
 800536c:	6010      	str	r0, [r2, #0]
 800536e:	0628      	lsls	r0, r5, #24
 8005370:	d501      	bpl.n	8005376 <_printf_i+0xc2>
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	e002      	b.n	800537c <_printf_i+0xc8>
 8005376:	0668      	lsls	r0, r5, #25
 8005378:	d5fb      	bpl.n	8005372 <_printf_i+0xbe>
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	296f      	cmp	r1, #111	; 0x6f
 800537e:	bf14      	ite	ne
 8005380:	220a      	movne	r2, #10
 8005382:	2208      	moveq	r2, #8
 8005384:	4852      	ldr	r0, [pc, #328]	; (80054d0 <_printf_i+0x21c>)
 8005386:	2100      	movs	r1, #0
 8005388:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800538c:	6865      	ldr	r5, [r4, #4]
 800538e:	2d00      	cmp	r5, #0
 8005390:	60a5      	str	r5, [r4, #8]
 8005392:	f2c0 8095 	blt.w	80054c0 <_printf_i+0x20c>
 8005396:	6821      	ldr	r1, [r4, #0]
 8005398:	f021 0104 	bic.w	r1, r1, #4
 800539c:	6021      	str	r1, [r4, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d13d      	bne.n	800541e <_printf_i+0x16a>
 80053a2:	2d00      	cmp	r5, #0
 80053a4:	f040 808e 	bne.w	80054c4 <_printf_i+0x210>
 80053a8:	4665      	mov	r5, ip
 80053aa:	2a08      	cmp	r2, #8
 80053ac:	d10b      	bne.n	80053c6 <_printf_i+0x112>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	07db      	lsls	r3, r3, #31
 80053b2:	d508      	bpl.n	80053c6 <_printf_i+0x112>
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	6862      	ldr	r2, [r4, #4]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	bfde      	ittt	le
 80053bc:	2330      	movle	r3, #48	; 0x30
 80053be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053c6:	ebac 0305 	sub.w	r3, ip, r5
 80053ca:	6123      	str	r3, [r4, #16]
 80053cc:	f8cd 8000 	str.w	r8, [sp]
 80053d0:	463b      	mov	r3, r7
 80053d2:	aa03      	add	r2, sp, #12
 80053d4:	4621      	mov	r1, r4
 80053d6:	4630      	mov	r0, r6
 80053d8:	f7ff fef6 	bl	80051c8 <_printf_common>
 80053dc:	3001      	adds	r0, #1
 80053de:	d14d      	bne.n	800547c <_printf_i+0x1c8>
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	b005      	add	sp, #20
 80053e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053ea:	4839      	ldr	r0, [pc, #228]	; (80054d0 <_printf_i+0x21c>)
 80053ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80053f0:	6813      	ldr	r3, [r2, #0]
 80053f2:	6821      	ldr	r1, [r4, #0]
 80053f4:	1d1d      	adds	r5, r3, #4
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6015      	str	r5, [r2, #0]
 80053fa:	060a      	lsls	r2, r1, #24
 80053fc:	d50b      	bpl.n	8005416 <_printf_i+0x162>
 80053fe:	07ca      	lsls	r2, r1, #31
 8005400:	bf44      	itt	mi
 8005402:	f041 0120 	orrmi.w	r1, r1, #32
 8005406:	6021      	strmi	r1, [r4, #0]
 8005408:	b91b      	cbnz	r3, 8005412 <_printf_i+0x15e>
 800540a:	6822      	ldr	r2, [r4, #0]
 800540c:	f022 0220 	bic.w	r2, r2, #32
 8005410:	6022      	str	r2, [r4, #0]
 8005412:	2210      	movs	r2, #16
 8005414:	e7b7      	b.n	8005386 <_printf_i+0xd2>
 8005416:	064d      	lsls	r5, r1, #25
 8005418:	bf48      	it	mi
 800541a:	b29b      	uxthmi	r3, r3
 800541c:	e7ef      	b.n	80053fe <_printf_i+0x14a>
 800541e:	4665      	mov	r5, ip
 8005420:	fbb3 f1f2 	udiv	r1, r3, r2
 8005424:	fb02 3311 	mls	r3, r2, r1, r3
 8005428:	5cc3      	ldrb	r3, [r0, r3]
 800542a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800542e:	460b      	mov	r3, r1
 8005430:	2900      	cmp	r1, #0
 8005432:	d1f5      	bne.n	8005420 <_printf_i+0x16c>
 8005434:	e7b9      	b.n	80053aa <_printf_i+0xf6>
 8005436:	6813      	ldr	r3, [r2, #0]
 8005438:	6825      	ldr	r5, [r4, #0]
 800543a:	1d18      	adds	r0, r3, #4
 800543c:	6961      	ldr	r1, [r4, #20]
 800543e:	6010      	str	r0, [r2, #0]
 8005440:	0628      	lsls	r0, r5, #24
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	d501      	bpl.n	800544a <_printf_i+0x196>
 8005446:	6019      	str	r1, [r3, #0]
 8005448:	e002      	b.n	8005450 <_printf_i+0x19c>
 800544a:	066a      	lsls	r2, r5, #25
 800544c:	d5fb      	bpl.n	8005446 <_printf_i+0x192>
 800544e:	8019      	strh	r1, [r3, #0]
 8005450:	2300      	movs	r3, #0
 8005452:	4665      	mov	r5, ip
 8005454:	6123      	str	r3, [r4, #16]
 8005456:	e7b9      	b.n	80053cc <_printf_i+0x118>
 8005458:	6813      	ldr	r3, [r2, #0]
 800545a:	1d19      	adds	r1, r3, #4
 800545c:	6011      	str	r1, [r2, #0]
 800545e:	681d      	ldr	r5, [r3, #0]
 8005460:	6862      	ldr	r2, [r4, #4]
 8005462:	2100      	movs	r1, #0
 8005464:	4628      	mov	r0, r5
 8005466:	f000 feb1 	bl	80061cc <memchr>
 800546a:	b108      	cbz	r0, 8005470 <_printf_i+0x1bc>
 800546c:	1b40      	subs	r0, r0, r5
 800546e:	6060      	str	r0, [r4, #4]
 8005470:	6863      	ldr	r3, [r4, #4]
 8005472:	6123      	str	r3, [r4, #16]
 8005474:	2300      	movs	r3, #0
 8005476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800547a:	e7a7      	b.n	80053cc <_printf_i+0x118>
 800547c:	6923      	ldr	r3, [r4, #16]
 800547e:	462a      	mov	r2, r5
 8005480:	4639      	mov	r1, r7
 8005482:	4630      	mov	r0, r6
 8005484:	47c0      	blx	r8
 8005486:	3001      	adds	r0, #1
 8005488:	d0aa      	beq.n	80053e0 <_printf_i+0x12c>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	079b      	lsls	r3, r3, #30
 800548e:	d413      	bmi.n	80054b8 <_printf_i+0x204>
 8005490:	68e0      	ldr	r0, [r4, #12]
 8005492:	9b03      	ldr	r3, [sp, #12]
 8005494:	4298      	cmp	r0, r3
 8005496:	bfb8      	it	lt
 8005498:	4618      	movlt	r0, r3
 800549a:	e7a3      	b.n	80053e4 <_printf_i+0x130>
 800549c:	2301      	movs	r3, #1
 800549e:	464a      	mov	r2, r9
 80054a0:	4639      	mov	r1, r7
 80054a2:	4630      	mov	r0, r6
 80054a4:	47c0      	blx	r8
 80054a6:	3001      	adds	r0, #1
 80054a8:	d09a      	beq.n	80053e0 <_printf_i+0x12c>
 80054aa:	3501      	adds	r5, #1
 80054ac:	68e3      	ldr	r3, [r4, #12]
 80054ae:	9a03      	ldr	r2, [sp, #12]
 80054b0:	1a9b      	subs	r3, r3, r2
 80054b2:	42ab      	cmp	r3, r5
 80054b4:	dcf2      	bgt.n	800549c <_printf_i+0x1e8>
 80054b6:	e7eb      	b.n	8005490 <_printf_i+0x1dc>
 80054b8:	2500      	movs	r5, #0
 80054ba:	f104 0919 	add.w	r9, r4, #25
 80054be:	e7f5      	b.n	80054ac <_printf_i+0x1f8>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ac      	bne.n	800541e <_printf_i+0x16a>
 80054c4:	7803      	ldrb	r3, [r0, #0]
 80054c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054ce:	e76c      	b.n	80053aa <_printf_i+0xf6>
 80054d0:	0800820e 	.word	0x0800820e
 80054d4:	0800821f 	.word	0x0800821f

080054d8 <siprintf>:
 80054d8:	b40e      	push	{r1, r2, r3}
 80054da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054de:	b500      	push	{lr}
 80054e0:	b09c      	sub	sp, #112	; 0x70
 80054e2:	ab1d      	add	r3, sp, #116	; 0x74
 80054e4:	9002      	str	r0, [sp, #8]
 80054e6:	9006      	str	r0, [sp, #24]
 80054e8:	9107      	str	r1, [sp, #28]
 80054ea:	9104      	str	r1, [sp, #16]
 80054ec:	4808      	ldr	r0, [pc, #32]	; (8005510 <siprintf+0x38>)
 80054ee:	4909      	ldr	r1, [pc, #36]	; (8005514 <siprintf+0x3c>)
 80054f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f4:	9105      	str	r1, [sp, #20]
 80054f6:	6800      	ldr	r0, [r0, #0]
 80054f8:	a902      	add	r1, sp, #8
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	f001 fa6a 	bl	80069d4 <_svfiprintf_r>
 8005500:	2200      	movs	r2, #0
 8005502:	9b02      	ldr	r3, [sp, #8]
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	b01c      	add	sp, #112	; 0x70
 8005508:	f85d eb04 	ldr.w	lr, [sp], #4
 800550c:	b003      	add	sp, #12
 800550e:	4770      	bx	lr
 8005510:	20000024 	.word	0x20000024
 8005514:	ffff0208 	.word	0xffff0208

08005518 <quorem>:
 8005518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	6903      	ldr	r3, [r0, #16]
 800551e:	690c      	ldr	r4, [r1, #16]
 8005520:	4680      	mov	r8, r0
 8005522:	42a3      	cmp	r3, r4
 8005524:	f2c0 8084 	blt.w	8005630 <quorem+0x118>
 8005528:	3c01      	subs	r4, #1
 800552a:	f101 0714 	add.w	r7, r1, #20
 800552e:	f100 0614 	add.w	r6, r0, #20
 8005532:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005536:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800553a:	3501      	adds	r5, #1
 800553c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005540:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005544:	eb06 030c 	add.w	r3, r6, ip
 8005548:	eb07 090c 	add.w	r9, r7, ip
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	b39d      	cbz	r5, 80055b8 <quorem+0xa0>
 8005550:	f04f 0a00 	mov.w	sl, #0
 8005554:	4638      	mov	r0, r7
 8005556:	46b6      	mov	lr, r6
 8005558:	46d3      	mov	fp, sl
 800555a:	f850 2b04 	ldr.w	r2, [r0], #4
 800555e:	b293      	uxth	r3, r2
 8005560:	fb05 a303 	mla	r3, r5, r3, sl
 8005564:	0c12      	lsrs	r2, r2, #16
 8005566:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800556a:	fb05 a202 	mla	r2, r5, r2, sl
 800556e:	b29b      	uxth	r3, r3
 8005570:	ebab 0303 	sub.w	r3, fp, r3
 8005574:	f8de b000 	ldr.w	fp, [lr]
 8005578:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800557c:	fa1f fb8b 	uxth.w	fp, fp
 8005580:	445b      	add	r3, fp
 8005582:	fa1f fb82 	uxth.w	fp, r2
 8005586:	f8de 2000 	ldr.w	r2, [lr]
 800558a:	4581      	cmp	r9, r0
 800558c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005594:	b29b      	uxth	r3, r3
 8005596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800559a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800559e:	f84e 3b04 	str.w	r3, [lr], #4
 80055a2:	d2da      	bcs.n	800555a <quorem+0x42>
 80055a4:	f856 300c 	ldr.w	r3, [r6, ip]
 80055a8:	b933      	cbnz	r3, 80055b8 <quorem+0xa0>
 80055aa:	9b01      	ldr	r3, [sp, #4]
 80055ac:	3b04      	subs	r3, #4
 80055ae:	429e      	cmp	r6, r3
 80055b0:	461a      	mov	r2, r3
 80055b2:	d331      	bcc.n	8005618 <quorem+0x100>
 80055b4:	f8c8 4010 	str.w	r4, [r8, #16]
 80055b8:	4640      	mov	r0, r8
 80055ba:	f001 f835 	bl	8006628 <__mcmp>
 80055be:	2800      	cmp	r0, #0
 80055c0:	db26      	blt.n	8005610 <quorem+0xf8>
 80055c2:	4630      	mov	r0, r6
 80055c4:	f04f 0c00 	mov.w	ip, #0
 80055c8:	3501      	adds	r5, #1
 80055ca:	f857 1b04 	ldr.w	r1, [r7], #4
 80055ce:	f8d0 e000 	ldr.w	lr, [r0]
 80055d2:	b28b      	uxth	r3, r1
 80055d4:	ebac 0303 	sub.w	r3, ip, r3
 80055d8:	fa1f f28e 	uxth.w	r2, lr
 80055dc:	4413      	add	r3, r2
 80055de:	0c0a      	lsrs	r2, r1, #16
 80055e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ee:	45b9      	cmp	r9, r7
 80055f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055f4:	f840 3b04 	str.w	r3, [r0], #4
 80055f8:	d2e7      	bcs.n	80055ca <quorem+0xb2>
 80055fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80055fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005602:	b92a      	cbnz	r2, 8005610 <quorem+0xf8>
 8005604:	3b04      	subs	r3, #4
 8005606:	429e      	cmp	r6, r3
 8005608:	461a      	mov	r2, r3
 800560a:	d30b      	bcc.n	8005624 <quorem+0x10c>
 800560c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005610:	4628      	mov	r0, r5
 8005612:	b003      	add	sp, #12
 8005614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005618:	6812      	ldr	r2, [r2, #0]
 800561a:	3b04      	subs	r3, #4
 800561c:	2a00      	cmp	r2, #0
 800561e:	d1c9      	bne.n	80055b4 <quorem+0x9c>
 8005620:	3c01      	subs	r4, #1
 8005622:	e7c4      	b.n	80055ae <quorem+0x96>
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	3b04      	subs	r3, #4
 8005628:	2a00      	cmp	r2, #0
 800562a:	d1ef      	bne.n	800560c <quorem+0xf4>
 800562c:	3c01      	subs	r4, #1
 800562e:	e7ea      	b.n	8005606 <quorem+0xee>
 8005630:	2000      	movs	r0, #0
 8005632:	e7ee      	b.n	8005612 <quorem+0xfa>
 8005634:	0000      	movs	r0, r0
	...

08005638 <_dtoa_r>:
 8005638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	4616      	mov	r6, r2
 800563e:	461f      	mov	r7, r3
 8005640:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005642:	b095      	sub	sp, #84	; 0x54
 8005644:	4604      	mov	r4, r0
 8005646:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800564a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800564e:	b93d      	cbnz	r5, 8005660 <_dtoa_r+0x28>
 8005650:	2010      	movs	r0, #16
 8005652:	f000 fdb3 	bl	80061bc <malloc>
 8005656:	6260      	str	r0, [r4, #36]	; 0x24
 8005658:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800565c:	6005      	str	r5, [r0, #0]
 800565e:	60c5      	str	r5, [r0, #12]
 8005660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	b151      	cbz	r1, 800567c <_dtoa_r+0x44>
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	2301      	movs	r3, #1
 800566a:	4093      	lsls	r3, r2
 800566c:	604a      	str	r2, [r1, #4]
 800566e:	608b      	str	r3, [r1, #8]
 8005670:	4620      	mov	r0, r4
 8005672:	f000 fdf8 	bl	8006266 <_Bfree>
 8005676:	2200      	movs	r2, #0
 8005678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	1e3b      	subs	r3, r7, #0
 800567e:	bfaf      	iteee	ge
 8005680:	2300      	movge	r3, #0
 8005682:	2201      	movlt	r2, #1
 8005684:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005688:	9303      	strlt	r3, [sp, #12]
 800568a:	bfac      	ite	ge
 800568c:	f8c8 3000 	strge.w	r3, [r8]
 8005690:	f8c8 2000 	strlt.w	r2, [r8]
 8005694:	4bae      	ldr	r3, [pc, #696]	; (8005950 <_dtoa_r+0x318>)
 8005696:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800569a:	ea33 0308 	bics.w	r3, r3, r8
 800569e:	d11b      	bne.n	80056d8 <_dtoa_r+0xa0>
 80056a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80056a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	9b02      	ldr	r3, [sp, #8]
 80056aa:	b923      	cbnz	r3, 80056b6 <_dtoa_r+0x7e>
 80056ac:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80056b0:	2800      	cmp	r0, #0
 80056b2:	f000 8545 	beq.w	8006140 <_dtoa_r+0xb08>
 80056b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056b8:	b953      	cbnz	r3, 80056d0 <_dtoa_r+0x98>
 80056ba:	4ba6      	ldr	r3, [pc, #664]	; (8005954 <_dtoa_r+0x31c>)
 80056bc:	e021      	b.n	8005702 <_dtoa_r+0xca>
 80056be:	4ba6      	ldr	r3, [pc, #664]	; (8005958 <_dtoa_r+0x320>)
 80056c0:	9306      	str	r3, [sp, #24]
 80056c2:	3308      	adds	r3, #8
 80056c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	9806      	ldr	r0, [sp, #24]
 80056ca:	b015      	add	sp, #84	; 0x54
 80056cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d0:	4ba0      	ldr	r3, [pc, #640]	; (8005954 <_dtoa_r+0x31c>)
 80056d2:	9306      	str	r3, [sp, #24]
 80056d4:	3303      	adds	r3, #3
 80056d6:	e7f5      	b.n	80056c4 <_dtoa_r+0x8c>
 80056d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056dc:	2200      	movs	r2, #0
 80056de:	2300      	movs	r3, #0
 80056e0:	4630      	mov	r0, r6
 80056e2:	4639      	mov	r1, r7
 80056e4:	f7fb f960 	bl	80009a8 <__aeabi_dcmpeq>
 80056e8:	4682      	mov	sl, r0
 80056ea:	b160      	cbz	r0, 8005706 <_dtoa_r+0xce>
 80056ec:	2301      	movs	r3, #1
 80056ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056f0:	6013      	str	r3, [r2, #0]
 80056f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8520 	beq.w	800613a <_dtoa_r+0xb02>
 80056fa:	4b98      	ldr	r3, [pc, #608]	; (800595c <_dtoa_r+0x324>)
 80056fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	3b01      	subs	r3, #1
 8005702:	9306      	str	r3, [sp, #24]
 8005704:	e7e0      	b.n	80056c8 <_dtoa_r+0x90>
 8005706:	ab12      	add	r3, sp, #72	; 0x48
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	ab13      	add	r3, sp, #76	; 0x4c
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	4632      	mov	r2, r6
 8005710:	463b      	mov	r3, r7
 8005712:	4620      	mov	r0, r4
 8005714:	f001 f800 	bl	8006718 <__d2b>
 8005718:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800571c:	4683      	mov	fp, r0
 800571e:	2d00      	cmp	r5, #0
 8005720:	d07d      	beq.n	800581e <_dtoa_r+0x1e6>
 8005722:	46b0      	mov	r8, r6
 8005724:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005728:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800572c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005730:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005734:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005738:	2200      	movs	r2, #0
 800573a:	4b89      	ldr	r3, [pc, #548]	; (8005960 <_dtoa_r+0x328>)
 800573c:	4640      	mov	r0, r8
 800573e:	4649      	mov	r1, r9
 8005740:	f7fa fd12 	bl	8000168 <__aeabi_dsub>
 8005744:	a37c      	add	r3, pc, #496	; (adr r3, 8005938 <_dtoa_r+0x300>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f7fa fec5 	bl	80004d8 <__aeabi_dmul>
 800574e:	a37c      	add	r3, pc, #496	; (adr r3, 8005940 <_dtoa_r+0x308>)
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f7fa fd0a 	bl	800016c <__adddf3>
 8005758:	4606      	mov	r6, r0
 800575a:	4628      	mov	r0, r5
 800575c:	460f      	mov	r7, r1
 800575e:	f7fa fe51 	bl	8000404 <__aeabi_i2d>
 8005762:	a379      	add	r3, pc, #484	; (adr r3, 8005948 <_dtoa_r+0x310>)
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f7fa feb6 	bl	80004d8 <__aeabi_dmul>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4630      	mov	r0, r6
 8005772:	4639      	mov	r1, r7
 8005774:	f7fa fcfa 	bl	800016c <__adddf3>
 8005778:	4606      	mov	r6, r0
 800577a:	460f      	mov	r7, r1
 800577c:	f7fb f95c 	bl	8000a38 <__aeabi_d2iz>
 8005780:	2200      	movs	r2, #0
 8005782:	4682      	mov	sl, r0
 8005784:	2300      	movs	r3, #0
 8005786:	4630      	mov	r0, r6
 8005788:	4639      	mov	r1, r7
 800578a:	f7fb f917 	bl	80009bc <__aeabi_dcmplt>
 800578e:	b148      	cbz	r0, 80057a4 <_dtoa_r+0x16c>
 8005790:	4650      	mov	r0, sl
 8005792:	f7fa fe37 	bl	8000404 <__aeabi_i2d>
 8005796:	4632      	mov	r2, r6
 8005798:	463b      	mov	r3, r7
 800579a:	f7fb f905 	bl	80009a8 <__aeabi_dcmpeq>
 800579e:	b908      	cbnz	r0, 80057a4 <_dtoa_r+0x16c>
 80057a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057a4:	f1ba 0f16 	cmp.w	sl, #22
 80057a8:	d85a      	bhi.n	8005860 <_dtoa_r+0x228>
 80057aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ae:	496d      	ldr	r1, [pc, #436]	; (8005964 <_dtoa_r+0x32c>)
 80057b0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80057b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057b8:	f7fb f91e 	bl	80009f8 <__aeabi_dcmpgt>
 80057bc:	2800      	cmp	r0, #0
 80057be:	d051      	beq.n	8005864 <_dtoa_r+0x22c>
 80057c0:	2300      	movs	r3, #0
 80057c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057c6:	930d      	str	r3, [sp, #52]	; 0x34
 80057c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057ca:	1b5d      	subs	r5, r3, r5
 80057cc:	1e6b      	subs	r3, r5, #1
 80057ce:	9307      	str	r3, [sp, #28]
 80057d0:	bf43      	ittte	mi
 80057d2:	2300      	movmi	r3, #0
 80057d4:	f1c5 0901 	rsbmi	r9, r5, #1
 80057d8:	9307      	strmi	r3, [sp, #28]
 80057da:	f04f 0900 	movpl.w	r9, #0
 80057de:	f1ba 0f00 	cmp.w	sl, #0
 80057e2:	db41      	blt.n	8005868 <_dtoa_r+0x230>
 80057e4:	9b07      	ldr	r3, [sp, #28]
 80057e6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80057ea:	4453      	add	r3, sl
 80057ec:	9307      	str	r3, [sp, #28]
 80057ee:	2300      	movs	r3, #0
 80057f0:	9308      	str	r3, [sp, #32]
 80057f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057f4:	2b09      	cmp	r3, #9
 80057f6:	f200 808f 	bhi.w	8005918 <_dtoa_r+0x2e0>
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	bfc4      	itt	gt
 80057fe:	3b04      	subgt	r3, #4
 8005800:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005802:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005804:	bfc8      	it	gt
 8005806:	2500      	movgt	r5, #0
 8005808:	f1a3 0302 	sub.w	r3, r3, #2
 800580c:	bfd8      	it	le
 800580e:	2501      	movle	r5, #1
 8005810:	2b03      	cmp	r3, #3
 8005812:	f200 808d 	bhi.w	8005930 <_dtoa_r+0x2f8>
 8005816:	e8df f003 	tbb	[pc, r3]
 800581a:	7d7b      	.short	0x7d7b
 800581c:	6f2f      	.short	0x6f2f
 800581e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005822:	441d      	add	r5, r3
 8005824:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005828:	2820      	cmp	r0, #32
 800582a:	dd13      	ble.n	8005854 <_dtoa_r+0x21c>
 800582c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005830:	9b02      	ldr	r3, [sp, #8]
 8005832:	fa08 f800 	lsl.w	r8, r8, r0
 8005836:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800583a:	fa23 f000 	lsr.w	r0, r3, r0
 800583e:	ea48 0000 	orr.w	r0, r8, r0
 8005842:	f7fa fdcf 	bl	80003e4 <__aeabi_ui2d>
 8005846:	2301      	movs	r3, #1
 8005848:	4680      	mov	r8, r0
 800584a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800584e:	3d01      	subs	r5, #1
 8005850:	9310      	str	r3, [sp, #64]	; 0x40
 8005852:	e771      	b.n	8005738 <_dtoa_r+0x100>
 8005854:	9b02      	ldr	r3, [sp, #8]
 8005856:	f1c0 0020 	rsb	r0, r0, #32
 800585a:	fa03 f000 	lsl.w	r0, r3, r0
 800585e:	e7f0      	b.n	8005842 <_dtoa_r+0x20a>
 8005860:	2301      	movs	r3, #1
 8005862:	e7b0      	b.n	80057c6 <_dtoa_r+0x18e>
 8005864:	900d      	str	r0, [sp, #52]	; 0x34
 8005866:	e7af      	b.n	80057c8 <_dtoa_r+0x190>
 8005868:	f1ca 0300 	rsb	r3, sl, #0
 800586c:	9308      	str	r3, [sp, #32]
 800586e:	2300      	movs	r3, #0
 8005870:	eba9 090a 	sub.w	r9, r9, sl
 8005874:	930c      	str	r3, [sp, #48]	; 0x30
 8005876:	e7bc      	b.n	80057f2 <_dtoa_r+0x1ba>
 8005878:	2301      	movs	r3, #1
 800587a:	9309      	str	r3, [sp, #36]	; 0x24
 800587c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800587e:	2b00      	cmp	r3, #0
 8005880:	dd74      	ble.n	800596c <_dtoa_r+0x334>
 8005882:	4698      	mov	r8, r3
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	2200      	movs	r2, #0
 8005888:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800588a:	6072      	str	r2, [r6, #4]
 800588c:	2204      	movs	r2, #4
 800588e:	f102 0014 	add.w	r0, r2, #20
 8005892:	4298      	cmp	r0, r3
 8005894:	6871      	ldr	r1, [r6, #4]
 8005896:	d96e      	bls.n	8005976 <_dtoa_r+0x33e>
 8005898:	4620      	mov	r0, r4
 800589a:	f000 fcb0 	bl	80061fe <_Balloc>
 800589e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058a0:	6030      	str	r0, [r6, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f1b8 0f0e 	cmp.w	r8, #14
 80058a8:	9306      	str	r3, [sp, #24]
 80058aa:	f200 80ed 	bhi.w	8005a88 <_dtoa_r+0x450>
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	f000 80ea 	beq.w	8005a88 <_dtoa_r+0x450>
 80058b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058b8:	f1ba 0f00 	cmp.w	sl, #0
 80058bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80058c0:	dd77      	ble.n	80059b2 <_dtoa_r+0x37a>
 80058c2:	4a28      	ldr	r2, [pc, #160]	; (8005964 <_dtoa_r+0x32c>)
 80058c4:	f00a 030f 	and.w	r3, sl, #15
 80058c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80058cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80058d0:	06f0      	lsls	r0, r6, #27
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80058da:	d568      	bpl.n	80059ae <_dtoa_r+0x376>
 80058dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80058e0:	4b21      	ldr	r3, [pc, #132]	; (8005968 <_dtoa_r+0x330>)
 80058e2:	2503      	movs	r5, #3
 80058e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058e8:	f7fa ff20 	bl	800072c <__aeabi_ddiv>
 80058ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058f0:	f006 060f 	and.w	r6, r6, #15
 80058f4:	4f1c      	ldr	r7, [pc, #112]	; (8005968 <_dtoa_r+0x330>)
 80058f6:	e04f      	b.n	8005998 <_dtoa_r+0x360>
 80058f8:	2301      	movs	r3, #1
 80058fa:	9309      	str	r3, [sp, #36]	; 0x24
 80058fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80058fe:	4453      	add	r3, sl
 8005900:	f103 0801 	add.w	r8, r3, #1
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	4643      	mov	r3, r8
 8005908:	2b01      	cmp	r3, #1
 800590a:	bfb8      	it	lt
 800590c:	2301      	movlt	r3, #1
 800590e:	e7ba      	b.n	8005886 <_dtoa_r+0x24e>
 8005910:	2300      	movs	r3, #0
 8005912:	e7b2      	b.n	800587a <_dtoa_r+0x242>
 8005914:	2300      	movs	r3, #0
 8005916:	e7f0      	b.n	80058fa <_dtoa_r+0x2c2>
 8005918:	2501      	movs	r5, #1
 800591a:	2300      	movs	r3, #0
 800591c:	9509      	str	r5, [sp, #36]	; 0x24
 800591e:	931e      	str	r3, [sp, #120]	; 0x78
 8005920:	f04f 33ff 	mov.w	r3, #4294967295
 8005924:	2200      	movs	r2, #0
 8005926:	9304      	str	r3, [sp, #16]
 8005928:	4698      	mov	r8, r3
 800592a:	2312      	movs	r3, #18
 800592c:	921f      	str	r2, [sp, #124]	; 0x7c
 800592e:	e7aa      	b.n	8005886 <_dtoa_r+0x24e>
 8005930:	2301      	movs	r3, #1
 8005932:	9309      	str	r3, [sp, #36]	; 0x24
 8005934:	e7f4      	b.n	8005920 <_dtoa_r+0x2e8>
 8005936:	bf00      	nop
 8005938:	636f4361 	.word	0x636f4361
 800593c:	3fd287a7 	.word	0x3fd287a7
 8005940:	8b60c8b3 	.word	0x8b60c8b3
 8005944:	3fc68a28 	.word	0x3fc68a28
 8005948:	509f79fb 	.word	0x509f79fb
 800594c:	3fd34413 	.word	0x3fd34413
 8005950:	7ff00000 	.word	0x7ff00000
 8005954:	08008239 	.word	0x08008239
 8005958:	08008230 	.word	0x08008230
 800595c:	0800820d 	.word	0x0800820d
 8005960:	3ff80000 	.word	0x3ff80000
 8005964:	08008268 	.word	0x08008268
 8005968:	08008240 	.word	0x08008240
 800596c:	2301      	movs	r3, #1
 800596e:	9304      	str	r3, [sp, #16]
 8005970:	4698      	mov	r8, r3
 8005972:	461a      	mov	r2, r3
 8005974:	e7da      	b.n	800592c <_dtoa_r+0x2f4>
 8005976:	3101      	adds	r1, #1
 8005978:	6071      	str	r1, [r6, #4]
 800597a:	0052      	lsls	r2, r2, #1
 800597c:	e787      	b.n	800588e <_dtoa_r+0x256>
 800597e:	07f1      	lsls	r1, r6, #31
 8005980:	d508      	bpl.n	8005994 <_dtoa_r+0x35c>
 8005982:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800598a:	f7fa fda5 	bl	80004d8 <__aeabi_dmul>
 800598e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005992:	3501      	adds	r5, #1
 8005994:	1076      	asrs	r6, r6, #1
 8005996:	3708      	adds	r7, #8
 8005998:	2e00      	cmp	r6, #0
 800599a:	d1f0      	bne.n	800597e <_dtoa_r+0x346>
 800599c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059a4:	f7fa fec2 	bl	800072c <__aeabi_ddiv>
 80059a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ac:	e01b      	b.n	80059e6 <_dtoa_r+0x3ae>
 80059ae:	2502      	movs	r5, #2
 80059b0:	e7a0      	b.n	80058f4 <_dtoa_r+0x2bc>
 80059b2:	f000 80a4 	beq.w	8005afe <_dtoa_r+0x4c6>
 80059b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80059ba:	f1ca 0600 	rsb	r6, sl, #0
 80059be:	4ba0      	ldr	r3, [pc, #640]	; (8005c40 <_dtoa_r+0x608>)
 80059c0:	f006 020f 	and.w	r2, r6, #15
 80059c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	f7fa fd84 	bl	80004d8 <__aeabi_dmul>
 80059d0:	2502      	movs	r5, #2
 80059d2:	2300      	movs	r3, #0
 80059d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d8:	4f9a      	ldr	r7, [pc, #616]	; (8005c44 <_dtoa_r+0x60c>)
 80059da:	1136      	asrs	r6, r6, #4
 80059dc:	2e00      	cmp	r6, #0
 80059de:	f040 8083 	bne.w	8005ae8 <_dtoa_r+0x4b0>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e0      	bne.n	80059a8 <_dtoa_r+0x370>
 80059e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 808a 	beq.w	8005b02 <_dtoa_r+0x4ca>
 80059ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80059f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059fa:	2200      	movs	r2, #0
 80059fc:	4b92      	ldr	r3, [pc, #584]	; (8005c48 <_dtoa_r+0x610>)
 80059fe:	f7fa ffdd 	bl	80009bc <__aeabi_dcmplt>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d07d      	beq.n	8005b02 <_dtoa_r+0x4ca>
 8005a06:	f1b8 0f00 	cmp.w	r8, #0
 8005a0a:	d07a      	beq.n	8005b02 <_dtoa_r+0x4ca>
 8005a0c:	9b04      	ldr	r3, [sp, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	dd36      	ble.n	8005a80 <_dtoa_r+0x448>
 8005a12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a16:	2200      	movs	r2, #0
 8005a18:	4b8c      	ldr	r3, [pc, #560]	; (8005c4c <_dtoa_r+0x614>)
 8005a1a:	f7fa fd5d 	bl	80004d8 <__aeabi_dmul>
 8005a1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a22:	9e04      	ldr	r6, [sp, #16]
 8005a24:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005a28:	3501      	adds	r5, #1
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f7fa fcea 	bl	8000404 <__aeabi_i2d>
 8005a30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a34:	f7fa fd50 	bl	80004d8 <__aeabi_dmul>
 8005a38:	2200      	movs	r2, #0
 8005a3a:	4b85      	ldr	r3, [pc, #532]	; (8005c50 <_dtoa_r+0x618>)
 8005a3c:	f7fa fb96 	bl	800016c <__adddf3>
 8005a40:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005a44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a48:	950b      	str	r5, [sp, #44]	; 0x2c
 8005a4a:	2e00      	cmp	r6, #0
 8005a4c:	d15c      	bne.n	8005b08 <_dtoa_r+0x4d0>
 8005a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a52:	2200      	movs	r2, #0
 8005a54:	4b7f      	ldr	r3, [pc, #508]	; (8005c54 <_dtoa_r+0x61c>)
 8005a56:	f7fa fb87 	bl	8000168 <__aeabi_dsub>
 8005a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a62:	f7fa ffc9 	bl	80009f8 <__aeabi_dcmpgt>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f040 8281 	bne.w	8005f6e <_dtoa_r+0x936>
 8005a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a72:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005a76:	f7fa ffa1 	bl	80009bc <__aeabi_dcmplt>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	f040 8275 	bne.w	8005f6a <_dtoa_r+0x932>
 8005a80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005a84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f2c0 814b 	blt.w	8005d26 <_dtoa_r+0x6ee>
 8005a90:	f1ba 0f0e 	cmp.w	sl, #14
 8005a94:	f300 8147 	bgt.w	8005d26 <_dtoa_r+0x6ee>
 8005a98:	4b69      	ldr	r3, [pc, #420]	; (8005c40 <_dtoa_r+0x608>)
 8005a9a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005aa6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f280 80d7 	bge.w	8005c5c <_dtoa_r+0x624>
 8005aae:	f1b8 0f00 	cmp.w	r8, #0
 8005ab2:	f300 80d3 	bgt.w	8005c5c <_dtoa_r+0x624>
 8005ab6:	f040 8257 	bne.w	8005f68 <_dtoa_r+0x930>
 8005aba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	4b64      	ldr	r3, [pc, #400]	; (8005c54 <_dtoa_r+0x61c>)
 8005ac2:	f7fa fd09 	bl	80004d8 <__aeabi_dmul>
 8005ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005aca:	f7fa ff8b 	bl	80009e4 <__aeabi_dcmpge>
 8005ace:	4646      	mov	r6, r8
 8005ad0:	4647      	mov	r7, r8
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	f040 822d 	bne.w	8005f32 <_dtoa_r+0x8fa>
 8005ad8:	9b06      	ldr	r3, [sp, #24]
 8005ada:	9a06      	ldr	r2, [sp, #24]
 8005adc:	1c5d      	adds	r5, r3, #1
 8005ade:	2331      	movs	r3, #49	; 0x31
 8005ae0:	f10a 0a01 	add.w	sl, sl, #1
 8005ae4:	7013      	strb	r3, [r2, #0]
 8005ae6:	e228      	b.n	8005f3a <_dtoa_r+0x902>
 8005ae8:	07f2      	lsls	r2, r6, #31
 8005aea:	d505      	bpl.n	8005af8 <_dtoa_r+0x4c0>
 8005aec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af0:	f7fa fcf2 	bl	80004d8 <__aeabi_dmul>
 8005af4:	2301      	movs	r3, #1
 8005af6:	3501      	adds	r5, #1
 8005af8:	1076      	asrs	r6, r6, #1
 8005afa:	3708      	adds	r7, #8
 8005afc:	e76e      	b.n	80059dc <_dtoa_r+0x3a4>
 8005afe:	2502      	movs	r5, #2
 8005b00:	e771      	b.n	80059e6 <_dtoa_r+0x3ae>
 8005b02:	4657      	mov	r7, sl
 8005b04:	4646      	mov	r6, r8
 8005b06:	e790      	b.n	8005a2a <_dtoa_r+0x3f2>
 8005b08:	4b4d      	ldr	r3, [pc, #308]	; (8005c40 <_dtoa_r+0x608>)
 8005b0a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b0e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d048      	beq.n	8005baa <_dtoa_r+0x572>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	494e      	ldr	r1, [pc, #312]	; (8005c58 <_dtoa_r+0x620>)
 8005b20:	f7fa fe04 	bl	800072c <__aeabi_ddiv>
 8005b24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b28:	f7fa fb1e 	bl	8000168 <__aeabi_dsub>
 8005b2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b30:	9d06      	ldr	r5, [sp, #24]
 8005b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b36:	f7fa ff7f 	bl	8000a38 <__aeabi_d2iz>
 8005b3a:	9011      	str	r0, [sp, #68]	; 0x44
 8005b3c:	f7fa fc62 	bl	8000404 <__aeabi_i2d>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b48:	f7fa fb0e 	bl	8000168 <__aeabi_dsub>
 8005b4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b52:	3330      	adds	r3, #48	; 0x30
 8005b54:	f805 3b01 	strb.w	r3, [r5], #1
 8005b58:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b5c:	f7fa ff2e 	bl	80009bc <__aeabi_dcmplt>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d163      	bne.n	8005c2c <_dtoa_r+0x5f4>
 8005b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b68:	2000      	movs	r0, #0
 8005b6a:	4937      	ldr	r1, [pc, #220]	; (8005c48 <_dtoa_r+0x610>)
 8005b6c:	f7fa fafc 	bl	8000168 <__aeabi_dsub>
 8005b70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b74:	f7fa ff22 	bl	80009bc <__aeabi_dcmplt>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	f040 80b5 	bne.w	8005ce8 <_dtoa_r+0x6b0>
 8005b7e:	9b06      	ldr	r3, [sp, #24]
 8005b80:	1aeb      	subs	r3, r5, r3
 8005b82:	429e      	cmp	r6, r3
 8005b84:	f77f af7c 	ble.w	8005a80 <_dtoa_r+0x448>
 8005b88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4b2f      	ldr	r3, [pc, #188]	; (8005c4c <_dtoa_r+0x614>)
 8005b90:	f7fa fca2 	bl	80004d8 <__aeabi_dmul>
 8005b94:	2200      	movs	r2, #0
 8005b96:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b9e:	4b2b      	ldr	r3, [pc, #172]	; (8005c4c <_dtoa_r+0x614>)
 8005ba0:	f7fa fc9a 	bl	80004d8 <__aeabi_dmul>
 8005ba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ba8:	e7c3      	b.n	8005b32 <_dtoa_r+0x4fa>
 8005baa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bae:	f7fa fc93 	bl	80004d8 <__aeabi_dmul>
 8005bb2:	9b06      	ldr	r3, [sp, #24]
 8005bb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005bb8:	199d      	adds	r5, r3, r6
 8005bba:	461e      	mov	r6, r3
 8005bbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bc0:	f7fa ff3a 	bl	8000a38 <__aeabi_d2iz>
 8005bc4:	9011      	str	r0, [sp, #68]	; 0x44
 8005bc6:	f7fa fc1d 	bl	8000404 <__aeabi_i2d>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bd2:	f7fa fac9 	bl	8000168 <__aeabi_dsub>
 8005bd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bdc:	3330      	adds	r3, #48	; 0x30
 8005bde:	f806 3b01 	strb.w	r3, [r6], #1
 8005be2:	42ae      	cmp	r6, r5
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	d124      	bne.n	8005c34 <_dtoa_r+0x5fc>
 8005bea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bee:	4b1a      	ldr	r3, [pc, #104]	; (8005c58 <_dtoa_r+0x620>)
 8005bf0:	f7fa fabc 	bl	800016c <__adddf3>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bfc:	f7fa fefc 	bl	80009f8 <__aeabi_dcmpgt>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d171      	bne.n	8005ce8 <_dtoa_r+0x6b0>
 8005c04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c08:	2000      	movs	r0, #0
 8005c0a:	4913      	ldr	r1, [pc, #76]	; (8005c58 <_dtoa_r+0x620>)
 8005c0c:	f7fa faac 	bl	8000168 <__aeabi_dsub>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c18:	f7fa fed0 	bl	80009bc <__aeabi_dcmplt>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	f43f af2f 	beq.w	8005a80 <_dtoa_r+0x448>
 8005c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c26:	1e6a      	subs	r2, r5, #1
 8005c28:	2b30      	cmp	r3, #48	; 0x30
 8005c2a:	d001      	beq.n	8005c30 <_dtoa_r+0x5f8>
 8005c2c:	46ba      	mov	sl, r7
 8005c2e:	e04a      	b.n	8005cc6 <_dtoa_r+0x68e>
 8005c30:	4615      	mov	r5, r2
 8005c32:	e7f6      	b.n	8005c22 <_dtoa_r+0x5ea>
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <_dtoa_r+0x614>)
 8005c36:	f7fa fc4f 	bl	80004d8 <__aeabi_dmul>
 8005c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c3e:	e7bd      	b.n	8005bbc <_dtoa_r+0x584>
 8005c40:	08008268 	.word	0x08008268
 8005c44:	08008240 	.word	0x08008240
 8005c48:	3ff00000 	.word	0x3ff00000
 8005c4c:	40240000 	.word	0x40240000
 8005c50:	401c0000 	.word	0x401c0000
 8005c54:	40140000 	.word	0x40140000
 8005c58:	3fe00000 	.word	0x3fe00000
 8005c5c:	9d06      	ldr	r5, [sp, #24]
 8005c5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c66:	4630      	mov	r0, r6
 8005c68:	4639      	mov	r1, r7
 8005c6a:	f7fa fd5f 	bl	800072c <__aeabi_ddiv>
 8005c6e:	f7fa fee3 	bl	8000a38 <__aeabi_d2iz>
 8005c72:	4681      	mov	r9, r0
 8005c74:	f7fa fbc6 	bl	8000404 <__aeabi_i2d>
 8005c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c7c:	f7fa fc2c 	bl	80004d8 <__aeabi_dmul>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4630      	mov	r0, r6
 8005c86:	4639      	mov	r1, r7
 8005c88:	f7fa fa6e 	bl	8000168 <__aeabi_dsub>
 8005c8c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005c90:	f805 6b01 	strb.w	r6, [r5], #1
 8005c94:	9e06      	ldr	r6, [sp, #24]
 8005c96:	4602      	mov	r2, r0
 8005c98:	1bae      	subs	r6, r5, r6
 8005c9a:	45b0      	cmp	r8, r6
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	d135      	bne.n	8005d0c <_dtoa_r+0x6d4>
 8005ca0:	f7fa fa64 	bl	800016c <__adddf3>
 8005ca4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ca8:	4606      	mov	r6, r0
 8005caa:	460f      	mov	r7, r1
 8005cac:	f7fa fea4 	bl	80009f8 <__aeabi_dcmpgt>
 8005cb0:	b9c8      	cbnz	r0, 8005ce6 <_dtoa_r+0x6ae>
 8005cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	4639      	mov	r1, r7
 8005cba:	f7fa fe75 	bl	80009a8 <__aeabi_dcmpeq>
 8005cbe:	b110      	cbz	r0, 8005cc6 <_dtoa_r+0x68e>
 8005cc0:	f019 0f01 	tst.w	r9, #1
 8005cc4:	d10f      	bne.n	8005ce6 <_dtoa_r+0x6ae>
 8005cc6:	4659      	mov	r1, fp
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 facc 	bl	8006266 <_Bfree>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cd2:	702b      	strb	r3, [r5, #0]
 8005cd4:	f10a 0301 	add.w	r3, sl, #1
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f43f acf3 	beq.w	80056c8 <_dtoa_r+0x90>
 8005ce2:	601d      	str	r5, [r3, #0]
 8005ce4:	e4f0      	b.n	80056c8 <_dtoa_r+0x90>
 8005ce6:	4657      	mov	r7, sl
 8005ce8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005cec:	1e6b      	subs	r3, r5, #1
 8005cee:	2a39      	cmp	r2, #57	; 0x39
 8005cf0:	d106      	bne.n	8005d00 <_dtoa_r+0x6c8>
 8005cf2:	9a06      	ldr	r2, [sp, #24]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d107      	bne.n	8005d08 <_dtoa_r+0x6d0>
 8005cf8:	2330      	movs	r3, #48	; 0x30
 8005cfa:	7013      	strb	r3, [r2, #0]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	3701      	adds	r7, #1
 8005d00:	781a      	ldrb	r2, [r3, #0]
 8005d02:	3201      	adds	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	e791      	b.n	8005c2c <_dtoa_r+0x5f4>
 8005d08:	461d      	mov	r5, r3
 8005d0a:	e7ed      	b.n	8005ce8 <_dtoa_r+0x6b0>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4b99      	ldr	r3, [pc, #612]	; (8005f74 <_dtoa_r+0x93c>)
 8005d10:	f7fa fbe2 	bl	80004d8 <__aeabi_dmul>
 8005d14:	2200      	movs	r2, #0
 8005d16:	2300      	movs	r3, #0
 8005d18:	4606      	mov	r6, r0
 8005d1a:	460f      	mov	r7, r1
 8005d1c:	f7fa fe44 	bl	80009a8 <__aeabi_dcmpeq>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d09e      	beq.n	8005c62 <_dtoa_r+0x62a>
 8005d24:	e7cf      	b.n	8005cc6 <_dtoa_r+0x68e>
 8005d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d28:	2a00      	cmp	r2, #0
 8005d2a:	f000 8088 	beq.w	8005e3e <_dtoa_r+0x806>
 8005d2e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d30:	2a01      	cmp	r2, #1
 8005d32:	dc6d      	bgt.n	8005e10 <_dtoa_r+0x7d8>
 8005d34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d36:	2a00      	cmp	r2, #0
 8005d38:	d066      	beq.n	8005e08 <_dtoa_r+0x7d0>
 8005d3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d3e:	464d      	mov	r5, r9
 8005d40:	9e08      	ldr	r6, [sp, #32]
 8005d42:	9a07      	ldr	r2, [sp, #28]
 8005d44:	2101      	movs	r1, #1
 8005d46:	441a      	add	r2, r3
 8005d48:	4620      	mov	r0, r4
 8005d4a:	4499      	add	r9, r3
 8005d4c:	9207      	str	r2, [sp, #28]
 8005d4e:	f000 fb2a 	bl	80063a6 <__i2b>
 8005d52:	4607      	mov	r7, r0
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	dd0b      	ble.n	8005d70 <_dtoa_r+0x738>
 8005d58:	9b07      	ldr	r3, [sp, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	dd08      	ble.n	8005d70 <_dtoa_r+0x738>
 8005d5e:	42ab      	cmp	r3, r5
 8005d60:	bfa8      	it	ge
 8005d62:	462b      	movge	r3, r5
 8005d64:	9a07      	ldr	r2, [sp, #28]
 8005d66:	eba9 0903 	sub.w	r9, r9, r3
 8005d6a:	1aed      	subs	r5, r5, r3
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	9307      	str	r3, [sp, #28]
 8005d70:	9b08      	ldr	r3, [sp, #32]
 8005d72:	b1eb      	cbz	r3, 8005db0 <_dtoa_r+0x778>
 8005d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d065      	beq.n	8005e46 <_dtoa_r+0x80e>
 8005d7a:	b18e      	cbz	r6, 8005da0 <_dtoa_r+0x768>
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	4632      	mov	r2, r6
 8005d80:	4620      	mov	r0, r4
 8005d82:	f000 fbaf 	bl	80064e4 <__pow5mult>
 8005d86:	465a      	mov	r2, fp
 8005d88:	4601      	mov	r1, r0
 8005d8a:	4607      	mov	r7, r0
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f000 fb13 	bl	80063b8 <__multiply>
 8005d92:	4659      	mov	r1, fp
 8005d94:	900a      	str	r0, [sp, #40]	; 0x28
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 fa65 	bl	8006266 <_Bfree>
 8005d9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d9e:	469b      	mov	fp, r3
 8005da0:	9b08      	ldr	r3, [sp, #32]
 8005da2:	1b9a      	subs	r2, r3, r6
 8005da4:	d004      	beq.n	8005db0 <_dtoa_r+0x778>
 8005da6:	4659      	mov	r1, fp
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fb9b 	bl	80064e4 <__pow5mult>
 8005dae:	4683      	mov	fp, r0
 8005db0:	2101      	movs	r1, #1
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 faf7 	bl	80063a6 <__i2b>
 8005db8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dba:	4606      	mov	r6, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 81c6 	beq.w	800614e <_dtoa_r+0xb16>
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4601      	mov	r1, r0
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 fb8c 	bl	80064e4 <__pow5mult>
 8005dcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005dce:	4606      	mov	r6, r0
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	dc3e      	bgt.n	8005e52 <_dtoa_r+0x81a>
 8005dd4:	9b02      	ldr	r3, [sp, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d137      	bne.n	8005e4a <_dtoa_r+0x812>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d134      	bne.n	8005e4e <_dtoa_r+0x816>
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dea:	0d1b      	lsrs	r3, r3, #20
 8005dec:	051b      	lsls	r3, r3, #20
 8005dee:	b12b      	cbz	r3, 8005dfc <_dtoa_r+0x7c4>
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	f109 0901 	add.w	r9, r9, #1
 8005df6:	3301      	adds	r3, #1
 8005df8:	9307      	str	r3, [sp, #28]
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	9308      	str	r3, [sp, #32]
 8005dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d128      	bne.n	8005e56 <_dtoa_r+0x81e>
 8005e04:	2001      	movs	r0, #1
 8005e06:	e02e      	b.n	8005e66 <_dtoa_r+0x82e>
 8005e08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e0e:	e796      	b.n	8005d3e <_dtoa_r+0x706>
 8005e10:	9b08      	ldr	r3, [sp, #32]
 8005e12:	f108 36ff 	add.w	r6, r8, #4294967295
 8005e16:	42b3      	cmp	r3, r6
 8005e18:	bfb7      	itett	lt
 8005e1a:	9b08      	ldrlt	r3, [sp, #32]
 8005e1c:	1b9e      	subge	r6, r3, r6
 8005e1e:	1af2      	sublt	r2, r6, r3
 8005e20:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005e22:	bfbf      	itttt	lt
 8005e24:	9608      	strlt	r6, [sp, #32]
 8005e26:	189b      	addlt	r3, r3, r2
 8005e28:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005e2a:	2600      	movlt	r6, #0
 8005e2c:	f1b8 0f00 	cmp.w	r8, #0
 8005e30:	bfb9      	ittee	lt
 8005e32:	eba9 0508 	sublt.w	r5, r9, r8
 8005e36:	2300      	movlt	r3, #0
 8005e38:	464d      	movge	r5, r9
 8005e3a:	4643      	movge	r3, r8
 8005e3c:	e781      	b.n	8005d42 <_dtoa_r+0x70a>
 8005e3e:	9e08      	ldr	r6, [sp, #32]
 8005e40:	464d      	mov	r5, r9
 8005e42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e44:	e786      	b.n	8005d54 <_dtoa_r+0x71c>
 8005e46:	9a08      	ldr	r2, [sp, #32]
 8005e48:	e7ad      	b.n	8005da6 <_dtoa_r+0x76e>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e7d6      	b.n	8005dfc <_dtoa_r+0x7c4>
 8005e4e:	9b02      	ldr	r3, [sp, #8]
 8005e50:	e7d4      	b.n	8005dfc <_dtoa_r+0x7c4>
 8005e52:	2300      	movs	r3, #0
 8005e54:	9308      	str	r3, [sp, #32]
 8005e56:	6933      	ldr	r3, [r6, #16]
 8005e58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e5c:	6918      	ldr	r0, [r3, #16]
 8005e5e:	f000 fa54 	bl	800630a <__hi0bits>
 8005e62:	f1c0 0020 	rsb	r0, r0, #32
 8005e66:	9b07      	ldr	r3, [sp, #28]
 8005e68:	4418      	add	r0, r3
 8005e6a:	f010 001f 	ands.w	r0, r0, #31
 8005e6e:	d047      	beq.n	8005f00 <_dtoa_r+0x8c8>
 8005e70:	f1c0 0320 	rsb	r3, r0, #32
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	dd3b      	ble.n	8005ef0 <_dtoa_r+0x8b8>
 8005e78:	9b07      	ldr	r3, [sp, #28]
 8005e7a:	f1c0 001c 	rsb	r0, r0, #28
 8005e7e:	4481      	add	r9, r0
 8005e80:	4405      	add	r5, r0
 8005e82:	4403      	add	r3, r0
 8005e84:	9307      	str	r3, [sp, #28]
 8005e86:	f1b9 0f00 	cmp.w	r9, #0
 8005e8a:	dd05      	ble.n	8005e98 <_dtoa_r+0x860>
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	464a      	mov	r2, r9
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 fb75 	bl	8006580 <__lshift>
 8005e96:	4683      	mov	fp, r0
 8005e98:	9b07      	ldr	r3, [sp, #28]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	dd05      	ble.n	8005eaa <_dtoa_r+0x872>
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f000 fb6c 	bl	8006580 <__lshift>
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eac:	b353      	cbz	r3, 8005f04 <_dtoa_r+0x8cc>
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4658      	mov	r0, fp
 8005eb2:	f000 fbb9 	bl	8006628 <__mcmp>
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	da24      	bge.n	8005f04 <_dtoa_r+0x8cc>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	4659      	mov	r1, fp
 8005ebe:	220a      	movs	r2, #10
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f000 f9e7 	bl	8006294 <__multadd>
 8005ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ecc:	4683      	mov	fp, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8144 	beq.w	800615c <_dtoa_r+0xb24>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	220a      	movs	r2, #10
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 f9da 	bl	8006294 <__multadd>
 8005ee0:	9b04      	ldr	r3, [sp, #16]
 8005ee2:	4607      	mov	r7, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dc4d      	bgt.n	8005f84 <_dtoa_r+0x94c>
 8005ee8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	dd4a      	ble.n	8005f84 <_dtoa_r+0x94c>
 8005eee:	e011      	b.n	8005f14 <_dtoa_r+0x8dc>
 8005ef0:	d0c9      	beq.n	8005e86 <_dtoa_r+0x84e>
 8005ef2:	9a07      	ldr	r2, [sp, #28]
 8005ef4:	331c      	adds	r3, #28
 8005ef6:	441a      	add	r2, r3
 8005ef8:	4499      	add	r9, r3
 8005efa:	441d      	add	r5, r3
 8005efc:	4613      	mov	r3, r2
 8005efe:	e7c1      	b.n	8005e84 <_dtoa_r+0x84c>
 8005f00:	4603      	mov	r3, r0
 8005f02:	e7f6      	b.n	8005ef2 <_dtoa_r+0x8ba>
 8005f04:	f1b8 0f00 	cmp.w	r8, #0
 8005f08:	dc36      	bgt.n	8005f78 <_dtoa_r+0x940>
 8005f0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	dd33      	ble.n	8005f78 <_dtoa_r+0x940>
 8005f10:	f8cd 8010 	str.w	r8, [sp, #16]
 8005f14:	9b04      	ldr	r3, [sp, #16]
 8005f16:	b963      	cbnz	r3, 8005f32 <_dtoa_r+0x8fa>
 8005f18:	4631      	mov	r1, r6
 8005f1a:	2205      	movs	r2, #5
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f000 f9b9 	bl	8006294 <__multadd>
 8005f22:	4601      	mov	r1, r0
 8005f24:	4606      	mov	r6, r0
 8005f26:	4658      	mov	r0, fp
 8005f28:	f000 fb7e 	bl	8006628 <__mcmp>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	f73f add3 	bgt.w	8005ad8 <_dtoa_r+0x4a0>
 8005f32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f34:	9d06      	ldr	r5, [sp, #24]
 8005f36:	ea6f 0a03 	mvn.w	sl, r3
 8005f3a:	f04f 0900 	mov.w	r9, #0
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 f990 	bl	8006266 <_Bfree>
 8005f46:	2f00      	cmp	r7, #0
 8005f48:	f43f aebd 	beq.w	8005cc6 <_dtoa_r+0x68e>
 8005f4c:	f1b9 0f00 	cmp.w	r9, #0
 8005f50:	d005      	beq.n	8005f5e <_dtoa_r+0x926>
 8005f52:	45b9      	cmp	r9, r7
 8005f54:	d003      	beq.n	8005f5e <_dtoa_r+0x926>
 8005f56:	4649      	mov	r1, r9
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f000 f984 	bl	8006266 <_Bfree>
 8005f5e:	4639      	mov	r1, r7
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 f980 	bl	8006266 <_Bfree>
 8005f66:	e6ae      	b.n	8005cc6 <_dtoa_r+0x68e>
 8005f68:	2600      	movs	r6, #0
 8005f6a:	4637      	mov	r7, r6
 8005f6c:	e7e1      	b.n	8005f32 <_dtoa_r+0x8fa>
 8005f6e:	46ba      	mov	sl, r7
 8005f70:	4637      	mov	r7, r6
 8005f72:	e5b1      	b.n	8005ad8 <_dtoa_r+0x4a0>
 8005f74:	40240000 	.word	0x40240000
 8005f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f7a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 80f3 	beq.w	800616a <_dtoa_r+0xb32>
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	dd05      	ble.n	8005f94 <_dtoa_r+0x95c>
 8005f88:	4639      	mov	r1, r7
 8005f8a:	462a      	mov	r2, r5
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f000 faf7 	bl	8006580 <__lshift>
 8005f92:	4607      	mov	r7, r0
 8005f94:	9b08      	ldr	r3, [sp, #32]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d04c      	beq.n	8006034 <_dtoa_r+0x9fc>
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 f92e 	bl	80061fe <_Balloc>
 8005fa2:	4605      	mov	r5, r0
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	f107 010c 	add.w	r1, r7, #12
 8005faa:	3202      	adds	r2, #2
 8005fac:	0092      	lsls	r2, r2, #2
 8005fae:	300c      	adds	r0, #12
 8005fb0:	f000 f91a 	bl	80061e8 <memcpy>
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 fae1 	bl	8006580 <__lshift>
 8005fbe:	46b9      	mov	r9, r7
 8005fc0:	4607      	mov	r7, r0
 8005fc2:	9b06      	ldr	r3, [sp, #24]
 8005fc4:	9307      	str	r3, [sp, #28]
 8005fc6:	9b02      	ldr	r3, [sp, #8]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	9308      	str	r3, [sp, #32]
 8005fce:	4631      	mov	r1, r6
 8005fd0:	4658      	mov	r0, fp
 8005fd2:	f7ff faa1 	bl	8005518 <quorem>
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	4605      	mov	r5, r0
 8005fda:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005fde:	4658      	mov	r0, fp
 8005fe0:	f000 fb22 	bl	8006628 <__mcmp>
 8005fe4:	463a      	mov	r2, r7
 8005fe6:	9002      	str	r0, [sp, #8]
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4620      	mov	r0, r4
 8005fec:	f000 fb36 	bl	800665c <__mdiff>
 8005ff0:	68c3      	ldr	r3, [r0, #12]
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	bb03      	cbnz	r3, 8006038 <_dtoa_r+0xa00>
 8005ff6:	4601      	mov	r1, r0
 8005ff8:	9009      	str	r0, [sp, #36]	; 0x24
 8005ffa:	4658      	mov	r0, fp
 8005ffc:	f000 fb14 	bl	8006628 <__mcmp>
 8006000:	4603      	mov	r3, r0
 8006002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006004:	4611      	mov	r1, r2
 8006006:	4620      	mov	r0, r4
 8006008:	9309      	str	r3, [sp, #36]	; 0x24
 800600a:	f000 f92c 	bl	8006266 <_Bfree>
 800600e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006010:	b9a3      	cbnz	r3, 800603c <_dtoa_r+0xa04>
 8006012:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006014:	b992      	cbnz	r2, 800603c <_dtoa_r+0xa04>
 8006016:	9a08      	ldr	r2, [sp, #32]
 8006018:	b982      	cbnz	r2, 800603c <_dtoa_r+0xa04>
 800601a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800601e:	d029      	beq.n	8006074 <_dtoa_r+0xa3c>
 8006020:	9b02      	ldr	r3, [sp, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	dd01      	ble.n	800602a <_dtoa_r+0x9f2>
 8006026:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800602a:	9b07      	ldr	r3, [sp, #28]
 800602c:	1c5d      	adds	r5, r3, #1
 800602e:	f883 8000 	strb.w	r8, [r3]
 8006032:	e784      	b.n	8005f3e <_dtoa_r+0x906>
 8006034:	4638      	mov	r0, r7
 8006036:	e7c2      	b.n	8005fbe <_dtoa_r+0x986>
 8006038:	2301      	movs	r3, #1
 800603a:	e7e3      	b.n	8006004 <_dtoa_r+0x9cc>
 800603c:	9a02      	ldr	r2, [sp, #8]
 800603e:	2a00      	cmp	r2, #0
 8006040:	db04      	blt.n	800604c <_dtoa_r+0xa14>
 8006042:	d123      	bne.n	800608c <_dtoa_r+0xa54>
 8006044:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006046:	bb0a      	cbnz	r2, 800608c <_dtoa_r+0xa54>
 8006048:	9a08      	ldr	r2, [sp, #32]
 800604a:	b9fa      	cbnz	r2, 800608c <_dtoa_r+0xa54>
 800604c:	2b00      	cmp	r3, #0
 800604e:	ddec      	ble.n	800602a <_dtoa_r+0x9f2>
 8006050:	4659      	mov	r1, fp
 8006052:	2201      	movs	r2, #1
 8006054:	4620      	mov	r0, r4
 8006056:	f000 fa93 	bl	8006580 <__lshift>
 800605a:	4631      	mov	r1, r6
 800605c:	4683      	mov	fp, r0
 800605e:	f000 fae3 	bl	8006628 <__mcmp>
 8006062:	2800      	cmp	r0, #0
 8006064:	dc03      	bgt.n	800606e <_dtoa_r+0xa36>
 8006066:	d1e0      	bne.n	800602a <_dtoa_r+0x9f2>
 8006068:	f018 0f01 	tst.w	r8, #1
 800606c:	d0dd      	beq.n	800602a <_dtoa_r+0x9f2>
 800606e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006072:	d1d8      	bne.n	8006026 <_dtoa_r+0x9ee>
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	9a07      	ldr	r2, [sp, #28]
 8006078:	1c5d      	adds	r5, r3, #1
 800607a:	2339      	movs	r3, #57	; 0x39
 800607c:	7013      	strb	r3, [r2, #0]
 800607e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006082:	1e6a      	subs	r2, r5, #1
 8006084:	2b39      	cmp	r3, #57	; 0x39
 8006086:	d04d      	beq.n	8006124 <_dtoa_r+0xaec>
 8006088:	3301      	adds	r3, #1
 800608a:	e052      	b.n	8006132 <_dtoa_r+0xafa>
 800608c:	9a07      	ldr	r2, [sp, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f102 0501 	add.w	r5, r2, #1
 8006094:	dd06      	ble.n	80060a4 <_dtoa_r+0xa6c>
 8006096:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800609a:	d0eb      	beq.n	8006074 <_dtoa_r+0xa3c>
 800609c:	f108 0801 	add.w	r8, r8, #1
 80060a0:	9b07      	ldr	r3, [sp, #28]
 80060a2:	e7c4      	b.n	800602e <_dtoa_r+0x9f6>
 80060a4:	9b06      	ldr	r3, [sp, #24]
 80060a6:	9a04      	ldr	r2, [sp, #16]
 80060a8:	1aeb      	subs	r3, r5, r3
 80060aa:	4293      	cmp	r3, r2
 80060ac:	f805 8c01 	strb.w	r8, [r5, #-1]
 80060b0:	d021      	beq.n	80060f6 <_dtoa_r+0xabe>
 80060b2:	4659      	mov	r1, fp
 80060b4:	2300      	movs	r3, #0
 80060b6:	220a      	movs	r2, #10
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 f8eb 	bl	8006294 <__multadd>
 80060be:	45b9      	cmp	r9, r7
 80060c0:	4683      	mov	fp, r0
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	f04f 020a 	mov.w	r2, #10
 80060ca:	4649      	mov	r1, r9
 80060cc:	4620      	mov	r0, r4
 80060ce:	d105      	bne.n	80060dc <_dtoa_r+0xaa4>
 80060d0:	f000 f8e0 	bl	8006294 <__multadd>
 80060d4:	4681      	mov	r9, r0
 80060d6:	4607      	mov	r7, r0
 80060d8:	9507      	str	r5, [sp, #28]
 80060da:	e778      	b.n	8005fce <_dtoa_r+0x996>
 80060dc:	f000 f8da 	bl	8006294 <__multadd>
 80060e0:	4639      	mov	r1, r7
 80060e2:	4681      	mov	r9, r0
 80060e4:	2300      	movs	r3, #0
 80060e6:	220a      	movs	r2, #10
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 f8d3 	bl	8006294 <__multadd>
 80060ee:	4607      	mov	r7, r0
 80060f0:	e7f2      	b.n	80060d8 <_dtoa_r+0xaa0>
 80060f2:	f04f 0900 	mov.w	r9, #0
 80060f6:	4659      	mov	r1, fp
 80060f8:	2201      	movs	r2, #1
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 fa40 	bl	8006580 <__lshift>
 8006100:	4631      	mov	r1, r6
 8006102:	4683      	mov	fp, r0
 8006104:	f000 fa90 	bl	8006628 <__mcmp>
 8006108:	2800      	cmp	r0, #0
 800610a:	dcb8      	bgt.n	800607e <_dtoa_r+0xa46>
 800610c:	d102      	bne.n	8006114 <_dtoa_r+0xadc>
 800610e:	f018 0f01 	tst.w	r8, #1
 8006112:	d1b4      	bne.n	800607e <_dtoa_r+0xa46>
 8006114:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006118:	1e6a      	subs	r2, r5, #1
 800611a:	2b30      	cmp	r3, #48	; 0x30
 800611c:	f47f af0f 	bne.w	8005f3e <_dtoa_r+0x906>
 8006120:	4615      	mov	r5, r2
 8006122:	e7f7      	b.n	8006114 <_dtoa_r+0xadc>
 8006124:	9b06      	ldr	r3, [sp, #24]
 8006126:	4293      	cmp	r3, r2
 8006128:	d105      	bne.n	8006136 <_dtoa_r+0xafe>
 800612a:	2331      	movs	r3, #49	; 0x31
 800612c:	9a06      	ldr	r2, [sp, #24]
 800612e:	f10a 0a01 	add.w	sl, sl, #1
 8006132:	7013      	strb	r3, [r2, #0]
 8006134:	e703      	b.n	8005f3e <_dtoa_r+0x906>
 8006136:	4615      	mov	r5, r2
 8006138:	e7a1      	b.n	800607e <_dtoa_r+0xa46>
 800613a:	4b17      	ldr	r3, [pc, #92]	; (8006198 <_dtoa_r+0xb60>)
 800613c:	f7ff bae1 	b.w	8005702 <_dtoa_r+0xca>
 8006140:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006142:	2b00      	cmp	r3, #0
 8006144:	f47f aabb 	bne.w	80056be <_dtoa_r+0x86>
 8006148:	4b14      	ldr	r3, [pc, #80]	; (800619c <_dtoa_r+0xb64>)
 800614a:	f7ff bada 	b.w	8005702 <_dtoa_r+0xca>
 800614e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006150:	2b01      	cmp	r3, #1
 8006152:	f77f ae3f 	ble.w	8005dd4 <_dtoa_r+0x79c>
 8006156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006158:	9308      	str	r3, [sp, #32]
 800615a:	e653      	b.n	8005e04 <_dtoa_r+0x7cc>
 800615c:	9b04      	ldr	r3, [sp, #16]
 800615e:	2b00      	cmp	r3, #0
 8006160:	dc03      	bgt.n	800616a <_dtoa_r+0xb32>
 8006162:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006164:	2b02      	cmp	r3, #2
 8006166:	f73f aed5 	bgt.w	8005f14 <_dtoa_r+0x8dc>
 800616a:	9d06      	ldr	r5, [sp, #24]
 800616c:	4631      	mov	r1, r6
 800616e:	4658      	mov	r0, fp
 8006170:	f7ff f9d2 	bl	8005518 <quorem>
 8006174:	9b06      	ldr	r3, [sp, #24]
 8006176:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800617a:	f805 8b01 	strb.w	r8, [r5], #1
 800617e:	9a04      	ldr	r2, [sp, #16]
 8006180:	1aeb      	subs	r3, r5, r3
 8006182:	429a      	cmp	r2, r3
 8006184:	ddb5      	ble.n	80060f2 <_dtoa_r+0xaba>
 8006186:	4659      	mov	r1, fp
 8006188:	2300      	movs	r3, #0
 800618a:	220a      	movs	r2, #10
 800618c:	4620      	mov	r0, r4
 800618e:	f000 f881 	bl	8006294 <__multadd>
 8006192:	4683      	mov	fp, r0
 8006194:	e7ea      	b.n	800616c <_dtoa_r+0xb34>
 8006196:	bf00      	nop
 8006198:	0800820c 	.word	0x0800820c
 800619c:	08008230 	.word	0x08008230

080061a0 <_localeconv_r>:
 80061a0:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <_localeconv_r+0x14>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a18      	ldr	r0, [r3, #32]
 80061a6:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <_localeconv_r+0x18>)
 80061a8:	2800      	cmp	r0, #0
 80061aa:	bf08      	it	eq
 80061ac:	4618      	moveq	r0, r3
 80061ae:	30f0      	adds	r0, #240	; 0xf0
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000024 	.word	0x20000024
 80061b8:	20000088 	.word	0x20000088

080061bc <malloc>:
 80061bc:	4b02      	ldr	r3, [pc, #8]	; (80061c8 <malloc+0xc>)
 80061be:	4601      	mov	r1, r0
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	f000 bb53 	b.w	800686c <_malloc_r>
 80061c6:	bf00      	nop
 80061c8:	20000024 	.word	0x20000024

080061cc <memchr>:
 80061cc:	b510      	push	{r4, lr}
 80061ce:	b2c9      	uxtb	r1, r1
 80061d0:	4402      	add	r2, r0
 80061d2:	4290      	cmp	r0, r2
 80061d4:	4603      	mov	r3, r0
 80061d6:	d101      	bne.n	80061dc <memchr+0x10>
 80061d8:	2300      	movs	r3, #0
 80061da:	e003      	b.n	80061e4 <memchr+0x18>
 80061dc:	781c      	ldrb	r4, [r3, #0]
 80061de:	3001      	adds	r0, #1
 80061e0:	428c      	cmp	r4, r1
 80061e2:	d1f6      	bne.n	80061d2 <memchr+0x6>
 80061e4:	4618      	mov	r0, r3
 80061e6:	bd10      	pop	{r4, pc}

080061e8 <memcpy>:
 80061e8:	b510      	push	{r4, lr}
 80061ea:	1e43      	subs	r3, r0, #1
 80061ec:	440a      	add	r2, r1
 80061ee:	4291      	cmp	r1, r2
 80061f0:	d100      	bne.n	80061f4 <memcpy+0xc>
 80061f2:	bd10      	pop	{r4, pc}
 80061f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061fc:	e7f7      	b.n	80061ee <memcpy+0x6>

080061fe <_Balloc>:
 80061fe:	b570      	push	{r4, r5, r6, lr}
 8006200:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006202:	4604      	mov	r4, r0
 8006204:	460e      	mov	r6, r1
 8006206:	b93d      	cbnz	r5, 8006218 <_Balloc+0x1a>
 8006208:	2010      	movs	r0, #16
 800620a:	f7ff ffd7 	bl	80061bc <malloc>
 800620e:	6260      	str	r0, [r4, #36]	; 0x24
 8006210:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006214:	6005      	str	r5, [r0, #0]
 8006216:	60c5      	str	r5, [r0, #12]
 8006218:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800621a:	68eb      	ldr	r3, [r5, #12]
 800621c:	b183      	cbz	r3, 8006240 <_Balloc+0x42>
 800621e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006226:	b9b8      	cbnz	r0, 8006258 <_Balloc+0x5a>
 8006228:	2101      	movs	r1, #1
 800622a:	fa01 f506 	lsl.w	r5, r1, r6
 800622e:	1d6a      	adds	r2, r5, #5
 8006230:	0092      	lsls	r2, r2, #2
 8006232:	4620      	mov	r0, r4
 8006234:	f000 fabf 	bl	80067b6 <_calloc_r>
 8006238:	b160      	cbz	r0, 8006254 <_Balloc+0x56>
 800623a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800623e:	e00e      	b.n	800625e <_Balloc+0x60>
 8006240:	2221      	movs	r2, #33	; 0x21
 8006242:	2104      	movs	r1, #4
 8006244:	4620      	mov	r0, r4
 8006246:	f000 fab6 	bl	80067b6 <_calloc_r>
 800624a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800624c:	60e8      	str	r0, [r5, #12]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e4      	bne.n	800621e <_Balloc+0x20>
 8006254:	2000      	movs	r0, #0
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	6802      	ldr	r2, [r0, #0]
 800625a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800625e:	2300      	movs	r3, #0
 8006260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006264:	e7f7      	b.n	8006256 <_Balloc+0x58>

08006266 <_Bfree>:
 8006266:	b570      	push	{r4, r5, r6, lr}
 8006268:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800626a:	4606      	mov	r6, r0
 800626c:	460d      	mov	r5, r1
 800626e:	b93c      	cbnz	r4, 8006280 <_Bfree+0x1a>
 8006270:	2010      	movs	r0, #16
 8006272:	f7ff ffa3 	bl	80061bc <malloc>
 8006276:	6270      	str	r0, [r6, #36]	; 0x24
 8006278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800627c:	6004      	str	r4, [r0, #0]
 800627e:	60c4      	str	r4, [r0, #12]
 8006280:	b13d      	cbz	r5, 8006292 <_Bfree+0x2c>
 8006282:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006284:	686a      	ldr	r2, [r5, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800628c:	6029      	str	r1, [r5, #0]
 800628e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006292:	bd70      	pop	{r4, r5, r6, pc}

08006294 <__multadd>:
 8006294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006298:	461f      	mov	r7, r3
 800629a:	4606      	mov	r6, r0
 800629c:	460c      	mov	r4, r1
 800629e:	2300      	movs	r3, #0
 80062a0:	690d      	ldr	r5, [r1, #16]
 80062a2:	f101 0c14 	add.w	ip, r1, #20
 80062a6:	f8dc 0000 	ldr.w	r0, [ip]
 80062aa:	3301      	adds	r3, #1
 80062ac:	b281      	uxth	r1, r0
 80062ae:	fb02 7101 	mla	r1, r2, r1, r7
 80062b2:	0c00      	lsrs	r0, r0, #16
 80062b4:	0c0f      	lsrs	r7, r1, #16
 80062b6:	fb02 7000 	mla	r0, r2, r0, r7
 80062ba:	b289      	uxth	r1, r1
 80062bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80062c0:	429d      	cmp	r5, r3
 80062c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80062c6:	f84c 1b04 	str.w	r1, [ip], #4
 80062ca:	dcec      	bgt.n	80062a6 <__multadd+0x12>
 80062cc:	b1d7      	cbz	r7, 8006304 <__multadd+0x70>
 80062ce:	68a3      	ldr	r3, [r4, #8]
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dc12      	bgt.n	80062fa <__multadd+0x66>
 80062d4:	6861      	ldr	r1, [r4, #4]
 80062d6:	4630      	mov	r0, r6
 80062d8:	3101      	adds	r1, #1
 80062da:	f7ff ff90 	bl	80061fe <_Balloc>
 80062de:	4680      	mov	r8, r0
 80062e0:	6922      	ldr	r2, [r4, #16]
 80062e2:	f104 010c 	add.w	r1, r4, #12
 80062e6:	3202      	adds	r2, #2
 80062e8:	0092      	lsls	r2, r2, #2
 80062ea:	300c      	adds	r0, #12
 80062ec:	f7ff ff7c 	bl	80061e8 <memcpy>
 80062f0:	4621      	mov	r1, r4
 80062f2:	4630      	mov	r0, r6
 80062f4:	f7ff ffb7 	bl	8006266 <_Bfree>
 80062f8:	4644      	mov	r4, r8
 80062fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062fe:	3501      	adds	r5, #1
 8006300:	615f      	str	r7, [r3, #20]
 8006302:	6125      	str	r5, [r4, #16]
 8006304:	4620      	mov	r0, r4
 8006306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800630a <__hi0bits>:
 800630a:	0c02      	lsrs	r2, r0, #16
 800630c:	0412      	lsls	r2, r2, #16
 800630e:	4603      	mov	r3, r0
 8006310:	b9b2      	cbnz	r2, 8006340 <__hi0bits+0x36>
 8006312:	0403      	lsls	r3, r0, #16
 8006314:	2010      	movs	r0, #16
 8006316:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800631a:	bf04      	itt	eq
 800631c:	021b      	lsleq	r3, r3, #8
 800631e:	3008      	addeq	r0, #8
 8006320:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006324:	bf04      	itt	eq
 8006326:	011b      	lsleq	r3, r3, #4
 8006328:	3004      	addeq	r0, #4
 800632a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800632e:	bf04      	itt	eq
 8006330:	009b      	lsleq	r3, r3, #2
 8006332:	3002      	addeq	r0, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	db06      	blt.n	8006346 <__hi0bits+0x3c>
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	d503      	bpl.n	8006344 <__hi0bits+0x3a>
 800633c:	3001      	adds	r0, #1
 800633e:	4770      	bx	lr
 8006340:	2000      	movs	r0, #0
 8006342:	e7e8      	b.n	8006316 <__hi0bits+0xc>
 8006344:	2020      	movs	r0, #32
 8006346:	4770      	bx	lr

08006348 <__lo0bits>:
 8006348:	6803      	ldr	r3, [r0, #0]
 800634a:	4601      	mov	r1, r0
 800634c:	f013 0207 	ands.w	r2, r3, #7
 8006350:	d00b      	beq.n	800636a <__lo0bits+0x22>
 8006352:	07da      	lsls	r2, r3, #31
 8006354:	d423      	bmi.n	800639e <__lo0bits+0x56>
 8006356:	0798      	lsls	r0, r3, #30
 8006358:	bf49      	itett	mi
 800635a:	085b      	lsrmi	r3, r3, #1
 800635c:	089b      	lsrpl	r3, r3, #2
 800635e:	2001      	movmi	r0, #1
 8006360:	600b      	strmi	r3, [r1, #0]
 8006362:	bf5c      	itt	pl
 8006364:	600b      	strpl	r3, [r1, #0]
 8006366:	2002      	movpl	r0, #2
 8006368:	4770      	bx	lr
 800636a:	b298      	uxth	r0, r3
 800636c:	b9a8      	cbnz	r0, 800639a <__lo0bits+0x52>
 800636e:	2010      	movs	r0, #16
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006376:	bf04      	itt	eq
 8006378:	0a1b      	lsreq	r3, r3, #8
 800637a:	3008      	addeq	r0, #8
 800637c:	071a      	lsls	r2, r3, #28
 800637e:	bf04      	itt	eq
 8006380:	091b      	lsreq	r3, r3, #4
 8006382:	3004      	addeq	r0, #4
 8006384:	079a      	lsls	r2, r3, #30
 8006386:	bf04      	itt	eq
 8006388:	089b      	lsreq	r3, r3, #2
 800638a:	3002      	addeq	r0, #2
 800638c:	07da      	lsls	r2, r3, #31
 800638e:	d402      	bmi.n	8006396 <__lo0bits+0x4e>
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	d006      	beq.n	80063a2 <__lo0bits+0x5a>
 8006394:	3001      	adds	r0, #1
 8006396:	600b      	str	r3, [r1, #0]
 8006398:	4770      	bx	lr
 800639a:	4610      	mov	r0, r2
 800639c:	e7e9      	b.n	8006372 <__lo0bits+0x2a>
 800639e:	2000      	movs	r0, #0
 80063a0:	4770      	bx	lr
 80063a2:	2020      	movs	r0, #32
 80063a4:	4770      	bx	lr

080063a6 <__i2b>:
 80063a6:	b510      	push	{r4, lr}
 80063a8:	460c      	mov	r4, r1
 80063aa:	2101      	movs	r1, #1
 80063ac:	f7ff ff27 	bl	80061fe <_Balloc>
 80063b0:	2201      	movs	r2, #1
 80063b2:	6144      	str	r4, [r0, #20]
 80063b4:	6102      	str	r2, [r0, #16]
 80063b6:	bd10      	pop	{r4, pc}

080063b8 <__multiply>:
 80063b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	4614      	mov	r4, r2
 80063be:	690a      	ldr	r2, [r1, #16]
 80063c0:	6923      	ldr	r3, [r4, #16]
 80063c2:	4688      	mov	r8, r1
 80063c4:	429a      	cmp	r2, r3
 80063c6:	bfbe      	ittt	lt
 80063c8:	460b      	movlt	r3, r1
 80063ca:	46a0      	movlt	r8, r4
 80063cc:	461c      	movlt	r4, r3
 80063ce:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80063d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80063d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063da:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80063de:	eb07 0609 	add.w	r6, r7, r9
 80063e2:	42b3      	cmp	r3, r6
 80063e4:	bfb8      	it	lt
 80063e6:	3101      	addlt	r1, #1
 80063e8:	f7ff ff09 	bl	80061fe <_Balloc>
 80063ec:	f100 0514 	add.w	r5, r0, #20
 80063f0:	462b      	mov	r3, r5
 80063f2:	2200      	movs	r2, #0
 80063f4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80063f8:	4573      	cmp	r3, lr
 80063fa:	d316      	bcc.n	800642a <__multiply+0x72>
 80063fc:	f104 0214 	add.w	r2, r4, #20
 8006400:	f108 0114 	add.w	r1, r8, #20
 8006404:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006408:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	9b00      	ldr	r3, [sp, #0]
 8006410:	9201      	str	r2, [sp, #4]
 8006412:	4293      	cmp	r3, r2
 8006414:	d80c      	bhi.n	8006430 <__multiply+0x78>
 8006416:	2e00      	cmp	r6, #0
 8006418:	dd03      	ble.n	8006422 <__multiply+0x6a>
 800641a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800641e:	2b00      	cmp	r3, #0
 8006420:	d05d      	beq.n	80064de <__multiply+0x126>
 8006422:	6106      	str	r6, [r0, #16]
 8006424:	b003      	add	sp, #12
 8006426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642a:	f843 2b04 	str.w	r2, [r3], #4
 800642e:	e7e3      	b.n	80063f8 <__multiply+0x40>
 8006430:	f8b2 b000 	ldrh.w	fp, [r2]
 8006434:	f1bb 0f00 	cmp.w	fp, #0
 8006438:	d023      	beq.n	8006482 <__multiply+0xca>
 800643a:	4689      	mov	r9, r1
 800643c:	46ac      	mov	ip, r5
 800643e:	f04f 0800 	mov.w	r8, #0
 8006442:	f859 4b04 	ldr.w	r4, [r9], #4
 8006446:	f8dc a000 	ldr.w	sl, [ip]
 800644a:	b2a3      	uxth	r3, r4
 800644c:	fa1f fa8a 	uxth.w	sl, sl
 8006450:	fb0b a303 	mla	r3, fp, r3, sl
 8006454:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006458:	f8dc 4000 	ldr.w	r4, [ip]
 800645c:	4443      	add	r3, r8
 800645e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006462:	fb0b 840a 	mla	r4, fp, sl, r8
 8006466:	46e2      	mov	sl, ip
 8006468:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800646c:	b29b      	uxth	r3, r3
 800646e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006472:	454f      	cmp	r7, r9
 8006474:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006478:	f84a 3b04 	str.w	r3, [sl], #4
 800647c:	d82b      	bhi.n	80064d6 <__multiply+0x11e>
 800647e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	3204      	adds	r2, #4
 8006486:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800648a:	f1ba 0f00 	cmp.w	sl, #0
 800648e:	d020      	beq.n	80064d2 <__multiply+0x11a>
 8006490:	4689      	mov	r9, r1
 8006492:	46a8      	mov	r8, r5
 8006494:	f04f 0b00 	mov.w	fp, #0
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	f8b9 c000 	ldrh.w	ip, [r9]
 800649e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	fb0a 440c 	mla	r4, sl, ip, r4
 80064a8:	46c4      	mov	ip, r8
 80064aa:	445c      	add	r4, fp
 80064ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80064b0:	f84c 3b04 	str.w	r3, [ip], #4
 80064b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80064b8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80064bc:	0c1b      	lsrs	r3, r3, #16
 80064be:	fb0a b303 	mla	r3, sl, r3, fp
 80064c2:	454f      	cmp	r7, r9
 80064c4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80064c8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80064cc:	d805      	bhi.n	80064da <__multiply+0x122>
 80064ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80064d2:	3504      	adds	r5, #4
 80064d4:	e79b      	b.n	800640e <__multiply+0x56>
 80064d6:	46d4      	mov	ip, sl
 80064d8:	e7b3      	b.n	8006442 <__multiply+0x8a>
 80064da:	46e0      	mov	r8, ip
 80064dc:	e7dd      	b.n	800649a <__multiply+0xe2>
 80064de:	3e01      	subs	r6, #1
 80064e0:	e799      	b.n	8006416 <__multiply+0x5e>
	...

080064e4 <__pow5mult>:
 80064e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e8:	4615      	mov	r5, r2
 80064ea:	f012 0203 	ands.w	r2, r2, #3
 80064ee:	4606      	mov	r6, r0
 80064f0:	460f      	mov	r7, r1
 80064f2:	d007      	beq.n	8006504 <__pow5mult+0x20>
 80064f4:	4c21      	ldr	r4, [pc, #132]	; (800657c <__pow5mult+0x98>)
 80064f6:	3a01      	subs	r2, #1
 80064f8:	2300      	movs	r3, #0
 80064fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064fe:	f7ff fec9 	bl	8006294 <__multadd>
 8006502:	4607      	mov	r7, r0
 8006504:	10ad      	asrs	r5, r5, #2
 8006506:	d035      	beq.n	8006574 <__pow5mult+0x90>
 8006508:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800650a:	b93c      	cbnz	r4, 800651c <__pow5mult+0x38>
 800650c:	2010      	movs	r0, #16
 800650e:	f7ff fe55 	bl	80061bc <malloc>
 8006512:	6270      	str	r0, [r6, #36]	; 0x24
 8006514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006518:	6004      	str	r4, [r0, #0]
 800651a:	60c4      	str	r4, [r0, #12]
 800651c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006524:	b94c      	cbnz	r4, 800653a <__pow5mult+0x56>
 8006526:	f240 2171 	movw	r1, #625	; 0x271
 800652a:	4630      	mov	r0, r6
 800652c:	f7ff ff3b 	bl	80063a6 <__i2b>
 8006530:	2300      	movs	r3, #0
 8006532:	4604      	mov	r4, r0
 8006534:	f8c8 0008 	str.w	r0, [r8, #8]
 8006538:	6003      	str	r3, [r0, #0]
 800653a:	f04f 0800 	mov.w	r8, #0
 800653e:	07eb      	lsls	r3, r5, #31
 8006540:	d50a      	bpl.n	8006558 <__pow5mult+0x74>
 8006542:	4639      	mov	r1, r7
 8006544:	4622      	mov	r2, r4
 8006546:	4630      	mov	r0, r6
 8006548:	f7ff ff36 	bl	80063b8 <__multiply>
 800654c:	4681      	mov	r9, r0
 800654e:	4639      	mov	r1, r7
 8006550:	4630      	mov	r0, r6
 8006552:	f7ff fe88 	bl	8006266 <_Bfree>
 8006556:	464f      	mov	r7, r9
 8006558:	106d      	asrs	r5, r5, #1
 800655a:	d00b      	beq.n	8006574 <__pow5mult+0x90>
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	b938      	cbnz	r0, 8006570 <__pow5mult+0x8c>
 8006560:	4622      	mov	r2, r4
 8006562:	4621      	mov	r1, r4
 8006564:	4630      	mov	r0, r6
 8006566:	f7ff ff27 	bl	80063b8 <__multiply>
 800656a:	6020      	str	r0, [r4, #0]
 800656c:	f8c0 8000 	str.w	r8, [r0]
 8006570:	4604      	mov	r4, r0
 8006572:	e7e4      	b.n	800653e <__pow5mult+0x5a>
 8006574:	4638      	mov	r0, r7
 8006576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657a:	bf00      	nop
 800657c:	08008330 	.word	0x08008330

08006580 <__lshift>:
 8006580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006584:	460c      	mov	r4, r1
 8006586:	4607      	mov	r7, r0
 8006588:	4616      	mov	r6, r2
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006590:	eb0a 0903 	add.w	r9, sl, r3
 8006594:	6849      	ldr	r1, [r1, #4]
 8006596:	68a3      	ldr	r3, [r4, #8]
 8006598:	f109 0501 	add.w	r5, r9, #1
 800659c:	42ab      	cmp	r3, r5
 800659e:	db32      	blt.n	8006606 <__lshift+0x86>
 80065a0:	4638      	mov	r0, r7
 80065a2:	f7ff fe2c 	bl	80061fe <_Balloc>
 80065a6:	2300      	movs	r3, #0
 80065a8:	4680      	mov	r8, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	f100 0114 	add.w	r1, r0, #20
 80065b0:	4553      	cmp	r3, sl
 80065b2:	db2b      	blt.n	800660c <__lshift+0x8c>
 80065b4:	6920      	ldr	r0, [r4, #16]
 80065b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065ba:	f104 0314 	add.w	r3, r4, #20
 80065be:	f016 021f 	ands.w	r2, r6, #31
 80065c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065ca:	d025      	beq.n	8006618 <__lshift+0x98>
 80065cc:	2000      	movs	r0, #0
 80065ce:	f1c2 0e20 	rsb	lr, r2, #32
 80065d2:	468a      	mov	sl, r1
 80065d4:	681e      	ldr	r6, [r3, #0]
 80065d6:	4096      	lsls	r6, r2
 80065d8:	4330      	orrs	r0, r6
 80065da:	f84a 0b04 	str.w	r0, [sl], #4
 80065de:	f853 0b04 	ldr.w	r0, [r3], #4
 80065e2:	459c      	cmp	ip, r3
 80065e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80065e8:	d814      	bhi.n	8006614 <__lshift+0x94>
 80065ea:	6048      	str	r0, [r1, #4]
 80065ec:	b108      	cbz	r0, 80065f2 <__lshift+0x72>
 80065ee:	f109 0502 	add.w	r5, r9, #2
 80065f2:	3d01      	subs	r5, #1
 80065f4:	4638      	mov	r0, r7
 80065f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80065fa:	4621      	mov	r1, r4
 80065fc:	f7ff fe33 	bl	8006266 <_Bfree>
 8006600:	4640      	mov	r0, r8
 8006602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006606:	3101      	adds	r1, #1
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	e7c7      	b.n	800659c <__lshift+0x1c>
 800660c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006610:	3301      	adds	r3, #1
 8006612:	e7cd      	b.n	80065b0 <__lshift+0x30>
 8006614:	4651      	mov	r1, sl
 8006616:	e7dc      	b.n	80065d2 <__lshift+0x52>
 8006618:	3904      	subs	r1, #4
 800661a:	f853 2b04 	ldr.w	r2, [r3], #4
 800661e:	459c      	cmp	ip, r3
 8006620:	f841 2f04 	str.w	r2, [r1, #4]!
 8006624:	d8f9      	bhi.n	800661a <__lshift+0x9a>
 8006626:	e7e4      	b.n	80065f2 <__lshift+0x72>

08006628 <__mcmp>:
 8006628:	6903      	ldr	r3, [r0, #16]
 800662a:	690a      	ldr	r2, [r1, #16]
 800662c:	b530      	push	{r4, r5, lr}
 800662e:	1a9b      	subs	r3, r3, r2
 8006630:	d10c      	bne.n	800664c <__mcmp+0x24>
 8006632:	0092      	lsls	r2, r2, #2
 8006634:	3014      	adds	r0, #20
 8006636:	3114      	adds	r1, #20
 8006638:	1884      	adds	r4, r0, r2
 800663a:	4411      	add	r1, r2
 800663c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006640:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006644:	4295      	cmp	r5, r2
 8006646:	d003      	beq.n	8006650 <__mcmp+0x28>
 8006648:	d305      	bcc.n	8006656 <__mcmp+0x2e>
 800664a:	2301      	movs	r3, #1
 800664c:	4618      	mov	r0, r3
 800664e:	bd30      	pop	{r4, r5, pc}
 8006650:	42a0      	cmp	r0, r4
 8006652:	d3f3      	bcc.n	800663c <__mcmp+0x14>
 8006654:	e7fa      	b.n	800664c <__mcmp+0x24>
 8006656:	f04f 33ff 	mov.w	r3, #4294967295
 800665a:	e7f7      	b.n	800664c <__mcmp+0x24>

0800665c <__mdiff>:
 800665c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006660:	460d      	mov	r5, r1
 8006662:	4607      	mov	r7, r0
 8006664:	4611      	mov	r1, r2
 8006666:	4628      	mov	r0, r5
 8006668:	4614      	mov	r4, r2
 800666a:	f7ff ffdd 	bl	8006628 <__mcmp>
 800666e:	1e06      	subs	r6, r0, #0
 8006670:	d108      	bne.n	8006684 <__mdiff+0x28>
 8006672:	4631      	mov	r1, r6
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff fdc2 	bl	80061fe <_Balloc>
 800667a:	2301      	movs	r3, #1
 800667c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006684:	bfa4      	itt	ge
 8006686:	4623      	movge	r3, r4
 8006688:	462c      	movge	r4, r5
 800668a:	4638      	mov	r0, r7
 800668c:	6861      	ldr	r1, [r4, #4]
 800668e:	bfa6      	itte	ge
 8006690:	461d      	movge	r5, r3
 8006692:	2600      	movge	r6, #0
 8006694:	2601      	movlt	r6, #1
 8006696:	f7ff fdb2 	bl	80061fe <_Balloc>
 800669a:	f04f 0e00 	mov.w	lr, #0
 800669e:	60c6      	str	r6, [r0, #12]
 80066a0:	692b      	ldr	r3, [r5, #16]
 80066a2:	6926      	ldr	r6, [r4, #16]
 80066a4:	f104 0214 	add.w	r2, r4, #20
 80066a8:	f105 0914 	add.w	r9, r5, #20
 80066ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80066b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80066b4:	f100 0114 	add.w	r1, r0, #20
 80066b8:	f852 ab04 	ldr.w	sl, [r2], #4
 80066bc:	f859 5b04 	ldr.w	r5, [r9], #4
 80066c0:	fa1f f38a 	uxth.w	r3, sl
 80066c4:	4473      	add	r3, lr
 80066c6:	b2ac      	uxth	r4, r5
 80066c8:	1b1b      	subs	r3, r3, r4
 80066ca:	0c2c      	lsrs	r4, r5, #16
 80066cc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80066d0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80066da:	45c8      	cmp	r8, r9
 80066dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80066e0:	4694      	mov	ip, r2
 80066e2:	f841 4b04 	str.w	r4, [r1], #4
 80066e6:	d8e7      	bhi.n	80066b8 <__mdiff+0x5c>
 80066e8:	45bc      	cmp	ip, r7
 80066ea:	d304      	bcc.n	80066f6 <__mdiff+0x9a>
 80066ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80066f0:	b183      	cbz	r3, 8006714 <__mdiff+0xb8>
 80066f2:	6106      	str	r6, [r0, #16]
 80066f4:	e7c4      	b.n	8006680 <__mdiff+0x24>
 80066f6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80066fa:	b2a2      	uxth	r2, r4
 80066fc:	4472      	add	r2, lr
 80066fe:	1413      	asrs	r3, r2, #16
 8006700:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006704:	b292      	uxth	r2, r2
 8006706:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800670a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800670e:	f841 2b04 	str.w	r2, [r1], #4
 8006712:	e7e9      	b.n	80066e8 <__mdiff+0x8c>
 8006714:	3e01      	subs	r6, #1
 8006716:	e7e9      	b.n	80066ec <__mdiff+0x90>

08006718 <__d2b>:
 8006718:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800671c:	461c      	mov	r4, r3
 800671e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006722:	2101      	movs	r1, #1
 8006724:	4690      	mov	r8, r2
 8006726:	f7ff fd6a 	bl	80061fe <_Balloc>
 800672a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800672e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006732:	4607      	mov	r7, r0
 8006734:	bb34      	cbnz	r4, 8006784 <__d2b+0x6c>
 8006736:	9201      	str	r2, [sp, #4]
 8006738:	f1b8 0200 	subs.w	r2, r8, #0
 800673c:	d027      	beq.n	800678e <__d2b+0x76>
 800673e:	a802      	add	r0, sp, #8
 8006740:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006744:	f7ff fe00 	bl	8006348 <__lo0bits>
 8006748:	9900      	ldr	r1, [sp, #0]
 800674a:	b1f0      	cbz	r0, 800678a <__d2b+0x72>
 800674c:	9a01      	ldr	r2, [sp, #4]
 800674e:	f1c0 0320 	rsb	r3, r0, #32
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	430b      	orrs	r3, r1
 8006758:	40c2      	lsrs	r2, r0
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	9201      	str	r2, [sp, #4]
 800675e:	9b01      	ldr	r3, [sp, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf14      	ite	ne
 8006764:	2102      	movne	r1, #2
 8006766:	2101      	moveq	r1, #1
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	6139      	str	r1, [r7, #16]
 800676c:	b1c4      	cbz	r4, 80067a0 <__d2b+0x88>
 800676e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006772:	4404      	add	r4, r0
 8006774:	6034      	str	r4, [r6, #0]
 8006776:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800677a:	6028      	str	r0, [r5, #0]
 800677c:	4638      	mov	r0, r7
 800677e:	b002      	add	sp, #8
 8006780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006784:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006788:	e7d5      	b.n	8006736 <__d2b+0x1e>
 800678a:	6179      	str	r1, [r7, #20]
 800678c:	e7e7      	b.n	800675e <__d2b+0x46>
 800678e:	a801      	add	r0, sp, #4
 8006790:	f7ff fdda 	bl	8006348 <__lo0bits>
 8006794:	2101      	movs	r1, #1
 8006796:	9b01      	ldr	r3, [sp, #4]
 8006798:	6139      	str	r1, [r7, #16]
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	3020      	adds	r0, #32
 800679e:	e7e5      	b.n	800676c <__d2b+0x54>
 80067a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067a4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80067a8:	6030      	str	r0, [r6, #0]
 80067aa:	6918      	ldr	r0, [r3, #16]
 80067ac:	f7ff fdad 	bl	800630a <__hi0bits>
 80067b0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80067b4:	e7e1      	b.n	800677a <__d2b+0x62>

080067b6 <_calloc_r>:
 80067b6:	b538      	push	{r3, r4, r5, lr}
 80067b8:	fb02 f401 	mul.w	r4, r2, r1
 80067bc:	4621      	mov	r1, r4
 80067be:	f000 f855 	bl	800686c <_malloc_r>
 80067c2:	4605      	mov	r5, r0
 80067c4:	b118      	cbz	r0, 80067ce <_calloc_r+0x18>
 80067c6:	4622      	mov	r2, r4
 80067c8:	2100      	movs	r1, #0
 80067ca:	f7fe fa2d 	bl	8004c28 <memset>
 80067ce:	4628      	mov	r0, r5
 80067d0:	bd38      	pop	{r3, r4, r5, pc}
	...

080067d4 <_free_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4605      	mov	r5, r0
 80067d8:	2900      	cmp	r1, #0
 80067da:	d043      	beq.n	8006864 <_free_r+0x90>
 80067dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067e0:	1f0c      	subs	r4, r1, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	bfb8      	it	lt
 80067e6:	18e4      	addlt	r4, r4, r3
 80067e8:	f000 fa27 	bl	8006c3a <__malloc_lock>
 80067ec:	4a1e      	ldr	r2, [pc, #120]	; (8006868 <_free_r+0x94>)
 80067ee:	6813      	ldr	r3, [r2, #0]
 80067f0:	4610      	mov	r0, r2
 80067f2:	b933      	cbnz	r3, 8006802 <_free_r+0x2e>
 80067f4:	6063      	str	r3, [r4, #4]
 80067f6:	6014      	str	r4, [r2, #0]
 80067f8:	4628      	mov	r0, r5
 80067fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067fe:	f000 ba1d 	b.w	8006c3c <__malloc_unlock>
 8006802:	42a3      	cmp	r3, r4
 8006804:	d90b      	bls.n	800681e <_free_r+0x4a>
 8006806:	6821      	ldr	r1, [r4, #0]
 8006808:	1862      	adds	r2, r4, r1
 800680a:	4293      	cmp	r3, r2
 800680c:	bf01      	itttt	eq
 800680e:	681a      	ldreq	r2, [r3, #0]
 8006810:	685b      	ldreq	r3, [r3, #4]
 8006812:	1852      	addeq	r2, r2, r1
 8006814:	6022      	streq	r2, [r4, #0]
 8006816:	6063      	str	r3, [r4, #4]
 8006818:	6004      	str	r4, [r0, #0]
 800681a:	e7ed      	b.n	80067f8 <_free_r+0x24>
 800681c:	4613      	mov	r3, r2
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	b10a      	cbz	r2, 8006826 <_free_r+0x52>
 8006822:	42a2      	cmp	r2, r4
 8006824:	d9fa      	bls.n	800681c <_free_r+0x48>
 8006826:	6819      	ldr	r1, [r3, #0]
 8006828:	1858      	adds	r0, r3, r1
 800682a:	42a0      	cmp	r0, r4
 800682c:	d10b      	bne.n	8006846 <_free_r+0x72>
 800682e:	6820      	ldr	r0, [r4, #0]
 8006830:	4401      	add	r1, r0
 8006832:	1858      	adds	r0, r3, r1
 8006834:	4282      	cmp	r2, r0
 8006836:	6019      	str	r1, [r3, #0]
 8006838:	d1de      	bne.n	80067f8 <_free_r+0x24>
 800683a:	6810      	ldr	r0, [r2, #0]
 800683c:	6852      	ldr	r2, [r2, #4]
 800683e:	4401      	add	r1, r0
 8006840:	6019      	str	r1, [r3, #0]
 8006842:	605a      	str	r2, [r3, #4]
 8006844:	e7d8      	b.n	80067f8 <_free_r+0x24>
 8006846:	d902      	bls.n	800684e <_free_r+0x7a>
 8006848:	230c      	movs	r3, #12
 800684a:	602b      	str	r3, [r5, #0]
 800684c:	e7d4      	b.n	80067f8 <_free_r+0x24>
 800684e:	6820      	ldr	r0, [r4, #0]
 8006850:	1821      	adds	r1, r4, r0
 8006852:	428a      	cmp	r2, r1
 8006854:	bf01      	itttt	eq
 8006856:	6811      	ldreq	r1, [r2, #0]
 8006858:	6852      	ldreq	r2, [r2, #4]
 800685a:	1809      	addeq	r1, r1, r0
 800685c:	6021      	streq	r1, [r4, #0]
 800685e:	6062      	str	r2, [r4, #4]
 8006860:	605c      	str	r4, [r3, #4]
 8006862:	e7c9      	b.n	80067f8 <_free_r+0x24>
 8006864:	bd38      	pop	{r3, r4, r5, pc}
 8006866:	bf00      	nop
 8006868:	20000620 	.word	0x20000620

0800686c <_malloc_r>:
 800686c:	b570      	push	{r4, r5, r6, lr}
 800686e:	1ccd      	adds	r5, r1, #3
 8006870:	f025 0503 	bic.w	r5, r5, #3
 8006874:	3508      	adds	r5, #8
 8006876:	2d0c      	cmp	r5, #12
 8006878:	bf38      	it	cc
 800687a:	250c      	movcc	r5, #12
 800687c:	2d00      	cmp	r5, #0
 800687e:	4606      	mov	r6, r0
 8006880:	db01      	blt.n	8006886 <_malloc_r+0x1a>
 8006882:	42a9      	cmp	r1, r5
 8006884:	d903      	bls.n	800688e <_malloc_r+0x22>
 8006886:	230c      	movs	r3, #12
 8006888:	6033      	str	r3, [r6, #0]
 800688a:	2000      	movs	r0, #0
 800688c:	bd70      	pop	{r4, r5, r6, pc}
 800688e:	f000 f9d4 	bl	8006c3a <__malloc_lock>
 8006892:	4a21      	ldr	r2, [pc, #132]	; (8006918 <_malloc_r+0xac>)
 8006894:	6814      	ldr	r4, [r2, #0]
 8006896:	4621      	mov	r1, r4
 8006898:	b991      	cbnz	r1, 80068c0 <_malloc_r+0x54>
 800689a:	4c20      	ldr	r4, [pc, #128]	; (800691c <_malloc_r+0xb0>)
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	b91b      	cbnz	r3, 80068a8 <_malloc_r+0x3c>
 80068a0:	4630      	mov	r0, r6
 80068a2:	f000 f98f 	bl	8006bc4 <_sbrk_r>
 80068a6:	6020      	str	r0, [r4, #0]
 80068a8:	4629      	mov	r1, r5
 80068aa:	4630      	mov	r0, r6
 80068ac:	f000 f98a 	bl	8006bc4 <_sbrk_r>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d124      	bne.n	80068fe <_malloc_r+0x92>
 80068b4:	230c      	movs	r3, #12
 80068b6:	4630      	mov	r0, r6
 80068b8:	6033      	str	r3, [r6, #0]
 80068ba:	f000 f9bf 	bl	8006c3c <__malloc_unlock>
 80068be:	e7e4      	b.n	800688a <_malloc_r+0x1e>
 80068c0:	680b      	ldr	r3, [r1, #0]
 80068c2:	1b5b      	subs	r3, r3, r5
 80068c4:	d418      	bmi.n	80068f8 <_malloc_r+0x8c>
 80068c6:	2b0b      	cmp	r3, #11
 80068c8:	d90f      	bls.n	80068ea <_malloc_r+0x7e>
 80068ca:	600b      	str	r3, [r1, #0]
 80068cc:	18cc      	adds	r4, r1, r3
 80068ce:	50cd      	str	r5, [r1, r3]
 80068d0:	4630      	mov	r0, r6
 80068d2:	f000 f9b3 	bl	8006c3c <__malloc_unlock>
 80068d6:	f104 000b 	add.w	r0, r4, #11
 80068da:	1d23      	adds	r3, r4, #4
 80068dc:	f020 0007 	bic.w	r0, r0, #7
 80068e0:	1ac3      	subs	r3, r0, r3
 80068e2:	d0d3      	beq.n	800688c <_malloc_r+0x20>
 80068e4:	425a      	negs	r2, r3
 80068e6:	50e2      	str	r2, [r4, r3]
 80068e8:	e7d0      	b.n	800688c <_malloc_r+0x20>
 80068ea:	684b      	ldr	r3, [r1, #4]
 80068ec:	428c      	cmp	r4, r1
 80068ee:	bf16      	itet	ne
 80068f0:	6063      	strne	r3, [r4, #4]
 80068f2:	6013      	streq	r3, [r2, #0]
 80068f4:	460c      	movne	r4, r1
 80068f6:	e7eb      	b.n	80068d0 <_malloc_r+0x64>
 80068f8:	460c      	mov	r4, r1
 80068fa:	6849      	ldr	r1, [r1, #4]
 80068fc:	e7cc      	b.n	8006898 <_malloc_r+0x2c>
 80068fe:	1cc4      	adds	r4, r0, #3
 8006900:	f024 0403 	bic.w	r4, r4, #3
 8006904:	42a0      	cmp	r0, r4
 8006906:	d005      	beq.n	8006914 <_malloc_r+0xa8>
 8006908:	1a21      	subs	r1, r4, r0
 800690a:	4630      	mov	r0, r6
 800690c:	f000 f95a 	bl	8006bc4 <_sbrk_r>
 8006910:	3001      	adds	r0, #1
 8006912:	d0cf      	beq.n	80068b4 <_malloc_r+0x48>
 8006914:	6025      	str	r5, [r4, #0]
 8006916:	e7db      	b.n	80068d0 <_malloc_r+0x64>
 8006918:	20000620 	.word	0x20000620
 800691c:	20000624 	.word	0x20000624

08006920 <__ssputs_r>:
 8006920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	688e      	ldr	r6, [r1, #8]
 8006926:	4682      	mov	sl, r0
 8006928:	429e      	cmp	r6, r3
 800692a:	460c      	mov	r4, r1
 800692c:	4690      	mov	r8, r2
 800692e:	4699      	mov	r9, r3
 8006930:	d837      	bhi.n	80069a2 <__ssputs_r+0x82>
 8006932:	898a      	ldrh	r2, [r1, #12]
 8006934:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006938:	d031      	beq.n	800699e <__ssputs_r+0x7e>
 800693a:	2302      	movs	r3, #2
 800693c:	6825      	ldr	r5, [r4, #0]
 800693e:	6909      	ldr	r1, [r1, #16]
 8006940:	1a6f      	subs	r7, r5, r1
 8006942:	6965      	ldr	r5, [r4, #20]
 8006944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006948:	fb95 f5f3 	sdiv	r5, r5, r3
 800694c:	f109 0301 	add.w	r3, r9, #1
 8006950:	443b      	add	r3, r7
 8006952:	429d      	cmp	r5, r3
 8006954:	bf38      	it	cc
 8006956:	461d      	movcc	r5, r3
 8006958:	0553      	lsls	r3, r2, #21
 800695a:	d530      	bpl.n	80069be <__ssputs_r+0x9e>
 800695c:	4629      	mov	r1, r5
 800695e:	f7ff ff85 	bl	800686c <_malloc_r>
 8006962:	4606      	mov	r6, r0
 8006964:	b950      	cbnz	r0, 800697c <__ssputs_r+0x5c>
 8006966:	230c      	movs	r3, #12
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	f8ca 3000 	str.w	r3, [sl]
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006976:	81a3      	strh	r3, [r4, #12]
 8006978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697c:	463a      	mov	r2, r7
 800697e:	6921      	ldr	r1, [r4, #16]
 8006980:	f7ff fc32 	bl	80061e8 <memcpy>
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800698a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	6126      	str	r6, [r4, #16]
 8006992:	443e      	add	r6, r7
 8006994:	6026      	str	r6, [r4, #0]
 8006996:	464e      	mov	r6, r9
 8006998:	6165      	str	r5, [r4, #20]
 800699a:	1bed      	subs	r5, r5, r7
 800699c:	60a5      	str	r5, [r4, #8]
 800699e:	454e      	cmp	r6, r9
 80069a0:	d900      	bls.n	80069a4 <__ssputs_r+0x84>
 80069a2:	464e      	mov	r6, r9
 80069a4:	4632      	mov	r2, r6
 80069a6:	4641      	mov	r1, r8
 80069a8:	6820      	ldr	r0, [r4, #0]
 80069aa:	f000 f92d 	bl	8006c08 <memmove>
 80069ae:	68a3      	ldr	r3, [r4, #8]
 80069b0:	2000      	movs	r0, #0
 80069b2:	1b9b      	subs	r3, r3, r6
 80069b4:	60a3      	str	r3, [r4, #8]
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	441e      	add	r6, r3
 80069ba:	6026      	str	r6, [r4, #0]
 80069bc:	e7dc      	b.n	8006978 <__ssputs_r+0x58>
 80069be:	462a      	mov	r2, r5
 80069c0:	f000 f93d 	bl	8006c3e <_realloc_r>
 80069c4:	4606      	mov	r6, r0
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d1e2      	bne.n	8006990 <__ssputs_r+0x70>
 80069ca:	6921      	ldr	r1, [r4, #16]
 80069cc:	4650      	mov	r0, sl
 80069ce:	f7ff ff01 	bl	80067d4 <_free_r>
 80069d2:	e7c8      	b.n	8006966 <__ssputs_r+0x46>

080069d4 <_svfiprintf_r>:
 80069d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	461d      	mov	r5, r3
 80069da:	898b      	ldrh	r3, [r1, #12]
 80069dc:	b09d      	sub	sp, #116	; 0x74
 80069de:	061f      	lsls	r7, r3, #24
 80069e0:	4680      	mov	r8, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	4616      	mov	r6, r2
 80069e6:	d50f      	bpl.n	8006a08 <_svfiprintf_r+0x34>
 80069e8:	690b      	ldr	r3, [r1, #16]
 80069ea:	b96b      	cbnz	r3, 8006a08 <_svfiprintf_r+0x34>
 80069ec:	2140      	movs	r1, #64	; 0x40
 80069ee:	f7ff ff3d 	bl	800686c <_malloc_r>
 80069f2:	6020      	str	r0, [r4, #0]
 80069f4:	6120      	str	r0, [r4, #16]
 80069f6:	b928      	cbnz	r0, 8006a04 <_svfiprintf_r+0x30>
 80069f8:	230c      	movs	r3, #12
 80069fa:	f8c8 3000 	str.w	r3, [r8]
 80069fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006a02:	e0c8      	b.n	8006b96 <_svfiprintf_r+0x1c2>
 8006a04:	2340      	movs	r3, #64	; 0x40
 8006a06:	6163      	str	r3, [r4, #20]
 8006a08:	2300      	movs	r3, #0
 8006a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0c:	2320      	movs	r3, #32
 8006a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a12:	2330      	movs	r3, #48	; 0x30
 8006a14:	f04f 0b01 	mov.w	fp, #1
 8006a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a1c:	9503      	str	r5, [sp, #12]
 8006a1e:	4637      	mov	r7, r6
 8006a20:	463d      	mov	r5, r7
 8006a22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a26:	b10b      	cbz	r3, 8006a2c <_svfiprintf_r+0x58>
 8006a28:	2b25      	cmp	r3, #37	; 0x25
 8006a2a:	d13e      	bne.n	8006aaa <_svfiprintf_r+0xd6>
 8006a2c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a30:	d00b      	beq.n	8006a4a <_svfiprintf_r+0x76>
 8006a32:	4653      	mov	r3, sl
 8006a34:	4632      	mov	r2, r6
 8006a36:	4621      	mov	r1, r4
 8006a38:	4640      	mov	r0, r8
 8006a3a:	f7ff ff71 	bl	8006920 <__ssputs_r>
 8006a3e:	3001      	adds	r0, #1
 8006a40:	f000 80a4 	beq.w	8006b8c <_svfiprintf_r+0x1b8>
 8006a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a46:	4453      	add	r3, sl
 8006a48:	9309      	str	r3, [sp, #36]	; 0x24
 8006a4a:	783b      	ldrb	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 809d 	beq.w	8006b8c <_svfiprintf_r+0x1b8>
 8006a52:	2300      	movs	r3, #0
 8006a54:	f04f 32ff 	mov.w	r2, #4294967295
 8006a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a5c:	9304      	str	r3, [sp, #16]
 8006a5e:	9307      	str	r3, [sp, #28]
 8006a60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a64:	931a      	str	r3, [sp, #104]	; 0x68
 8006a66:	462f      	mov	r7, r5
 8006a68:	2205      	movs	r2, #5
 8006a6a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006a6e:	4850      	ldr	r0, [pc, #320]	; (8006bb0 <_svfiprintf_r+0x1dc>)
 8006a70:	f7ff fbac 	bl	80061cc <memchr>
 8006a74:	9b04      	ldr	r3, [sp, #16]
 8006a76:	b9d0      	cbnz	r0, 8006aae <_svfiprintf_r+0xda>
 8006a78:	06d9      	lsls	r1, r3, #27
 8006a7a:	bf44      	itt	mi
 8006a7c:	2220      	movmi	r2, #32
 8006a7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a82:	071a      	lsls	r2, r3, #28
 8006a84:	bf44      	itt	mi
 8006a86:	222b      	movmi	r2, #43	; 0x2b
 8006a88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a8c:	782a      	ldrb	r2, [r5, #0]
 8006a8e:	2a2a      	cmp	r2, #42	; 0x2a
 8006a90:	d015      	beq.n	8006abe <_svfiprintf_r+0xea>
 8006a92:	462f      	mov	r7, r5
 8006a94:	2000      	movs	r0, #0
 8006a96:	250a      	movs	r5, #10
 8006a98:	9a07      	ldr	r2, [sp, #28]
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aa0:	3b30      	subs	r3, #48	; 0x30
 8006aa2:	2b09      	cmp	r3, #9
 8006aa4:	d94d      	bls.n	8006b42 <_svfiprintf_r+0x16e>
 8006aa6:	b1b8      	cbz	r0, 8006ad8 <_svfiprintf_r+0x104>
 8006aa8:	e00f      	b.n	8006aca <_svfiprintf_r+0xf6>
 8006aaa:	462f      	mov	r7, r5
 8006aac:	e7b8      	b.n	8006a20 <_svfiprintf_r+0x4c>
 8006aae:	4a40      	ldr	r2, [pc, #256]	; (8006bb0 <_svfiprintf_r+0x1dc>)
 8006ab0:	463d      	mov	r5, r7
 8006ab2:	1a80      	subs	r0, r0, r2
 8006ab4:	fa0b f000 	lsl.w	r0, fp, r0
 8006ab8:	4318      	orrs	r0, r3
 8006aba:	9004      	str	r0, [sp, #16]
 8006abc:	e7d3      	b.n	8006a66 <_svfiprintf_r+0x92>
 8006abe:	9a03      	ldr	r2, [sp, #12]
 8006ac0:	1d11      	adds	r1, r2, #4
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	9103      	str	r1, [sp, #12]
 8006ac6:	2a00      	cmp	r2, #0
 8006ac8:	db01      	blt.n	8006ace <_svfiprintf_r+0xfa>
 8006aca:	9207      	str	r2, [sp, #28]
 8006acc:	e004      	b.n	8006ad8 <_svfiprintf_r+0x104>
 8006ace:	4252      	negs	r2, r2
 8006ad0:	f043 0302 	orr.w	r3, r3, #2
 8006ad4:	9207      	str	r2, [sp, #28]
 8006ad6:	9304      	str	r3, [sp, #16]
 8006ad8:	783b      	ldrb	r3, [r7, #0]
 8006ada:	2b2e      	cmp	r3, #46	; 0x2e
 8006adc:	d10c      	bne.n	8006af8 <_svfiprintf_r+0x124>
 8006ade:	787b      	ldrb	r3, [r7, #1]
 8006ae0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae2:	d133      	bne.n	8006b4c <_svfiprintf_r+0x178>
 8006ae4:	9b03      	ldr	r3, [sp, #12]
 8006ae6:	3702      	adds	r7, #2
 8006ae8:	1d1a      	adds	r2, r3, #4
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	9203      	str	r2, [sp, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bfb8      	it	lt
 8006af2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006af6:	9305      	str	r3, [sp, #20]
 8006af8:	4d2e      	ldr	r5, [pc, #184]	; (8006bb4 <_svfiprintf_r+0x1e0>)
 8006afa:	2203      	movs	r2, #3
 8006afc:	7839      	ldrb	r1, [r7, #0]
 8006afe:	4628      	mov	r0, r5
 8006b00:	f7ff fb64 	bl	80061cc <memchr>
 8006b04:	b138      	cbz	r0, 8006b16 <_svfiprintf_r+0x142>
 8006b06:	2340      	movs	r3, #64	; 0x40
 8006b08:	1b40      	subs	r0, r0, r5
 8006b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8006b0e:	9b04      	ldr	r3, [sp, #16]
 8006b10:	3701      	adds	r7, #1
 8006b12:	4303      	orrs	r3, r0
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	7839      	ldrb	r1, [r7, #0]
 8006b18:	2206      	movs	r2, #6
 8006b1a:	4827      	ldr	r0, [pc, #156]	; (8006bb8 <_svfiprintf_r+0x1e4>)
 8006b1c:	1c7e      	adds	r6, r7, #1
 8006b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b22:	f7ff fb53 	bl	80061cc <memchr>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d038      	beq.n	8006b9c <_svfiprintf_r+0x1c8>
 8006b2a:	4b24      	ldr	r3, [pc, #144]	; (8006bbc <_svfiprintf_r+0x1e8>)
 8006b2c:	bb13      	cbnz	r3, 8006b74 <_svfiprintf_r+0x1a0>
 8006b2e:	9b03      	ldr	r3, [sp, #12]
 8006b30:	3307      	adds	r3, #7
 8006b32:	f023 0307 	bic.w	r3, r3, #7
 8006b36:	3308      	adds	r3, #8
 8006b38:	9303      	str	r3, [sp, #12]
 8006b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b3c:	444b      	add	r3, r9
 8006b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b40:	e76d      	b.n	8006a1e <_svfiprintf_r+0x4a>
 8006b42:	fb05 3202 	mla	r2, r5, r2, r3
 8006b46:	2001      	movs	r0, #1
 8006b48:	460f      	mov	r7, r1
 8006b4a:	e7a6      	b.n	8006a9a <_svfiprintf_r+0xc6>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	250a      	movs	r5, #10
 8006b50:	4619      	mov	r1, r3
 8006b52:	3701      	adds	r7, #1
 8006b54:	9305      	str	r3, [sp, #20]
 8006b56:	4638      	mov	r0, r7
 8006b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b5c:	3a30      	subs	r2, #48	; 0x30
 8006b5e:	2a09      	cmp	r2, #9
 8006b60:	d903      	bls.n	8006b6a <_svfiprintf_r+0x196>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0c8      	beq.n	8006af8 <_svfiprintf_r+0x124>
 8006b66:	9105      	str	r1, [sp, #20]
 8006b68:	e7c6      	b.n	8006af8 <_svfiprintf_r+0x124>
 8006b6a:	fb05 2101 	mla	r1, r5, r1, r2
 8006b6e:	2301      	movs	r3, #1
 8006b70:	4607      	mov	r7, r0
 8006b72:	e7f0      	b.n	8006b56 <_svfiprintf_r+0x182>
 8006b74:	ab03      	add	r3, sp, #12
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	4622      	mov	r2, r4
 8006b7a:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <_svfiprintf_r+0x1ec>)
 8006b7c:	a904      	add	r1, sp, #16
 8006b7e:	4640      	mov	r0, r8
 8006b80:	f7fe f8ec 	bl	8004d5c <_printf_float>
 8006b84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b88:	4681      	mov	r9, r0
 8006b8a:	d1d6      	bne.n	8006b3a <_svfiprintf_r+0x166>
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	065b      	lsls	r3, r3, #25
 8006b90:	f53f af35 	bmi.w	80069fe <_svfiprintf_r+0x2a>
 8006b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b96:	b01d      	add	sp, #116	; 0x74
 8006b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9c:	ab03      	add	r3, sp, #12
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	4622      	mov	r2, r4
 8006ba2:	4b07      	ldr	r3, [pc, #28]	; (8006bc0 <_svfiprintf_r+0x1ec>)
 8006ba4:	a904      	add	r1, sp, #16
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	f7fe fb84 	bl	80052b4 <_printf_i>
 8006bac:	e7ea      	b.n	8006b84 <_svfiprintf_r+0x1b0>
 8006bae:	bf00      	nop
 8006bb0:	0800833c 	.word	0x0800833c
 8006bb4:	08008342 	.word	0x08008342
 8006bb8:	08008346 	.word	0x08008346
 8006bbc:	08004d5d 	.word	0x08004d5d
 8006bc0:	08006921 	.word	0x08006921

08006bc4 <_sbrk_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	4c05      	ldr	r4, [pc, #20]	; (8006be0 <_sbrk_r+0x1c>)
 8006bca:	4605      	mov	r5, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	f7fb fac8 	bl	8002164 <_sbrk>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_sbrk_r+0x1a>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_sbrk_r+0x1a>
 8006bdc:	602b      	str	r3, [r5, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	200006f4 	.word	0x200006f4

08006be4 <__ascii_mbtowc>:
 8006be4:	b082      	sub	sp, #8
 8006be6:	b901      	cbnz	r1, 8006bea <__ascii_mbtowc+0x6>
 8006be8:	a901      	add	r1, sp, #4
 8006bea:	b142      	cbz	r2, 8006bfe <__ascii_mbtowc+0x1a>
 8006bec:	b14b      	cbz	r3, 8006c02 <__ascii_mbtowc+0x1e>
 8006bee:	7813      	ldrb	r3, [r2, #0]
 8006bf0:	600b      	str	r3, [r1, #0]
 8006bf2:	7812      	ldrb	r2, [r2, #0]
 8006bf4:	1c10      	adds	r0, r2, #0
 8006bf6:	bf18      	it	ne
 8006bf8:	2001      	movne	r0, #1
 8006bfa:	b002      	add	sp, #8
 8006bfc:	4770      	bx	lr
 8006bfe:	4610      	mov	r0, r2
 8006c00:	e7fb      	b.n	8006bfa <__ascii_mbtowc+0x16>
 8006c02:	f06f 0001 	mvn.w	r0, #1
 8006c06:	e7f8      	b.n	8006bfa <__ascii_mbtowc+0x16>

08006c08 <memmove>:
 8006c08:	4288      	cmp	r0, r1
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	eb01 0302 	add.w	r3, r1, r2
 8006c10:	d807      	bhi.n	8006c22 <memmove+0x1a>
 8006c12:	1e42      	subs	r2, r0, #1
 8006c14:	4299      	cmp	r1, r3
 8006c16:	d00a      	beq.n	8006c2e <memmove+0x26>
 8006c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006c20:	e7f8      	b.n	8006c14 <memmove+0xc>
 8006c22:	4283      	cmp	r3, r0
 8006c24:	d9f5      	bls.n	8006c12 <memmove+0xa>
 8006c26:	1881      	adds	r1, r0, r2
 8006c28:	1ad2      	subs	r2, r2, r3
 8006c2a:	42d3      	cmn	r3, r2
 8006c2c:	d100      	bne.n	8006c30 <memmove+0x28>
 8006c2e:	bd10      	pop	{r4, pc}
 8006c30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c34:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c38:	e7f7      	b.n	8006c2a <memmove+0x22>

08006c3a <__malloc_lock>:
 8006c3a:	4770      	bx	lr

08006c3c <__malloc_unlock>:
 8006c3c:	4770      	bx	lr

08006c3e <_realloc_r>:
 8006c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c40:	4607      	mov	r7, r0
 8006c42:	4614      	mov	r4, r2
 8006c44:	460e      	mov	r6, r1
 8006c46:	b921      	cbnz	r1, 8006c52 <_realloc_r+0x14>
 8006c48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	f7ff be0d 	b.w	800686c <_malloc_r>
 8006c52:	b922      	cbnz	r2, 8006c5e <_realloc_r+0x20>
 8006c54:	f7ff fdbe 	bl	80067d4 <_free_r>
 8006c58:	4625      	mov	r5, r4
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c5e:	f000 f821 	bl	8006ca4 <_malloc_usable_size_r>
 8006c62:	42a0      	cmp	r0, r4
 8006c64:	d20f      	bcs.n	8006c86 <_realloc_r+0x48>
 8006c66:	4621      	mov	r1, r4
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f7ff fdff 	bl	800686c <_malloc_r>
 8006c6e:	4605      	mov	r5, r0
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d0f2      	beq.n	8006c5a <_realloc_r+0x1c>
 8006c74:	4631      	mov	r1, r6
 8006c76:	4622      	mov	r2, r4
 8006c78:	f7ff fab6 	bl	80061e8 <memcpy>
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4638      	mov	r0, r7
 8006c80:	f7ff fda8 	bl	80067d4 <_free_r>
 8006c84:	e7e9      	b.n	8006c5a <_realloc_r+0x1c>
 8006c86:	4635      	mov	r5, r6
 8006c88:	e7e7      	b.n	8006c5a <_realloc_r+0x1c>

08006c8a <__ascii_wctomb>:
 8006c8a:	b149      	cbz	r1, 8006ca0 <__ascii_wctomb+0x16>
 8006c8c:	2aff      	cmp	r2, #255	; 0xff
 8006c8e:	bf8b      	itete	hi
 8006c90:	238a      	movhi	r3, #138	; 0x8a
 8006c92:	700a      	strbls	r2, [r1, #0]
 8006c94:	6003      	strhi	r3, [r0, #0]
 8006c96:	2001      	movls	r0, #1
 8006c98:	bf88      	it	hi
 8006c9a:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c9e:	4770      	bx	lr
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	4770      	bx	lr

08006ca4 <_malloc_usable_size_r>:
 8006ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ca8:	1f18      	subs	r0, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfbc      	itt	lt
 8006cae:	580b      	ldrlt	r3, [r1, r0]
 8006cb0:	18c0      	addlt	r0, r0, r3
 8006cb2:	4770      	bx	lr

08006cb4 <_init>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	bf00      	nop
 8006cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cba:	bc08      	pop	{r3}
 8006cbc:	469e      	mov	lr, r3
 8006cbe:	4770      	bx	lr

08006cc0 <_fini>:
 8006cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc2:	bf00      	nop
 8006cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc6:	bc08      	pop	{r3}
 8006cc8:	469e      	mov	lr, r3
 8006cca:	4770      	bx	lr
