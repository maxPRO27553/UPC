
voltf103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001788  08006d60  08006d60  00016d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084e8  080084e8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  080084e8  080084e8  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084e8  080084e8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084e8  080084e8  000184e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084ec  080084ec  000184ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080084f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200001f8  080086e8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  080086e8  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c036  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fd2  00000000  00000000  0002c257  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  0002e230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  0002ec50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018115  00000000  00000000  0002f590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f65  00000000  00000000  000476a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088460  00000000  00000000  0005160a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9a6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c4  00000000  00000000  000d9ae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d44 	.word	0x08006d44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08006d44 	.word	0x08006d44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b44:	f1a2 0201 	sub.w	r2, r2, #1
 8000b48:	d1ed      	bne.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <displayvolt>:
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	  while(__HAL_TIM_GET_COUNTER(&htim2) < msec);
}
*/
void displayvolt(float akbvoltage, float mainvoltage, uint8_t cflag)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b08d      	sub	sp, #52	; 0x34
 8001034:	af02      	add	r7, sp, #8
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	4613      	mov	r3, r2
 800103c:	71fb      	strb	r3, [r7, #7]


	char str[20];
	sprintf (str,"bat. %1.2f V", akbvoltage);
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f7ff f9f2 	bl	8000428 <__aeabi_f2d>
 8001044:	4603      	mov	r3, r0
 8001046:	460c      	mov	r4, r1
 8001048:	f107 0014 	add.w	r0, r7, #20
 800104c:	461a      	mov	r2, r3
 800104e:	4623      	mov	r3, r4
 8001050:	494f      	ldr	r1, [pc, #316]	; (8001190 <displayvolt+0x160>)
 8001052:	f004 fa8b 	bl	800556c <siprintf>
	SSD1306_Fill(0);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 fc64 	bl	8001924 <SSD1306_Fill>
	SSD1306_GotoXY(0,12);
 800105c:	210c      	movs	r1, #12
 800105e:	2000      	movs	r0, #0
 8001060:	f000 fcd6 	bl	8001a10 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_7x10, 1);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2201      	movs	r2, #1
 800106a:	494a      	ldr	r1, [pc, #296]	; (8001194 <displayvolt+0x164>)
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fd65 	bl	8001b3c <SSD1306_Puts>
	SSD1306_DrawRectangle(4, 30, 110, 33, 1);
 8001072:	2301      	movs	r3, #1
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2321      	movs	r3, #33	; 0x21
 8001078:	226e      	movs	r2, #110	; 0x6e
 800107a:	211e      	movs	r1, #30
 800107c:	2004      	movs	r0, #4
 800107e:	f000 fe7d 	bl	8001d7c <SSD1306_DrawRectangle>
	SSD1306_DrawFilledRectangle(114, 41, 5, 11, 1);
 8001082:	2301      	movs	r3, #1
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	230b      	movs	r3, #11
 8001088:	2205      	movs	r2, #5
 800108a:	2129      	movs	r1, #41	; 0x29
 800108c:	2072      	movs	r0, #114	; 0x72
 800108e:	f000 fedf 	bl	8001e50 <SSD1306_DrawFilledRectangle>
	if (akbvoltage > 12.6f)
 8001092:	4941      	ldr	r1, [pc, #260]	; (8001198 <displayvolt+0x168>)
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff ffc1 	bl	800101c <__aeabi_fcmpgt>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <displayvolt+0x80>
	{
		// 3212 3175
		SSD1306_DrawFilledRectangle(6, 32, 25, 29, 1);
 80010a0:	2301      	movs	r3, #1
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	231d      	movs	r3, #29
 80010a6:	2219      	movs	r2, #25
 80010a8:	2120      	movs	r1, #32
 80010aa:	2006      	movs	r0, #6
 80010ac:	f000 fed0 	bl	8001e50 <SSD1306_DrawFilledRectangle>
	}

	if (akbvoltage > 13.05f)
 80010b0:	493a      	ldr	r1, [pc, #232]	; (800119c <displayvolt+0x16c>)
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f7ff ffb2 	bl	800101c <__aeabi_fcmpgt>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d007      	beq.n	80010ce <displayvolt+0x9e>
	{
		SSD1306_DrawFilledRectangle(33, 32, 25, 29, 1);
 80010be:	2301      	movs	r3, #1
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	231d      	movs	r3, #29
 80010c4:	2219      	movs	r2, #25
 80010c6:	2120      	movs	r1, #32
 80010c8:	2021      	movs	r0, #33	; 0x21
 80010ca:	f000 fec1 	bl	8001e50 <SSD1306_DrawFilledRectangle>
	}
	if (akbvoltage > 13.5f)
 80010ce:	4934      	ldr	r1, [pc, #208]	; (80011a0 <displayvolt+0x170>)
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f7ff ffa3 	bl	800101c <__aeabi_fcmpgt>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <displayvolt+0xbc>
	{
		SSD1306_DrawFilledRectangle(60, 32, 25, 29, 1);
 80010dc:	2301      	movs	r3, #1
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	231d      	movs	r3, #29
 80010e2:	2219      	movs	r2, #25
 80010e4:	2120      	movs	r1, #32
 80010e6:	203c      	movs	r0, #60	; 0x3c
 80010e8:	f000 feb2 	bl	8001e50 <SSD1306_DrawFilledRectangle>
	}
	if (akbvoltage > 13.95f)
 80010ec:	492d      	ldr	r1, [pc, #180]	; (80011a4 <displayvolt+0x174>)
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff ff94 	bl	800101c <__aeabi_fcmpgt>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d007      	beq.n	800110a <displayvolt+0xda>
	{
		SSD1306_DrawFilledRectangle(87, 32, 25, 29, 1);
 80010fa:	2301      	movs	r3, #1
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	231d      	movs	r3, #29
 8001100:	2219      	movs	r2, #25
 8001102:	2120      	movs	r1, #32
 8001104:	2057      	movs	r0, #87	; 0x57
 8001106:	f000 fea3 	bl	8001e50 <SSD1306_DrawFilledRectangle>
	}
	if (cflag == 1)
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d118      	bne.n	8001142 <displayvolt+0x112>
	{
		SSD1306_DrawLine(125, 2, 110, 12, 1);
 8001110:	2301      	movs	r3, #1
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	230c      	movs	r3, #12
 8001116:	226e      	movs	r2, #110	; 0x6e
 8001118:	2102      	movs	r1, #2
 800111a:	207d      	movs	r0, #125	; 0x7d
 800111c:	f000 fd33 	bl	8001b86 <SSD1306_DrawLine>
		SSD1306_DrawLine(125, 12, 110, 12, 1);
 8001120:	2301      	movs	r3, #1
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	230c      	movs	r3, #12
 8001126:	226e      	movs	r2, #110	; 0x6e
 8001128:	210c      	movs	r1, #12
 800112a:	207d      	movs	r0, #125	; 0x7d
 800112c:	f000 fd2b 	bl	8001b86 <SSD1306_DrawLine>
		SSD1306_DrawLine(125, 12, 110, 22, 1);
 8001130:	2301      	movs	r3, #1
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2316      	movs	r3, #22
 8001136:	226e      	movs	r2, #110	; 0x6e
 8001138:	210c      	movs	r1, #12
 800113a:	207d      	movs	r0, #125	; 0x7d
 800113c:	f000 fd23 	bl	8001b86 <SSD1306_DrawLine>
 8001140:	e008      	b.n	8001154 <displayvolt+0x124>
	}
	else
	{
		SSD1306_GotoXY(85, 5);
 8001142:	2105      	movs	r1, #5
 8001144:	2055      	movs	r0, #85	; 0x55
 8001146:	f000 fc63 	bl	8001a10 <SSD1306_GotoXY>
		//sprintf(str, "main %1.1f V", mainvoltage);
		SSD1306_Puts("UPS", &Font_11x18, 1);
 800114a:	2201      	movs	r2, #1
 800114c:	4916      	ldr	r1, [pc, #88]	; (80011a8 <displayvolt+0x178>)
 800114e:	4817      	ldr	r0, [pc, #92]	; (80011ac <displayvolt+0x17c>)
 8001150:	f000 fcf4 	bl	8001b3c <SSD1306_Puts>
	}
	sprintf(str, "main %1.2f V", mainvoltage);
 8001154:	68b8      	ldr	r0, [r7, #8]
 8001156:	f7ff f967 	bl	8000428 <__aeabi_f2d>
 800115a:	4603      	mov	r3, r0
 800115c:	460c      	mov	r4, r1
 800115e:	f107 0014 	add.w	r0, r7, #20
 8001162:	461a      	mov	r2, r3
 8001164:	4623      	mov	r3, r4
 8001166:	4912      	ldr	r1, [pc, #72]	; (80011b0 <displayvolt+0x180>)
 8001168:	f004 fa00 	bl	800556c <siprintf>
	SSD1306_GotoXY(0,0);
 800116c:	2100      	movs	r1, #0
 800116e:	2000      	movs	r0, #0
 8001170:	f000 fc4e 	bl	8001a10 <SSD1306_GotoXY>
	SSD1306_Puts(str, &Font_7x10, 1);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2201      	movs	r2, #1
 800117a:	4906      	ldr	r1, [pc, #24]	; (8001194 <displayvolt+0x164>)
 800117c:	4618      	mov	r0, r3
 800117e:	f000 fcdd 	bl	8001b3c <SSD1306_Puts>

    SSD1306_UpdateScreen();
 8001182:	f000 fba1 	bl	80018c8 <SSD1306_UpdateScreen>



    // 15 20 125 2, 125 22, 110 22, 110 2 12
}
 8001186:	bf00      	nop
 8001188:	372c      	adds	r7, #44	; 0x2c
 800118a:	46bd      	mov	sp, r7
 800118c:	bd90      	pop	{r4, r7, pc}
 800118e:	bf00      	nop
 8001190:	08006d60 	.word	0x08006d60
 8001194:	20000000 	.word	0x20000000
 8001198:	4149999a 	.word	0x4149999a
 800119c:	4150cccd 	.word	0x4150cccd
 80011a0:	41580000 	.word	0x41580000
 80011a4:	415f3333 	.word	0x415f3333
 80011a8:	20000008 	.word	0x20000008
 80011ac:	08006d70 	.word	0x08006d70
 80011b0:	08006d74 	.word	0x08006d74

080011b4 <UPS>:
// main 382
// akb

uint8_t UPS(uint8_t cflag, float Volt0, float Volt1)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	73fb      	strb	r3, [r7, #15]
	if(cflag == 1)
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d11b      	bne.n	8001200 <UPS+0x4c>
	{
		if(Volt1 < 13.5f )
 80011c8:	491f      	ldr	r1, [pc, #124]	; (8001248 <UPS+0x94>)
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff08 	bl	8000fe0 <__aeabi_fcmplt>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00a      	beq.n	80011ec <UPS+0x38>
			count++;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <UPS+0x98>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <UPS+0x98>)
 80011e0:	701a      	strb	r2, [r3, #0]
		{
			count = 0;
			return 1;
		}

		if (count > 3)
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <UPS+0x98>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d90a      	bls.n	8001200 <UPS+0x4c>
 80011ea:	e004      	b.n	80011f6 <UPS+0x42>
			count = 0;
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <UPS+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
			return 1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e023      	b.n	800123e <UPS+0x8a>
		{
			count = 0;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <UPS+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
			return 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e01e      	b.n	800123e <UPS+0x8a>
		}
	}
	if(cflag == 0)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d11b      	bne.n	800123e <UPS+0x8a>
		{
			if(Volt1 > 13.5f )
 8001206:	4910      	ldr	r1, [pc, #64]	; (8001248 <UPS+0x94>)
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff07 	bl	800101c <__aeabi_fcmpgt>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00a      	beq.n	800122a <UPS+0x76>
				count++;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <UPS+0x98>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <UPS+0x98>)
 800121e:	701a      	strb	r2, [r3, #0]
			{
				count = 0;
				return 0;
			}

			if (count > 3)
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <UPS+0x98>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d90a      	bls.n	800123e <UPS+0x8a>
 8001228:	e004      	b.n	8001234 <UPS+0x80>
				count = 0;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <UPS+0x98>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
				return 0;
 8001230:	2300      	movs	r3, #0
 8001232:	e004      	b.n	800123e <UPS+0x8a>
			{
				count = 0;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <UPS+0x98>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
				return 1;
 800123a:	2301      	movs	r3, #1
 800123c:	e7ff      	b.n	800123e <UPS+0x8a>
			}
		}


}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	41580000 	.word	0x41580000
 800124c:	20000215 	.word	0x20000215

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001256:	f001 f827 	bl	80022a8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125a:	f000 f8f1 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125e:	f000 f9e5 	bl	800162c <MX_GPIO_Init>
  MX_DMA_Init();
 8001262:	f000 f9c5 	bl	80015f0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001266:	f000 f995 	bl	8001594 <MX_I2C1_Init>
  MX_ADC1_Init();
 800126a:	f000 f945 	bl	80014f8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 800126e:	f000 fa67 	bl	8001740 <SSD1306_Init>
  //HAL_TIM_Base_Start(&htim2);
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001272:	486a      	ldr	r0, [pc, #424]	; (800141c <main+0x1cc>)
 8001274:	f001 fcaa 	bl	8002bcc <HAL_ADCEx_Calibration_Start>
   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&voltage, 2);
 8001278:	2202      	movs	r2, #2
 800127a:	4969      	ldr	r1, [pc, #420]	; (8001420 <main+0x1d0>)
 800127c:	4867      	ldr	r0, [pc, #412]	; (800141c <main+0x1cc>)
 800127e:	f001 f96f 	bl	8002560 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   float 		ON, OFF, Save;

   ON = 13.4f;
 8001282:	4b68      	ldr	r3, [pc, #416]	; (8001424 <main+0x1d4>)
 8001284:	617b      	str	r3, [r7, #20]
   OFF = 14.3f;
 8001286:	4b68      	ldr	r3, [pc, #416]	; (8001428 <main+0x1d8>)
 8001288:	613b      	str	r3, [r7, #16]
   Save = 12.1f;
 800128a:	4b68      	ldr	r3, [pc, #416]	; (800142c <main+0x1dc>)
 800128c:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001294:	4866      	ldr	r0, [pc, #408]	; (8001430 <main+0x1e0>)
 8001296:	f002 f9d5 	bl	8003644 <HAL_GPIO_WritePin>
 //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
   uint8_t displayflag = 0,
 800129a:	2300      	movs	r3, #0
 800129c:	77fb      	strb	r3, [r7, #31]
		   chargeflag = 0,
 800129e:	2300      	movs	r3, #0
 80012a0:	77bb      	strb	r3, [r7, #30]
		   //UPC = 0,
   	   	   AkOn = 0,
 80012a2:	2300      	movs	r3, #0
 80012a4:	777b      	strb	r3, [r7, #29]
   	       AkOff = 0,
 80012a6:	2300      	movs	r3, #0
 80012a8:	773b      	strb	r3, [r7, #28]
		   AkSave = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	76fb      	strb	r3, [r7, #27]
   float voltf[2] = {0.0f};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]

  while (1)
  {


	  	  if(flag)
 80012b6:	4b5f      	ldr	r3, [pc, #380]	; (8001434 <main+0x1e4>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0fa      	beq.n	80012b6 <main+0x66>
	  	  {


	  		  flag = 0;
 80012c0:	4b5c      	ldr	r3, [pc, #368]	; (8001434 <main+0x1e4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]

			  HAL_ADC_Stop_DMA(&hadc1);
 80012c6:	4855      	ldr	r0, [pc, #340]	; (800141c <main+0x1cc>)
 80012c8:	f001 fa28 	bl	800271c <HAL_ADC_Stop_DMA>

			  voltf[0] = voltage[0] * koef[0];
 80012cc:	4b54      	ldr	r3, [pc, #336]	; (8001420 <main+0x1d0>)
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fc92 	bl	8000bfc <__aeabi_i2f>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b57      	ldr	r3, [pc, #348]	; (8001438 <main+0x1e8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4619      	mov	r1, r3
 80012e0:	4610      	mov	r0, r2
 80012e2:	f7ff fcdf 	bl	8000ca4 <__aeabi_fmul>
 80012e6:	4603      	mov	r3, r0
 80012e8:	607b      	str	r3, [r7, #4]
			  voltf[1] = voltage[1] * koef[1];
 80012ea:	4b4d      	ldr	r3, [pc, #308]	; (8001420 <main+0x1d0>)
 80012ec:	885b      	ldrh	r3, [r3, #2]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fc83 	bl	8000bfc <__aeabi_i2f>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b4f      	ldr	r3, [pc, #316]	; (8001438 <main+0x1e8>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f7ff fcd0 	bl	8000ca4 <__aeabi_fmul>
 8001304:	4603      	mov	r3, r0
 8001306:	60bb      	str	r3, [r7, #8]

			  chargeflag = UPS(chargeflag, voltf[0], voltf[1]);
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	7fbb      	ldrb	r3, [r7, #30]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff50 	bl	80011b4 <UPS>
 8001314:	4603      	mov	r3, r0
 8001316:	77bb      	strb	r3, [r7, #30]

			  if(chargeflag == 0)
 8001318:	7fbb      	ldrb	r3, [r7, #30]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d11e      	bne.n	800135c <main+0x10c>
			  {
				  if (voltf[0] > Save)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4619      	mov	r1, r3
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff fe5c 	bl	8000fe0 <__aeabi_fcmplt>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d008      	beq.n	8001340 <main+0xf0>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001334:	483e      	ldr	r0, [pc, #248]	; (8001430 <main+0x1e0>)
 8001336:	f002 f985 	bl	8003644 <HAL_GPIO_WritePin>
					  AkSave = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	76fb      	strb	r3, [r7, #27]
 800133e:	e002      	b.n	8001346 <main+0xf6>
					  count = 0;
					  chargeflag = 1;
				  }*/
				  else
				  {
				  	  AkSave++;
 8001340:	7efb      	ldrb	r3, [r7, #27]
 8001342:	3301      	adds	r3, #1
 8001344:	76fb      	strb	r3, [r7, #27]
				  }
				  if(AkSave > 8)
 8001346:	7efb      	ldrb	r3, [r7, #27]
 8001348:	2b08      	cmp	r3, #8
 800134a:	d907      	bls.n	800135c <main+0x10c>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001352:	4837      	ldr	r0, [pc, #220]	; (8001430 <main+0x1e0>)
 8001354:	f002 f976 	bl	8003644 <HAL_GPIO_WritePin>
					 AkSave = 10;
 8001358:	230a      	movs	r3, #10
 800135a:	76fb      	strb	r3, [r7, #27]
				  }

			  }
			  if (chargeflag == 1)
 800135c:	7fbb      	ldrb	r3, [r7, #30]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d139      	bne.n	80013d6 <main+0x186>
						  chargeflag = 0;
						  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);

					  }*/

					  if(voltf[0] > OFF && voltf[1] > 14.5f)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4619      	mov	r1, r3
 8001366:	6938      	ldr	r0, [r7, #16]
 8001368:	f7ff fe3a 	bl	8000fe0 <__aeabi_fcmplt>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <main+0x13a>
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	4931      	ldr	r1, [pc, #196]	; (800143c <main+0x1ec>)
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fe50 	bl	800101c <__aeabi_fcmpgt>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <main+0x13a>
						  AkOff++;
 8001382:	7f3b      	ldrb	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	773b      	strb	r3, [r7, #28]
 8001388:	e001      	b.n	800138e <main+0x13e>
					  else
						  AkOff = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	773b      	strb	r3, [r7, #28]

					  if(voltf[0] < ON)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4619      	mov	r1, r3
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f7ff fe42 	bl	800101c <__aeabi_fcmpgt>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <main+0x156>
						  AkOn++;
 800139e:	7f7b      	ldrb	r3, [r7, #29]
 80013a0:	3301      	adds	r3, #1
 80013a2:	777b      	strb	r3, [r7, #29]
 80013a4:	e001      	b.n	80013aa <main+0x15a>
					  else
						  AkOn = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	777b      	strb	r3, [r7, #29]



				  if(AkOn > 49)
 80013aa:	7f7b      	ldrb	r3, [r7, #29]
 80013ac:	2b31      	cmp	r3, #49	; 0x31
 80013ae:	d907      	bls.n	80013c0 <main+0x170>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b6:	481e      	ldr	r0, [pc, #120]	; (8001430 <main+0x1e0>)
 80013b8:	f002 f944 	bl	8003644 <HAL_GPIO_WritePin>
					  AkOn = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	777b      	strb	r3, [r7, #29]
				  }

				  if(AkOff > 49)
 80013c0:	7f3b      	ldrb	r3, [r7, #28]
 80013c2:	2b31      	cmp	r3, #49	; 0x31
 80013c4:	d907      	bls.n	80013d6 <main+0x186>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013cc:	4818      	ldr	r0, [pc, #96]	; (8001430 <main+0x1e0>)
 80013ce:	f002 f939 	bl	8003644 <HAL_GPIO_WritePin>
					  AkOff = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	773b      	strb	r3, [r7, #28]
				  }

			  }
			  if(displayflag > 9)
 80013d6:	7ffb      	ldrb	r3, [r7, #31]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d907      	bls.n	80013ec <main+0x19c>
			  {
				  displayvolt(voltf[0], voltf[1], chargeflag);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68b9      	ldr	r1, [r7, #8]
 80013e0:	7fba      	ldrb	r2, [r7, #30]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fe24 	bl	8001030 <displayvolt>
				  displayflag = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	77fb      	strb	r3, [r7, #31]
			  }
				  //something code

			  voltage[0] = 0;
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <main+0x1d0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	801a      	strh	r2, [r3, #0]
	  		  voltage[1] = 0;
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <main+0x1d0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	805a      	strh	r2, [r3, #2]
	  		  voltf[0] = 0;
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
	  		  voltf[1] = 0;
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
	  		  displayflag++;
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	3301      	adds	r3, #1
 8001408:	77fb      	strb	r3, [r7, #31]
			  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&voltage, 2);
 800140a:	2202      	movs	r2, #2
 800140c:	4904      	ldr	r1, [pc, #16]	; (8001420 <main+0x1d0>)
 800140e:	4803      	ldr	r0, [pc, #12]	; (800141c <main+0x1cc>)
 8001410:	f001 f8a6 	bl	8002560 <HAL_ADC_Start_DMA>

			  HAL_Delay(50);
 8001414:	2032      	movs	r0, #50	; 0x32
 8001416:	f000 ffa9 	bl	800236c <HAL_Delay>
	  	  if(flag)
 800141a:	e74c      	b.n	80012b6 <main+0x66>
 800141c:	20000680 	.word	0x20000680
 8001420:	20000010 	.word	0x20000010
 8001424:	41566666 	.word	0x41566666
 8001428:	4164cccd 	.word	0x4164cccd
 800142c:	4141999a 	.word	0x4141999a
 8001430:	40010c00 	.word	0x40010c00
 8001434:	20000214 	.word	0x20000214
 8001438:	20000014 	.word	0x20000014
 800143c:	41680000 	.word	0x41680000

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b094      	sub	sp, #80	; 0x50
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	2228      	movs	r2, #40	; 0x28
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f003 fc34 	bl	8004cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001470:	2301      	movs	r3, #1
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147e:	2301      	movs	r3, #1
 8001480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001482:	2302      	movs	r3, #2
 8001484:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800148c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001490:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001496:	4618      	mov	r0, r3
 8001498:	f002 fe58 	bl	800414c <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014a2:	f000 f947 	bl	8001734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	230f      	movs	r3, #15
 80014a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 f8c2 	bl	800464c <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014ce:	f000 f931 	bl	8001734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014d2:	2302      	movs	r3, #2
 80014d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014da:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 fa50 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014ea:	f000 f923 	bl	8001734 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	3750      	adds	r7, #80	; 0x50
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_ADC1_Init+0x94>)
 800150a:	4a21      	ldr	r2, [pc, #132]	; (8001590 <MX_ADC1_Init+0x98>)
 800150c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_ADC1_Init+0x94>)
 8001510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001514:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_ADC1_Init+0x94>)
 8001518:	2200      	movs	r2, #0
 800151a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_ADC1_Init+0x94>)
 800151e:	2200      	movs	r2, #0
 8001520:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <MX_ADC1_Init+0x94>)
 8001524:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001528:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_ADC1_Init+0x94>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_ADC1_Init+0x94>)
 8001532:	2202      	movs	r2, #2
 8001534:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001536:	4815      	ldr	r0, [pc, #84]	; (800158c <MX_ADC1_Init+0x94>)
 8001538:	f000 ff3a 	bl	80023b0 <HAL_ADC_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001542:	f000 f8f7 	bl	8001734 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800154a:	2301      	movs	r3, #1
 800154c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	4619      	mov	r1, r3
 8001556:	480d      	ldr	r0, [pc, #52]	; (800158c <MX_ADC1_Init+0x94>)
 8001558:	f001 f93e 	bl	80027d8 <HAL_ADC_ConfigChannel>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001562:	f000 f8e7 	bl	8001734 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001566:	2301      	movs	r3, #1
 8001568:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800156a:	2302      	movs	r3, #2
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_ADC1_Init+0x94>)
 8001574:	f001 f930 	bl	80027d8 <HAL_ADC_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800157e:	f000 f8d9 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000680 	.word	0x20000680
 8001590:	40012400 	.word	0x40012400

08001594 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_I2C1_Init+0x50>)
 800159a:	4a13      	ldr	r2, [pc, #76]	; (80015e8 <MX_I2C1_Init+0x54>)
 800159c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_I2C1_Init+0x50>)
 80015a0:	4a12      	ldr	r2, [pc, #72]	; (80015ec <MX_I2C1_Init+0x58>)
 80015a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_I2C1_Init+0x50>)
 80015b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <MX_I2C1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_I2C1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	; (80015e4 <MX_I2C1_Init+0x50>)
 80015d2:	f002 f84f 	bl	8003674 <HAL_I2C_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015dc:	f000 f8aa 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000062c 	.word	0x2000062c
 80015e8:	40005400 	.word	0x40005400
 80015ec:	00061a80 	.word	0x00061a80

080015f0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_DMA_Init+0x38>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <MX_DMA_Init+0x38>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6153      	str	r3, [r2, #20]
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_DMA_Init+0x38>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	200b      	movs	r0, #11
 8001614:	f001 fc5d 	bl	8002ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001618:	200b      	movs	r0, #11
 800161a:	f001 fc76 	bl	8002f0a <HAL_NVIC_EnableIRQ>

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <MX_GPIO_Init+0xd0>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a2d      	ldr	r2, [pc, #180]	; (80016fc <MX_GPIO_Init+0xd0>)
 8001646:	f043 0310 	orr.w	r3, r3, #16
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <MX_GPIO_Init+0xd0>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MX_GPIO_Init+0xd0>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a27      	ldr	r2, [pc, #156]	; (80016fc <MX_GPIO_Init+0xd0>)
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <MX_GPIO_Init+0xd0>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <MX_GPIO_Init+0xd0>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a21      	ldr	r2, [pc, #132]	; (80016fc <MX_GPIO_Init+0xd0>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_GPIO_Init+0xd0>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_GPIO_Init+0xd0>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <MX_GPIO_Init+0xd0>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_GPIO_Init+0xd0>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a6:	4816      	ldr	r0, [pc, #88]	; (8001700 <MX_GPIO_Init+0xd4>)
 80016a8:	f001 ffcc 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b2:	4814      	ldr	r0, [pc, #80]	; (8001704 <MX_GPIO_Init+0xd8>)
 80016b4:	f001 ffc6 	bl	8003644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4619      	mov	r1, r3
 80016d0:	480b      	ldr	r0, [pc, #44]	; (8001700 <MX_GPIO_Init+0xd4>)
 80016d2:	f001 fe5d 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_GPIO_Init+0xd8>)
 80016f0:	f001 fe4e 	bl	8003390 <HAL_GPIO_Init>

}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	40011000 	.word	0x40011000
 8001704:	40010c00 	.word	0x40010c00

08001708 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_ADC_ConvCpltCallback+0x24>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d102      	bne.n	8001720 <HAL_ADC_ConvCpltCallback+0x18>
		flag = 1;
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_ADC_ConvCpltCallback+0x28>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40012400 	.word	0x40012400
 8001730:	20000214 	.word	0x20000214

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001746:	f000 fbd1 	bl	8001eec <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800174a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800174e:	2201      	movs	r2, #1
 8001750:	2178      	movs	r1, #120	; 0x78
 8001752:	485b      	ldr	r0, [pc, #364]	; (80018c0 <SSD1306_Init+0x180>)
 8001754:	f002 f9c4 	bl	8003ae0 <HAL_I2C_IsDeviceReady>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800175e:	2300      	movs	r3, #0
 8001760:	e0a9      	b.n	80018b6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001762:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001766:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001768:	e002      	b.n	8001770 <SSD1306_Init+0x30>
		p--;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3b01      	subs	r3, #1
 800176e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f9      	bne.n	800176a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001776:	22ae      	movs	r2, #174	; 0xae
 8001778:	2100      	movs	r1, #0
 800177a:	2078      	movs	r0, #120	; 0x78
 800177c:	f000 fc12 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001780:	2220      	movs	r2, #32
 8001782:	2100      	movs	r1, #0
 8001784:	2078      	movs	r0, #120	; 0x78
 8001786:	f000 fc0d 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800178a:	2210      	movs	r2, #16
 800178c:	2100      	movs	r1, #0
 800178e:	2078      	movs	r0, #120	; 0x78
 8001790:	f000 fc08 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001794:	22b0      	movs	r2, #176	; 0xb0
 8001796:	2100      	movs	r1, #0
 8001798:	2078      	movs	r0, #120	; 0x78
 800179a:	f000 fc03 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800179e:	22c8      	movs	r2, #200	; 0xc8
 80017a0:	2100      	movs	r1, #0
 80017a2:	2078      	movs	r0, #120	; 0x78
 80017a4:	f000 fbfe 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	2078      	movs	r0, #120	; 0x78
 80017ae:	f000 fbf9 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80017b2:	2210      	movs	r2, #16
 80017b4:	2100      	movs	r1, #0
 80017b6:	2078      	movs	r0, #120	; 0x78
 80017b8:	f000 fbf4 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80017bc:	2240      	movs	r2, #64	; 0x40
 80017be:	2100      	movs	r1, #0
 80017c0:	2078      	movs	r0, #120	; 0x78
 80017c2:	f000 fbef 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80017c6:	2281      	movs	r2, #129	; 0x81
 80017c8:	2100      	movs	r1, #0
 80017ca:	2078      	movs	r0, #120	; 0x78
 80017cc:	f000 fbea 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80017d0:	22ff      	movs	r2, #255	; 0xff
 80017d2:	2100      	movs	r1, #0
 80017d4:	2078      	movs	r0, #120	; 0x78
 80017d6:	f000 fbe5 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80017da:	22a1      	movs	r2, #161	; 0xa1
 80017dc:	2100      	movs	r1, #0
 80017de:	2078      	movs	r0, #120	; 0x78
 80017e0:	f000 fbe0 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80017e4:	22a6      	movs	r2, #166	; 0xa6
 80017e6:	2100      	movs	r1, #0
 80017e8:	2078      	movs	r0, #120	; 0x78
 80017ea:	f000 fbdb 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80017ee:	22a8      	movs	r2, #168	; 0xa8
 80017f0:	2100      	movs	r1, #0
 80017f2:	2078      	movs	r0, #120	; 0x78
 80017f4:	f000 fbd6 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80017f8:	223f      	movs	r2, #63	; 0x3f
 80017fa:	2100      	movs	r1, #0
 80017fc:	2078      	movs	r0, #120	; 0x78
 80017fe:	f000 fbd1 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001802:	22a4      	movs	r2, #164	; 0xa4
 8001804:	2100      	movs	r1, #0
 8001806:	2078      	movs	r0, #120	; 0x78
 8001808:	f000 fbcc 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800180c:	22d3      	movs	r2, #211	; 0xd3
 800180e:	2100      	movs	r1, #0
 8001810:	2078      	movs	r0, #120	; 0x78
 8001812:	f000 fbc7 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2078      	movs	r0, #120	; 0x78
 800181c:	f000 fbc2 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001820:	22d5      	movs	r2, #213	; 0xd5
 8001822:	2100      	movs	r1, #0
 8001824:	2078      	movs	r0, #120	; 0x78
 8001826:	f000 fbbd 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800182a:	22f0      	movs	r2, #240	; 0xf0
 800182c:	2100      	movs	r1, #0
 800182e:	2078      	movs	r0, #120	; 0x78
 8001830:	f000 fbb8 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001834:	22d9      	movs	r2, #217	; 0xd9
 8001836:	2100      	movs	r1, #0
 8001838:	2078      	movs	r0, #120	; 0x78
 800183a:	f000 fbb3 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800183e:	2222      	movs	r2, #34	; 0x22
 8001840:	2100      	movs	r1, #0
 8001842:	2078      	movs	r0, #120	; 0x78
 8001844:	f000 fbae 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001848:	22da      	movs	r2, #218	; 0xda
 800184a:	2100      	movs	r1, #0
 800184c:	2078      	movs	r0, #120	; 0x78
 800184e:	f000 fba9 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001852:	2212      	movs	r2, #18
 8001854:	2100      	movs	r1, #0
 8001856:	2078      	movs	r0, #120	; 0x78
 8001858:	f000 fba4 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800185c:	22db      	movs	r2, #219	; 0xdb
 800185e:	2100      	movs	r1, #0
 8001860:	2078      	movs	r0, #120	; 0x78
 8001862:	f000 fb9f 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001866:	2220      	movs	r2, #32
 8001868:	2100      	movs	r1, #0
 800186a:	2078      	movs	r0, #120	; 0x78
 800186c:	f000 fb9a 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001870:	228d      	movs	r2, #141	; 0x8d
 8001872:	2100      	movs	r1, #0
 8001874:	2078      	movs	r0, #120	; 0x78
 8001876:	f000 fb95 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800187a:	2214      	movs	r2, #20
 800187c:	2100      	movs	r1, #0
 800187e:	2078      	movs	r0, #120	; 0x78
 8001880:	f000 fb90 	bl	8001fa4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001884:	22af      	movs	r2, #175	; 0xaf
 8001886:	2100      	movs	r1, #0
 8001888:	2078      	movs	r0, #120	; 0x78
 800188a:	f000 fb8b 	bl	8001fa4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800188e:	222e      	movs	r2, #46	; 0x2e
 8001890:	2100      	movs	r1, #0
 8001892:	2078      	movs	r0, #120	; 0x78
 8001894:	f000 fb86 	bl	8001fa4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001898:	2000      	movs	r0, #0
 800189a:	f000 f843 	bl	8001924 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800189e:	f000 f813 	bl	80018c8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <SSD1306_Init+0x184>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <SSD1306_Init+0x184>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SSD1306_Init+0x184>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000062c 	.word	0x2000062c
 80018c4:	20000618 	.word	0x20000618

080018c8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80018ce:	2300      	movs	r3, #0
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	e01d      	b.n	8001910 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	3b50      	subs	r3, #80	; 0x50
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	2100      	movs	r1, #0
 80018de:	2078      	movs	r0, #120	; 0x78
 80018e0:	f000 fb60 	bl	8001fa4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2078      	movs	r0, #120	; 0x78
 80018ea:	f000 fb5b 	bl	8001fa4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018ee:	2210      	movs	r2, #16
 80018f0:	2100      	movs	r1, #0
 80018f2:	2078      	movs	r0, #120	; 0x78
 80018f4:	f000 fb56 	bl	8001fa4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	01db      	lsls	r3, r3, #7
 80018fc:	4a08      	ldr	r2, [pc, #32]	; (8001920 <SSD1306_UpdateScreen+0x58>)
 80018fe:	441a      	add	r2, r3
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	2140      	movs	r1, #64	; 0x40
 8001904:	2078      	movs	r0, #120	; 0x78
 8001906:	f000 fb05 	bl	8001f14 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	3301      	adds	r3, #1
 800190e:	71fb      	strb	r3, [r7, #7]
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	2b07      	cmp	r3, #7
 8001914:	d9de      	bls.n	80018d4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000218 	.word	0x20000218

08001924 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <SSD1306_Fill+0x14>
 8001934:	2300      	movs	r3, #0
 8001936:	e000      	b.n	800193a <SSD1306_Fill+0x16>
 8001938:	23ff      	movs	r3, #255	; 0xff
 800193a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193e:	4619      	mov	r1, r3
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <SSD1306_Fill+0x2c>)
 8001942:	f003 f9bb 	bl	8004cbc <memset>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000218 	.word	0x20000218

08001954 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
 800195e:	460b      	mov	r3, r1
 8001960:	80bb      	strh	r3, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	70fb      	strb	r3, [r7, #3]
	if (
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	2b7f      	cmp	r3, #127	; 0x7f
 800196a:	d848      	bhi.n	80019fe <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800196c:	88bb      	ldrh	r3, [r7, #4]
 800196e:	2b3f      	cmp	r3, #63	; 0x3f
 8001970:	d845      	bhi.n	80019fe <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <SSD1306_DrawPixel+0xb4>)
 8001974:	791b      	ldrb	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf0c      	ite	eq
 8001980:	2301      	moveq	r3, #1
 8001982:	2300      	movne	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d11a      	bne.n	80019c4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800198e:	88fa      	ldrh	r2, [r7, #6]
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	08db      	lsrs	r3, r3, #3
 8001994:	b298      	uxth	r0, r3
 8001996:	4603      	mov	r3, r0
 8001998:	01db      	lsls	r3, r3, #7
 800199a:	4413      	add	r3, r2
 800199c:	4a1b      	ldr	r2, [pc, #108]	; (8001a0c <SSD1306_DrawPixel+0xb8>)
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	b25a      	sxtb	r2, r3
 80019a2:	88bb      	ldrh	r3, [r7, #4]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	2101      	movs	r1, #1
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	b25b      	sxtb	r3, r3
 80019b0:	4313      	orrs	r3, r2
 80019b2:	b259      	sxtb	r1, r3
 80019b4:	88fa      	ldrh	r2, [r7, #6]
 80019b6:	4603      	mov	r3, r0
 80019b8:	01db      	lsls	r3, r3, #7
 80019ba:	4413      	add	r3, r2
 80019bc:	b2c9      	uxtb	r1, r1
 80019be:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <SSD1306_DrawPixel+0xb8>)
 80019c0:	54d1      	strb	r1, [r2, r3]
 80019c2:	e01d      	b.n	8001a00 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019c4:	88fa      	ldrh	r2, [r7, #6]
 80019c6:	88bb      	ldrh	r3, [r7, #4]
 80019c8:	08db      	lsrs	r3, r3, #3
 80019ca:	b298      	uxth	r0, r3
 80019cc:	4603      	mov	r3, r0
 80019ce:	01db      	lsls	r3, r3, #7
 80019d0:	4413      	add	r3, r2
 80019d2:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <SSD1306_DrawPixel+0xb8>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	b25a      	sxtb	r2, r3
 80019d8:	88bb      	ldrh	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	4013      	ands	r3, r2
 80019ec:	b259      	sxtb	r1, r3
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	4603      	mov	r3, r0
 80019f2:	01db      	lsls	r3, r3, #7
 80019f4:	4413      	add	r3, r2
 80019f6:	b2c9      	uxtb	r1, r1
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <SSD1306_DrawPixel+0xb8>)
 80019fa:	54d1      	strb	r1, [r2, r3]
 80019fc:	e000      	b.n	8001a00 <SSD1306_DrawPixel+0xac>
		return;
 80019fe:	bf00      	nop
	}
}
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000618 	.word	0x20000618
 8001a0c:	20000218 	.word	0x20000218

08001a10 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	460a      	mov	r2, r1
 8001a1a:	80fb      	strh	r3, [r7, #6]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <SSD1306_GotoXY+0x28>)
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <SSD1306_GotoXY+0x28>)
 8001a28:	88bb      	ldrh	r3, [r7, #4]
 8001a2a:	8053      	strh	r3, [r2, #2]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000618 	.word	0x20000618

08001a3c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
	if (
 8001a58:	2b7f      	cmp	r3, #127	; 0x7f
 8001a5a:	dc07      	bgt.n	8001a6c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001a5e:	885b      	ldrh	r3, [r3, #2]
 8001a60:	461a      	mov	r2, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a68:	2b3f      	cmp	r3, #63	; 0x3f
 8001a6a:	dd01      	ble.n	8001a70 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e05e      	b.n	8001b2e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e04b      	b.n	8001b0e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	3b20      	subs	r3, #32
 8001a7e:	6839      	ldr	r1, [r7, #0]
 8001a80:	7849      	ldrb	r1, [r1, #1]
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4619      	mov	r1, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e030      	b.n	8001afc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d010      	beq.n	8001acc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001aac:	881a      	ldrh	r2, [r3, #0]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b298      	uxth	r0, r3
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001ab8:	885a      	ldrh	r2, [r3, #2]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	79ba      	ldrb	r2, [r7, #6]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff ff45 	bl	8001954 <SSD1306_DrawPixel>
 8001aca:	e014      	b.n	8001af6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001ace:	881a      	ldrh	r2, [r3, #0]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b298      	uxth	r0, r3
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001ada:	885a      	ldrh	r2, [r3, #2]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b299      	uxth	r1, r3
 8001ae4:	79bb      	ldrb	r3, [r7, #6]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf0c      	ite	eq
 8001aea:	2301      	moveq	r3, #1
 8001aec:	2300      	movne	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	f7ff ff2f 	bl	8001954 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	3301      	adds	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d3c8      	bcc.n	8001a9a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	461a      	mov	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d3ad      	bcc.n	8001a76 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001b1c:	881a      	ldrh	r2, [r3, #0]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001b2a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000618 	.word	0x20000618

08001b3c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	4613      	mov	r3, r2
 8001b48:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b4a:	e012      	b.n	8001b72 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	79fa      	ldrb	r2, [r7, #7]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff71 	bl	8001a3c <SSD1306_Putc>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d002      	beq.n	8001b6c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	e008      	b.n	8001b7e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1e8      	bne.n	8001b4c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001b86:	b590      	push	{r4, r7, lr}
 8001b88:	b087      	sub	sp, #28
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	4608      	mov	r0, r1
 8001b90:	4611      	mov	r1, r2
 8001b92:	461a      	mov	r2, r3
 8001b94:	4623      	mov	r3, r4
 8001b96:	80fb      	strh	r3, [r7, #6]
 8001b98:	4603      	mov	r3, r0
 8001b9a:	80bb      	strh	r3, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001ba4:	88fb      	ldrh	r3, [r7, #6]
 8001ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba8:	d901      	bls.n	8001bae <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001baa:	237f      	movs	r3, #127	; 0x7f
 8001bac:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8001bb2:	d901      	bls.n	8001bb8 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001bb4:	237f      	movs	r3, #127	; 0x7f
 8001bb6:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001bb8:	88bb      	ldrh	r3, [r7, #4]
 8001bba:	2b3f      	cmp	r3, #63	; 0x3f
 8001bbc:	d901      	bls.n	8001bc2 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001bbe:	233f      	movs	r3, #63	; 0x3f
 8001bc0:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001bc2:	883b      	ldrh	r3, [r7, #0]
 8001bc4:	2b3f      	cmp	r3, #63	; 0x3f
 8001bc6:	d901      	bls.n	8001bcc <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001bc8:	233f      	movs	r3, #63	; 0x3f
 8001bca:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	887b      	ldrh	r3, [r7, #2]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d205      	bcs.n	8001be0 <SSD1306_DrawLine+0x5a>
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	e004      	b.n	8001bea <SSD1306_DrawLine+0x64>
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001bec:	88ba      	ldrh	r2, [r7, #4]
 8001bee:	883b      	ldrh	r3, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d205      	bcs.n	8001c00 <SSD1306_DrawLine+0x7a>
 8001bf4:	883a      	ldrh	r2, [r7, #0]
 8001bf6:	88bb      	ldrh	r3, [r7, #4]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	e004      	b.n	8001c0a <SSD1306_DrawLine+0x84>
 8001c00:	88ba      	ldrh	r2, [r7, #4]
 8001c02:	883b      	ldrh	r3, [r7, #0]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d201      	bcs.n	8001c18 <SSD1306_DrawLine+0x92>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e001      	b.n	8001c1c <SSD1306_DrawLine+0x96>
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001c1e:	88ba      	ldrh	r2, [r7, #4]
 8001c20:	883b      	ldrh	r3, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d201      	bcs.n	8001c2a <SSD1306_DrawLine+0xa4>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e001      	b.n	8001c2e <SSD1306_DrawLine+0xa8>
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001c30:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c34:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	dd06      	ble.n	8001c4a <SSD1306_DrawLine+0xc4>
 8001c3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c40:	0fda      	lsrs	r2, r3, #31
 8001c42:	4413      	add	r3, r2
 8001c44:	105b      	asrs	r3, r3, #1
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	e006      	b.n	8001c58 <SSD1306_DrawLine+0xd2>
 8001c4a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c4e:	425b      	negs	r3, r3
 8001c50:	0fda      	lsrs	r2, r3, #31
 8001c52:	4413      	add	r3, r2
 8001c54:	105b      	asrs	r3, r3, #1
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001c5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d129      	bne.n	8001cb6 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001c62:	883a      	ldrh	r2, [r7, #0]
 8001c64:	88bb      	ldrh	r3, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d205      	bcs.n	8001c76 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001c6a:	883b      	ldrh	r3, [r7, #0]
 8001c6c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001c6e:	88bb      	ldrh	r3, [r7, #4]
 8001c70:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001c72:	893b      	ldrh	r3, [r7, #8]
 8001c74:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d205      	bcs.n	8001c8a <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001c86:	893b      	ldrh	r3, [r7, #8]
 8001c88:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001c8a:	88bb      	ldrh	r3, [r7, #4]
 8001c8c:	82bb      	strh	r3, [r7, #20]
 8001c8e:	e00c      	b.n	8001caa <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001c90:	8ab9      	ldrh	r1, [r7, #20]
 8001c92:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fe5b 	bl	8001954 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001c9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	82bb      	strh	r3, [r7, #20]
 8001caa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001cae:	883b      	ldrh	r3, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dded      	ble.n	8001c90 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001cb4:	e05f      	b.n	8001d76 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001cb6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d129      	bne.n	8001d12 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001cbe:	883a      	ldrh	r2, [r7, #0]
 8001cc0:	88bb      	ldrh	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d205      	bcs.n	8001cd2 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001cc6:	883b      	ldrh	r3, [r7, #0]
 8001cc8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001cca:	88bb      	ldrh	r3, [r7, #4]
 8001ccc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001cce:	893b      	ldrh	r3, [r7, #8]
 8001cd0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001cd2:	887a      	ldrh	r2, [r7, #2]
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d205      	bcs.n	8001ce6 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001ce2:	893b      	ldrh	r3, [r7, #8]
 8001ce4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	82bb      	strh	r3, [r7, #20]
 8001cea:	e00c      	b.n	8001d06 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001cec:	8abb      	ldrh	r3, [r7, #20]
 8001cee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001cf2:	88b9      	ldrh	r1, [r7, #4]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fe2d 	bl	8001954 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001cfa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3301      	adds	r3, #1
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	82bb      	strh	r3, [r7, #20]
 8001d06:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001d0a:	887b      	ldrh	r3, [r7, #2]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	dded      	ble.n	8001cec <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001d10:	e031      	b.n	8001d76 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001d12:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001d16:	88b9      	ldrh	r1, [r7, #4]
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fe1a 	bl	8001954 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001d20:	88fa      	ldrh	r2, [r7, #6]
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d103      	bne.n	8001d30 <SSD1306_DrawLine+0x1aa>
 8001d28:	88ba      	ldrh	r2, [r7, #4]
 8001d2a:	883b      	ldrh	r3, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d021      	beq.n	8001d74 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001d30:	8afb      	ldrh	r3, [r7, #22]
 8001d32:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001d34:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dd08      	ble.n	8001d54 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001d42:	8afa      	ldrh	r2, [r7, #22]
 8001d44:	8a3b      	ldrh	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001d4c:	89fa      	ldrh	r2, [r7, #14]
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	4413      	add	r3, r2
 8001d52:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001d54:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dad8      	bge.n	8001d12 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001d60:	8afa      	ldrh	r2, [r7, #22]
 8001d62:	8a7b      	ldrh	r3, [r7, #18]
 8001d64:	4413      	add	r3, r2
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001d6a:	89ba      	ldrh	r2, [r7, #12]
 8001d6c:	88bb      	ldrh	r3, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001d72:	e7ce      	b.n	8001d12 <SSD1306_DrawLine+0x18c>
			break;
 8001d74:	bf00      	nop
		} 
	}
}
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd90      	pop	{r4, r7, pc}

08001d7c <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	4604      	mov	r4, r0
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	80fb      	strh	r3, [r7, #6]
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80bb      	strh	r3, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	807b      	strh	r3, [r7, #2]
 8001d96:	4613      	mov	r3, r2
 8001d98:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9e:	d853      	bhi.n	8001e48 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8001da0:	88bb      	ldrh	r3, [r7, #4]
 8001da2:	2b3f      	cmp	r3, #63	; 0x3f
 8001da4:	d850      	bhi.n	8001e48 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001da6:	88fa      	ldrh	r2, [r7, #6]
 8001da8:	887b      	ldrh	r3, [r7, #2]
 8001daa:	4413      	add	r3, r2
 8001dac:	2b7f      	cmp	r3, #127	; 0x7f
 8001dae:	dd03      	ble.n	8001db8 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001db6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001db8:	88ba      	ldrh	r2, [r7, #4]
 8001dba:	883b      	ldrh	r3, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	2b3f      	cmp	r3, #63	; 0x3f
 8001dc0:	dd03      	ble.n	8001dca <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001dc2:	88bb      	ldrh	r3, [r7, #4]
 8001dc4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001dc8:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001dca:	88fa      	ldrh	r2, [r7, #6]
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	4413      	add	r3, r2
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	88bc      	ldrh	r4, [r7, #4]
 8001dd4:	88b9      	ldrh	r1, [r7, #4]
 8001dd6:	88f8      	ldrh	r0, [r7, #6]
 8001dd8:	7e3b      	ldrb	r3, [r7, #24]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	4623      	mov	r3, r4
 8001dde:	f7ff fed2 	bl	8001b86 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001de2:	88ba      	ldrh	r2, [r7, #4]
 8001de4:	883b      	ldrh	r3, [r7, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	b299      	uxth	r1, r3
 8001dea:	88fa      	ldrh	r2, [r7, #6]
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	4413      	add	r3, r2
 8001df0:	b29c      	uxth	r4, r3
 8001df2:	88ba      	ldrh	r2, [r7, #4]
 8001df4:	883b      	ldrh	r3, [r7, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	88f8      	ldrh	r0, [r7, #6]
 8001dfc:	7e3b      	ldrb	r3, [r7, #24]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4613      	mov	r3, r2
 8001e02:	4622      	mov	r2, r4
 8001e04:	f7ff febf 	bl	8001b86 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001e08:	88ba      	ldrh	r2, [r7, #4]
 8001e0a:	883b      	ldrh	r3, [r7, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	b29c      	uxth	r4, r3
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	88b9      	ldrh	r1, [r7, #4]
 8001e14:	88f8      	ldrh	r0, [r7, #6]
 8001e16:	7e3b      	ldrb	r3, [r7, #24]
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	f7ff feb3 	bl	8001b86 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	4413      	add	r3, r2
 8001e26:	b298      	uxth	r0, r3
 8001e28:	88fa      	ldrh	r2, [r7, #6]
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	b29c      	uxth	r4, r3
 8001e30:	88ba      	ldrh	r2, [r7, #4]
 8001e32:	883b      	ldrh	r3, [r7, #0]
 8001e34:	4413      	add	r3, r2
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	88b9      	ldrh	r1, [r7, #4]
 8001e3a:	7e3b      	ldrb	r3, [r7, #24]
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	4622      	mov	r2, r4
 8001e42:	f7ff fea0 	bl	8001b86 <SSD1306_DrawLine>
 8001e46:	e000      	b.n	8001e4a <SSD1306_DrawRectangle+0xce>
		return;
 8001e48:	bf00      	nop
}
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd90      	pop	{r4, r7, pc}

08001e50 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	4604      	mov	r4, r0
 8001e58:	4608      	mov	r0, r1
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4623      	mov	r3, r4
 8001e60:	80fb      	strh	r3, [r7, #6]
 8001e62:	4603      	mov	r3, r0
 8001e64:	80bb      	strh	r3, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	807b      	strh	r3, [r7, #2]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	2b7f      	cmp	r3, #127	; 0x7f
 8001e72:	d836      	bhi.n	8001ee2 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001e74:	88bb      	ldrh	r3, [r7, #4]
 8001e76:	2b3f      	cmp	r3, #63	; 0x3f
 8001e78:	d833      	bhi.n	8001ee2 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	4413      	add	r3, r2
 8001e80:	2b7f      	cmp	r3, #127	; 0x7f
 8001e82:	dd03      	ble.n	8001e8c <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e8a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001e8c:	88ba      	ldrh	r2, [r7, #4]
 8001e8e:	883b      	ldrh	r3, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	2b3f      	cmp	r3, #63	; 0x3f
 8001e94:	dd03      	ble.n	8001e9e <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001e96:	88bb      	ldrh	r3, [r7, #4]
 8001e98:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001e9c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
 8001ea2:	e018      	b.n	8001ed6 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	88bb      	ldrh	r3, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	b299      	uxth	r1, r3
 8001eae:	88fa      	ldrh	r2, [r7, #6]
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b29c      	uxth	r4, r3
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	88bb      	ldrh	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	88f8      	ldrh	r0, [r7, #6]
 8001ec2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	4622      	mov	r2, r4
 8001ecc:	f7ff fe5b 	bl	8001b86 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	883a      	ldrh	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d2e1      	bcs.n	8001ea4 <SSD1306_DrawFilledRectangle+0x54>
 8001ee0:	e000      	b.n	8001ee4 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8001ee2:	bf00      	nop
	}
}
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd90      	pop	{r4, r7, pc}
	...

08001eec <ssd1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);  
}


void ssd1306_I2C_Init() {
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <ssd1306_I2C_Init+0x24>)
 8001ef4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ef6:	e002      	b.n	8001efe <ssd1306_I2C_Init+0x12>
		p--;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f9      	bne.n	8001ef8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	0003d090 	.word	0x0003d090

08001f14 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b0c7      	sub	sp, #284	; 0x11c
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4639      	mov	r1, r7
 8001f20:	600a      	str	r2, [r1, #0]
 8001f22:	4619      	mov	r1, r3
 8001f24:	1dfb      	adds	r3, r7, #7
 8001f26:	4622      	mov	r2, r4
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	1dbb      	adds	r3, r7, #6
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	460a      	mov	r2, r1
 8001f34:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	1dba      	adds	r2, r7, #6
 8001f3c:	7812      	ldrb	r2, [r2, #0]
 8001f3e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f46:	e010      	b.n	8001f6a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001f48:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f4c:	463a      	mov	r2, r7
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	441a      	add	r2, r3
 8001f52:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f56:	3301      	adds	r3, #1
 8001f58:	7811      	ldrb	r1, [r2, #0]
 8001f5a:	f107 020c 	add.w	r2, r7, #12
 8001f5e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001f60:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f64:	3301      	adds	r3, #1
 8001f66:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001f6a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	1d3a      	adds	r2, r7, #4
 8001f72:	8812      	ldrh	r2, [r2, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8e7      	bhi.n	8001f48 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001f78:	1dfb      	adds	r3, r7, #7
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	b299      	uxth	r1, r3
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	3301      	adds	r3, #1
 8001f84:	b298      	uxth	r0, r3
 8001f86:	f107 020c 	add.w	r2, r7, #12
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <ssd1306_I2C_WriteMulti+0x8c>)
 8001f92:	f001 fca7 	bl	80038e4 <HAL_I2C_Master_Transmit>
}
 8001f96:	bf00      	nop
 8001f98:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd90      	pop	{r4, r7, pc}
 8001fa0:	2000062c 	.word	0x2000062c

08001fa4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	71bb      	strb	r3, [r7, #6]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001fb6:	79bb      	ldrb	r3, [r7, #6]
 8001fb8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001fba:	797b      	ldrb	r3, [r7, #5]
 8001fbc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	b299      	uxth	r1, r3
 8001fc2:	f107 020c 	add.w	r2, r7, #12
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2302      	movs	r3, #2
 8001fcc:	4803      	ldr	r0, [pc, #12]	; (8001fdc <ssd1306_I2C_Write+0x38>)
 8001fce:	f001 fc89 	bl	80038e4 <HAL_I2C_Master_Transmit>
}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000062c 	.word	0x2000062c

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_MspInit+0x5c>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_MspInit+0x5c>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6193      	str	r3, [r2, #24]
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_MspInit+0x5c>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_MspInit+0x5c>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_MspInit+0x5c>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_MspInit+0x5c>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_MspInit+0x60>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_MspInit+0x60>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	40021000 	.word	0x40021000
 8002040:	40010000 	.word	0x40010000

08002044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a28      	ldr	r2, [pc, #160]	; (8002100 <HAL_ADC_MspInit+0xbc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d149      	bne.n	80020f8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_ADC_MspInit+0xc0>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a26      	ldr	r2, [pc, #152]	; (8002104 <HAL_ADC_MspInit+0xc0>)
 800206a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_ADC_MspInit+0xc0>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_ADC_MspInit+0xc0>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a20      	ldr	r2, [pc, #128]	; (8002104 <HAL_ADC_MspInit+0xc0>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_ADC_MspInit+0xc0>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002094:	2303      	movs	r3, #3
 8002096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002098:	2303      	movs	r3, #3
 800209a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	4619      	mov	r1, r3
 80020a2:	4819      	ldr	r0, [pc, #100]	; (8002108 <HAL_ADC_MspInit+0xc4>)
 80020a4:	f001 f974 	bl	8003390 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_ADC_MspInit+0xc8>)
 80020aa:	4a19      	ldr	r2, [pc, #100]	; (8002110 <HAL_ADC_MspInit+0xcc>)
 80020ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_ADC_MspInit+0xc8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_ADC_MspInit+0xc8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020ba:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_ADC_MspInit+0xc8>)
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_ADC_MspInit+0xc8>)
 80020c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_ADC_MspInit+0xc8>)
 80020ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_ADC_MspInit+0xc8>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020d6:	4b0d      	ldr	r3, [pc, #52]	; (800210c <HAL_ADC_MspInit+0xc8>)
 80020d8:	2200      	movs	r2, #0
 80020da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020dc:	480b      	ldr	r0, [pc, #44]	; (800210c <HAL_ADC_MspInit+0xc8>)
 80020de:	f000 ff2f 	bl	8002f40 <HAL_DMA_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80020e8:	f7ff fb24 	bl	8001734 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_ADC_MspInit+0xc8>)
 80020f0:	621a      	str	r2, [r3, #32]
 80020f2:	4a06      	ldr	r2, [pc, #24]	; (800210c <HAL_ADC_MspInit+0xc8>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020f8:	bf00      	nop
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40012400 	.word	0x40012400
 8002104:	40021000 	.word	0x40021000
 8002108:	40010800 	.word	0x40010800
 800210c:	200006b0 	.word	0x200006b0
 8002110:	40020008 	.word	0x40020008

08002114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <HAL_I2C_MspInit+0x70>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d123      	bne.n	800217c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a13      	ldr	r2, [pc, #76]	; (8002188 <HAL_I2C_MspInit+0x74>)
 800213a:	f043 0308 	orr.w	r3, r3, #8
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800214c:	23c0      	movs	r3, #192	; 0xc0
 800214e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002150:	2312      	movs	r3, #18
 8002152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4619      	mov	r1, r3
 800215e:	480b      	ldr	r0, [pc, #44]	; (800218c <HAL_I2C_MspInit+0x78>)
 8002160:	f001 f916 	bl	8003390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_I2C_MspInit+0x74>)
 800216a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800216e:	61d3      	str	r3, [r2, #28]
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_I2C_MspInit+0x74>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800217c:	bf00      	nop
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40005400 	.word	0x40005400
 8002188:	40021000 	.word	0x40021000
 800218c:	40010c00 	.word	0x40010c00

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <HardFault_Handler+0x4>

080021a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <MemManage_Handler+0x4>

080021a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ac:	e7fe      	b.n	80021ac <BusFault_Handler+0x4>

080021ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b2:	e7fe      	b.n	80021b2 <UsageFault_Handler+0x4>

080021b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021dc:	f000 f8aa 	bl	8002334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <DMA1_Channel1_IRQHandler+0x10>)
 80021ea:	f000 ff9d 	bl	8003128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200006b0 	.word	0x200006b0

080021f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <_sbrk+0x50>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x16>
		heap_end = &end;
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <_sbrk+0x50>)
 800220a:	4a10      	ldr	r2, [pc, #64]	; (800224c <_sbrk+0x54>)
 800220c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <_sbrk+0x50>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <_sbrk+0x50>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	466a      	mov	r2, sp
 800221e:	4293      	cmp	r3, r2
 8002220:	d907      	bls.n	8002232 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002222:	f002 fd21 	bl	8004c68 <__errno>
 8002226:	4602      	mov	r2, r0
 8002228:	230c      	movs	r3, #12
 800222a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800222c:	f04f 33ff 	mov.w	r3, #4294967295
 8002230:	e006      	b.n	8002240 <_sbrk+0x48>
	}

	heap_end += incr;
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <_sbrk+0x50>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a03      	ldr	r2, [pc, #12]	; (8002248 <_sbrk+0x50>)
 800223c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000620 	.word	0x20000620
 800224c:	20000700 	.word	0x20000700

08002250 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800225e:	490d      	ldr	r1, [pc, #52]	; (8002294 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002264:	e002      	b.n	800226c <LoopCopyDataInit>

08002266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226a:	3304      	adds	r3, #4

0800226c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800226c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002270:	d3f9      	bcc.n	8002266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002274:	4c0a      	ldr	r4, [pc, #40]	; (80022a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002278:	e001      	b.n	800227e <LoopFillZerobss>

0800227a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800227c:	3204      	adds	r2, #4

0800227e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002280:	d3fb      	bcc.n	800227a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002282:	f7ff ffe5 	bl	8002250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002286:	f002 fcf5 	bl	8004c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800228a:	f7fe ffe1 	bl	8001250 <main>
  bx lr
 800228e:	4770      	bx	lr
  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002294:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002298:	080084f0 	.word	0x080084f0
  ldr r2, =_sbss
 800229c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80022a0:	200006fc 	.word	0x200006fc

080022a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC1_2_IRQHandler>
	...

080022a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_Init+0x28>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <HAL_Init+0x28>)
 80022b2:	f043 0310 	orr.w	r3, r3, #16
 80022b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b8:	2003      	movs	r0, #3
 80022ba:	f000 fdff 	bl	8002ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022be:	2000      	movs	r0, #0
 80022c0:	f000 f808 	bl	80022d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c4:	f7ff fe8c 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40022000 	.word	0x40022000

080022d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_InitTick+0x54>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_InitTick+0x58>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fe17 	bl	8002f26 <HAL_SYSTICK_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e00e      	b.n	8002320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b0f      	cmp	r3, #15
 8002306:	d80a      	bhi.n	800231e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002308:	2200      	movs	r2, #0
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	f000 fddf 	bl	8002ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <HAL_InitTick+0x5c>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	2000001c 	.word	0x2000001c
 800232c:	20000024 	.word	0x20000024
 8002330:	20000020 	.word	0x20000020

08002334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_IncTick+0x1c>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_IncTick+0x20>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4413      	add	r3, r2
 8002344:	4a03      	ldr	r2, [pc, #12]	; (8002354 <HAL_IncTick+0x20>)
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000024 	.word	0x20000024
 8002354:	200006f4 	.word	0x200006f4

08002358 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b02      	ldr	r3, [pc, #8]	; (8002368 <HAL_GetTick+0x10>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	200006f4 	.word	0x200006f4

0800236c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff fff0 	bl	8002358 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d005      	beq.n	8002392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_Delay+0x40>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002392:	bf00      	nop
 8002394:	f7ff ffe0 	bl	8002358 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d8f7      	bhi.n	8002394 <HAL_Delay+0x28>
  {
  }
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000024 	.word	0x20000024

080023b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0be      	b.n	8002550 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fe28 	bl	8002044 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fb41 	bl	8002a7c <ADC_ConversionStop_Disable>
 80023fa:	4603      	mov	r3, r0
 80023fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	f040 8099 	bne.w	800253e <HAL_ADC_Init+0x18e>
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 8095 	bne.w	800253e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800241c:	f023 0302 	bic.w	r3, r3, #2
 8002420:	f043 0202 	orr.w	r2, r3, #2
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002430:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	7b1b      	ldrb	r3, [r3, #12]
 8002436:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002438:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	4313      	orrs	r3, r2
 800243e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002448:	d003      	beq.n	8002452 <HAL_ADC_Init+0xa2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_ADC_Init+0xa8>
 8002452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002456:	e000      	b.n	800245a <HAL_ADC_Init+0xaa>
 8002458:	2300      	movs	r3, #0
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7d1b      	ldrb	r3, [r3, #20]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d119      	bne.n	800249c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7b1b      	ldrb	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d109      	bne.n	8002484 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	3b01      	subs	r3, #1
 8002476:	035a      	lsls	r2, r3, #13
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	e00b      	b.n	800249c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	f043 0201 	orr.w	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_ADC_Init+0x1a8>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	430b      	orrs	r3, r1
 80024c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024cc:	d003      	beq.n	80024d6 <HAL_ADC_Init+0x126>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d104      	bne.n	80024e0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	3b01      	subs	r3, #1
 80024dc:	051b      	lsls	r3, r3, #20
 80024de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	4b18      	ldr	r3, [pc, #96]	; (800255c <HAL_ADC_Init+0x1ac>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	429a      	cmp	r2, r3
 8002502:	d10b      	bne.n	800251c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	f023 0303 	bic.w	r3, r3, #3
 8002512:	f043 0201 	orr.w	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800251a:	e018      	b.n	800254e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	f023 0312 	bic.w	r3, r3, #18
 8002524:	f043 0210 	orr.w	r2, r3, #16
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800253c:	e007      	b.n	800254e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	f043 0210 	orr.w	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	ffe1f7fd 	.word	0xffe1f7fd
 800255c:	ff1f0efe 	.word	0xff1f0efe

08002560 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a64      	ldr	r2, [pc, #400]	; (8002708 <HAL_ADC_Start_DMA+0x1a8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d004      	beq.n	8002584 <HAL_ADC_Start_DMA+0x24>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a63      	ldr	r2, [pc, #396]	; (800270c <HAL_ADC_Start_DMA+0x1ac>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d106      	bne.n	8002592 <HAL_ADC_Start_DMA+0x32>
 8002584:	4b60      	ldr	r3, [pc, #384]	; (8002708 <HAL_ADC_Start_DMA+0x1a8>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 80b3 	bne.w	80026f8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_Start_DMA+0x40>
 800259c:	2302      	movs	r3, #2
 800259e:	e0ae      	b.n	80026fe <HAL_ADC_Start_DMA+0x19e>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fa0d 	bl	80029c8 <ADC_Enable>
 80025ae:	4603      	mov	r3, r0
 80025b0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f040 809a 	bne.w	80026ee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a4e      	ldr	r2, [pc, #312]	; (800270c <HAL_ADC_Start_DMA+0x1ac>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d105      	bne.n	80025e4 <HAL_ADC_Start_DMA+0x84>
 80025d8:	4b4b      	ldr	r3, [pc, #300]	; (8002708 <HAL_ADC_Start_DMA+0x1a8>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d115      	bne.n	8002610 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d026      	beq.n	800264c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002606:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800260e:	e01d      	b.n	800264c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a39      	ldr	r2, [pc, #228]	; (8002708 <HAL_ADC_Start_DMA+0x1a8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <HAL_ADC_Start_DMA+0xd0>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a38      	ldr	r2, [pc, #224]	; (800270c <HAL_ADC_Start_DMA+0x1ac>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d10d      	bne.n	800264c <HAL_ADC_Start_DMA+0xec>
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_ADC_Start_DMA+0x1a8>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002644:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	f023 0206 	bic.w	r2, r3, #6
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
 8002664:	e002      	b.n	800266c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4a25      	ldr	r2, [pc, #148]	; (8002710 <HAL_ADC_Start_DMA+0x1b0>)
 800267a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a24      	ldr	r2, [pc, #144]	; (8002714 <HAL_ADC_Start_DMA+0x1b4>)
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a23      	ldr	r2, [pc, #140]	; (8002718 <HAL_ADC_Start_DMA+0x1b8>)
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0202 	mvn.w	r2, #2
 8002694:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a18      	ldr	r0, [r3, #32]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	334c      	adds	r3, #76	; 0x4c
 80026b0:	4619      	mov	r1, r3
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f000 fc9d 	bl	8002ff4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026c4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026c8:	d108      	bne.n	80026dc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80026d8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80026da:	e00f      	b.n	80026fc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026ea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80026ec:	e006      	b.n	80026fc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80026f6:	e001      	b.n	80026fc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40012400 	.word	0x40012400
 800270c:	40012800 	.word	0x40012800
 8002710:	08002aff 	.word	0x08002aff
 8002714:	08002b7b 	.word	0x08002b7b
 8002718:	08002b97 	.word	0x08002b97

0800271c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_ADC_Stop_DMA+0x1a>
 8002732:	2302      	movs	r3, #2
 8002734:	e039      	b.n	80027aa <HAL_ADC_Stop_DMA+0x8e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f99c 	bl	8002a7c <ADC_ConversionStop_Disable>
 8002744:	4603      	mov	r3, r0
 8002746:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d128      	bne.n	80027a0 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800275c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002766:	2b02      	cmp	r3, #2
 8002768:	d11a      	bne.n	80027a0 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fc9f 	bl	80030b2 <HAL_DMA_Abort>
 8002774:	4603      	mov	r3, r0
 8002776:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	629a      	str	r2, [r3, #40]	; 0x28
 8002792:	e005      	b.n	80027a0 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x20>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e0dc      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x1da>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b06      	cmp	r3, #6
 8002806:	d81c      	bhi.n	8002842 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	3b05      	subs	r3, #5
 800281a:	221f      	movs	r2, #31
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	4019      	ands	r1, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b05      	subs	r3, #5
 8002834:	fa00 f203 	lsl.w	r2, r0, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	635a      	str	r2, [r3, #52]	; 0x34
 8002840:	e03c      	b.n	80028bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d81c      	bhi.n	8002884 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	3b23      	subs	r3, #35	; 0x23
 800285c:	221f      	movs	r2, #31
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	4019      	ands	r1, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	3b23      	subs	r3, #35	; 0x23
 8002876:	fa00 f203 	lsl.w	r2, r0, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
 8002882:	e01b      	b.n	80028bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	3b41      	subs	r3, #65	; 0x41
 8002896:	221f      	movs	r2, #31
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	4019      	ands	r1, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	3b41      	subs	r3, #65	; 0x41
 80028b0:	fa00 f203 	lsl.w	r2, r0, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b09      	cmp	r3, #9
 80028c2:	d91c      	bls.n	80028fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68d9      	ldr	r1, [r3, #12]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	3b1e      	subs	r3, #30
 80028d6:	2207      	movs	r2, #7
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	4019      	ands	r1, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6898      	ldr	r0, [r3, #8]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	3b1e      	subs	r3, #30
 80028f0:	fa00 f203 	lsl.w	r2, r0, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	e019      	b.n	8002932 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6919      	ldr	r1, [r3, #16]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	2207      	movs	r2, #7
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	4019      	ands	r1, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	6898      	ldr	r0, [r3, #8]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	fa00 f203 	lsl.w	r2, r0, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b10      	cmp	r3, #16
 8002938:	d003      	beq.n	8002942 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800293e:	2b11      	cmp	r3, #17
 8002940:	d132      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <HAL_ADC_ConfigChannel+0x1e4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d125      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d126      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002968:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b10      	cmp	r3, #16
 8002970:	d11a      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	0c9a      	lsrs	r2, r3, #18
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002988:	e002      	b.n	8002990 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3b01      	subs	r3, #1
 800298e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f9      	bne.n	800298a <HAL_ADC_ConfigChannel+0x1b2>
 8002996:	e007      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40012400 	.word	0x40012400
 80029c0:	2000001c 	.word	0x2000001c
 80029c4:	431bde83 	.word	0x431bde83

080029c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d040      	beq.n	8002a68 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029f6:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <ADC_Enable+0xac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <ADC_Enable+0xb0>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	0c9b      	lsrs	r3, r3, #18
 8002a02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a04:	e002      	b.n	8002a0c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f9      	bne.n	8002a06 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a12:	f7ff fca1 	bl	8002358 <HAL_GetTick>
 8002a16:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a18:	e01f      	b.n	8002a5a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a1a:	f7ff fc9d 	bl	8002358 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d918      	bls.n	8002a5a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d011      	beq.n	8002a5a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	f043 0210 	orr.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e007      	b.n	8002a6a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d1d8      	bne.n	8002a1a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000001c 	.word	0x2000001c
 8002a78:	431bde83 	.word	0x431bde83

08002a7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d12e      	bne.n	8002af4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aa6:	f7ff fc57 	bl	8002358 <HAL_GetTick>
 8002aaa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002aac:	e01b      	b.n	8002ae6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aae:	f7ff fc53 	bl	8002358 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d914      	bls.n	8002ae6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d10d      	bne.n	8002ae6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	f043 0210 	orr.w	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e007      	b.n	8002af6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d0dc      	beq.n	8002aae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d127      	bne.n	8002b68 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b2e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b32:	d115      	bne.n	8002b60 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d111      	bne.n	8002b60 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f7fe fdd1 	bl	8001708 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002b66:	e004      	b.n	8002b72 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f7ff fe12 	bl	80027b2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f7ff fe01 	bl	80027c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_ADCEx_Calibration_Start+0x1e>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e095      	b.n	8002d16 <HAL_ADCEx_Calibration_Start+0x14a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ff42 	bl	8002a7c <ADC_ConversionStop_Disable>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bfc:	7dfb      	ldrb	r3, [r7, #23]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 8084 	bne.w	8002d0c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c0c:	f023 0302 	bic.w	r3, r3, #2
 8002c10:	f043 0202 	orr.w	r2, r3, #2
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c18:	4b41      	ldr	r3, [pc, #260]	; (8002d20 <HAL_ADCEx_Calibration_Start+0x154>)
 8002c1a:	681c      	ldr	r4, [r3, #0]
 8002c1c:	2002      	movs	r0, #2
 8002c1e:	f001 ff67 	bl	8004af0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c22:	4603      	mov	r3, r0
 8002c24:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002c28:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002c2a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002c2c:	e002      	b.n	8002c34 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f9      	bne.n	8002c2e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fec4 	bl	80029c8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0208 	orr.w	r2, r2, #8
 8002c4e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002c50:	f7ff fb82 	bl	8002358 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c56:	e01b      	b.n	8002c90 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c58:	f7ff fb7e 	bl	8002358 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b0a      	cmp	r3, #10
 8002c64:	d914      	bls.n	8002c90 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00d      	beq.n	8002c90 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	f023 0312 	bic.w	r3, r3, #18
 8002c7c:	f043 0210 	orr.w	r2, r3, #16
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e042      	b.n	8002d16 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1dc      	bne.n	8002c58 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0204 	orr.w	r2, r2, #4
 8002cac:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002cae:	f7ff fb53 	bl	8002358 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002cb4:	e01b      	b.n	8002cee <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002cb6:	f7ff fb4f 	bl	8002358 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b0a      	cmp	r3, #10
 8002cc2:	d914      	bls.n	8002cee <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	f023 0312 	bic.w	r3, r3, #18
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e013      	b.n	8002d16 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1dc      	bne.n	8002cb6 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	f023 0303 	bic.w	r3, r3, #3
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd90      	pop	{r4, r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	2000001c 	.word	0x2000001c

08002d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db0b      	blt.n	8002db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4906      	ldr	r1, [pc, #24]	; (8002dbc <__NVIC_EnableIRQ+0x34>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2001      	movs	r0, #1
 8002daa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	4313      	orrs	r3, r2
         );
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e88:	d301      	bcc.n	8002e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00f      	b.n	8002eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <SysTick_Config+0x40>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e96:	210f      	movs	r1, #15
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	f7ff ff90 	bl	8002dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <SysTick_Config+0x40>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea6:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <SysTick_Config+0x40>)
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000e010 	.word	0xe000e010

08002ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff2d 	bl	8002d24 <__NVIC_SetPriorityGrouping>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee4:	f7ff ff42 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	6978      	ldr	r0, [r7, #20]
 8002ef0:	f7ff ff90 	bl	8002e14 <NVIC_EncodePriority>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff5f 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	4603      	mov	r3, r0
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff35 	bl	8002d88 <__NVIC_EnableIRQ>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ffa2 	bl	8002e78 <SysTick_Config>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e043      	b.n	8002fde <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <HAL_DMA_Init+0xa8>)
 8002f5e:	4413      	add	r3, r2
 8002f60:	4a22      	ldr	r2, [pc, #136]	; (8002fec <HAL_DMA_Init+0xac>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	009a      	lsls	r2, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a1f      	ldr	r2, [pc, #124]	; (8002ff0 <HAL_DMA_Init+0xb0>)
 8002f72:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	bffdfff8 	.word	0xbffdfff8
 8002fec:	cccccccd 	.word	0xcccccccd
 8002ff0:	40020000 	.word	0x40020000

08002ff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_DMA_Start_IT+0x20>
 8003010:	2302      	movs	r3, #2
 8003012:	e04a      	b.n	80030aa <HAL_DMA_Start_IT+0xb6>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003022:	2b01      	cmp	r3, #1
 8003024:	d13a      	bne.n	800309c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2202      	movs	r2, #2
 800302a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f972 	bl	8003334 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 020e 	orr.w	r2, r2, #14
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e00f      	b.n	800308a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0204 	bic.w	r2, r2, #4
 8003078:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 020a 	orr.w	r2, r2, #10
 8003088:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	e005      	b.n	80030a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80030a4:	2302      	movs	r3, #2
 80030a6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d008      	beq.n	80030da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2204      	movs	r2, #4
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e020      	b.n	800311c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 020e 	bic.w	r2, r2, #14
 80030e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	2101      	movs	r1, #1
 8003104:	fa01 f202 	lsl.w	r2, r1, r2
 8003108:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800311a:	7bfb      	ldrb	r3, [r7, #15]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr
	...

08003128 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	2204      	movs	r2, #4
 8003146:	409a      	lsls	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d04f      	beq.n	80031f0 <HAL_DMA_IRQHandler+0xc8>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d04a      	beq.n	80031f0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0320 	and.w	r3, r3, #32
 8003164:	2b00      	cmp	r3, #0
 8003166:	d107      	bne.n	8003178 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a66      	ldr	r2, [pc, #408]	; (8003318 <HAL_DMA_IRQHandler+0x1f0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d029      	beq.n	80031d6 <HAL_DMA_IRQHandler+0xae>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a65      	ldr	r2, [pc, #404]	; (800331c <HAL_DMA_IRQHandler+0x1f4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d022      	beq.n	80031d2 <HAL_DMA_IRQHandler+0xaa>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a63      	ldr	r2, [pc, #396]	; (8003320 <HAL_DMA_IRQHandler+0x1f8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01a      	beq.n	80031cc <HAL_DMA_IRQHandler+0xa4>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a62      	ldr	r2, [pc, #392]	; (8003324 <HAL_DMA_IRQHandler+0x1fc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d012      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x9e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a60      	ldr	r2, [pc, #384]	; (8003328 <HAL_DMA_IRQHandler+0x200>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00a      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x98>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a5f      	ldr	r2, [pc, #380]	; (800332c <HAL_DMA_IRQHandler+0x204>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d102      	bne.n	80031ba <HAL_DMA_IRQHandler+0x92>
 80031b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031b8:	e00e      	b.n	80031d8 <HAL_DMA_IRQHandler+0xb0>
 80031ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031be:	e00b      	b.n	80031d8 <HAL_DMA_IRQHandler+0xb0>
 80031c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80031c4:	e008      	b.n	80031d8 <HAL_DMA_IRQHandler+0xb0>
 80031c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031ca:	e005      	b.n	80031d8 <HAL_DMA_IRQHandler+0xb0>
 80031cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031d0:	e002      	b.n	80031d8 <HAL_DMA_IRQHandler+0xb0>
 80031d2:	2340      	movs	r3, #64	; 0x40
 80031d4:	e000      	b.n	80031d8 <HAL_DMA_IRQHandler+0xb0>
 80031d6:	2304      	movs	r3, #4
 80031d8:	4a55      	ldr	r2, [pc, #340]	; (8003330 <HAL_DMA_IRQHandler+0x208>)
 80031da:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8094 	beq.w	800330e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031ee:	e08e      	b.n	800330e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2202      	movs	r2, #2
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d056      	beq.n	80032ae <HAL_DMA_IRQHandler+0x186>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d051      	beq.n	80032ae <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 020a 	bic.w	r2, r2, #10
 8003226:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a38      	ldr	r2, [pc, #224]	; (8003318 <HAL_DMA_IRQHandler+0x1f0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d029      	beq.n	800328e <HAL_DMA_IRQHandler+0x166>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a37      	ldr	r2, [pc, #220]	; (800331c <HAL_DMA_IRQHandler+0x1f4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d022      	beq.n	800328a <HAL_DMA_IRQHandler+0x162>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a35      	ldr	r2, [pc, #212]	; (8003320 <HAL_DMA_IRQHandler+0x1f8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01a      	beq.n	8003284 <HAL_DMA_IRQHandler+0x15c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a34      	ldr	r2, [pc, #208]	; (8003324 <HAL_DMA_IRQHandler+0x1fc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d012      	beq.n	800327e <HAL_DMA_IRQHandler+0x156>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a32      	ldr	r2, [pc, #200]	; (8003328 <HAL_DMA_IRQHandler+0x200>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00a      	beq.n	8003278 <HAL_DMA_IRQHandler+0x150>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a31      	ldr	r2, [pc, #196]	; (800332c <HAL_DMA_IRQHandler+0x204>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d102      	bne.n	8003272 <HAL_DMA_IRQHandler+0x14a>
 800326c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003270:	e00e      	b.n	8003290 <HAL_DMA_IRQHandler+0x168>
 8003272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003276:	e00b      	b.n	8003290 <HAL_DMA_IRQHandler+0x168>
 8003278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800327c:	e008      	b.n	8003290 <HAL_DMA_IRQHandler+0x168>
 800327e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003282:	e005      	b.n	8003290 <HAL_DMA_IRQHandler+0x168>
 8003284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003288:	e002      	b.n	8003290 <HAL_DMA_IRQHandler+0x168>
 800328a:	2320      	movs	r3, #32
 800328c:	e000      	b.n	8003290 <HAL_DMA_IRQHandler+0x168>
 800328e:	2302      	movs	r3, #2
 8003290:	4a27      	ldr	r2, [pc, #156]	; (8003330 <HAL_DMA_IRQHandler+0x208>)
 8003292:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d034      	beq.n	800330e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032ac:	e02f      	b.n	800330e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	2208      	movs	r2, #8
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d028      	beq.n	8003310 <HAL_DMA_IRQHandler+0x1e8>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d023      	beq.n	8003310 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 020e 	bic.w	r2, r2, #14
 80032d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	2101      	movs	r1, #1
 80032e2:	fa01 f202 	lsl.w	r2, r1, r2
 80032e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
    }
  }
  return;
 800330e:	bf00      	nop
 8003310:	bf00      	nop
}
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40020008 	.word	0x40020008
 800331c:	4002001c 	.word	0x4002001c
 8003320:	40020030 	.word	0x40020030
 8003324:	40020044 	.word	0x40020044
 8003328:	40020058 	.word	0x40020058
 800332c:	4002006c 	.word	0x4002006c
 8003330:	40020000 	.word	0x40020000

08003334 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b10      	cmp	r3, #16
 8003360:	d108      	bne.n	8003374 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003372:	e007      	b.n	8003384 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	60da      	str	r2, [r3, #12]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	bc80      	pop	{r7}
 800338c:	4770      	bx	lr
	...

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b08b      	sub	sp, #44	; 0x2c
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800339a:	2300      	movs	r3, #0
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800339e:	2300      	movs	r3, #0
 80033a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a2:	e127      	b.n	80035f4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033a4:	2201      	movs	r2, #1
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	429a      	cmp	r2, r3
 80033be:	f040 8116 	bne.w	80035ee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b12      	cmp	r3, #18
 80033c8:	d034      	beq.n	8003434 <HAL_GPIO_Init+0xa4>
 80033ca:	2b12      	cmp	r3, #18
 80033cc:	d80d      	bhi.n	80033ea <HAL_GPIO_Init+0x5a>
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d02b      	beq.n	800342a <HAL_GPIO_Init+0x9a>
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d804      	bhi.n	80033e0 <HAL_GPIO_Init+0x50>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d031      	beq.n	800343e <HAL_GPIO_Init+0xae>
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d01c      	beq.n	8003418 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033de:	e048      	b.n	8003472 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d043      	beq.n	800346c <HAL_GPIO_Init+0xdc>
 80033e4:	2b11      	cmp	r3, #17
 80033e6:	d01b      	beq.n	8003420 <HAL_GPIO_Init+0x90>
          break;
 80033e8:	e043      	b.n	8003472 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033ea:	4a89      	ldr	r2, [pc, #548]	; (8003610 <HAL_GPIO_Init+0x280>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d026      	beq.n	800343e <HAL_GPIO_Init+0xae>
 80033f0:	4a87      	ldr	r2, [pc, #540]	; (8003610 <HAL_GPIO_Init+0x280>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d806      	bhi.n	8003404 <HAL_GPIO_Init+0x74>
 80033f6:	4a87      	ldr	r2, [pc, #540]	; (8003614 <HAL_GPIO_Init+0x284>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d020      	beq.n	800343e <HAL_GPIO_Init+0xae>
 80033fc:	4a86      	ldr	r2, [pc, #536]	; (8003618 <HAL_GPIO_Init+0x288>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01d      	beq.n	800343e <HAL_GPIO_Init+0xae>
          break;
 8003402:	e036      	b.n	8003472 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003404:	4a85      	ldr	r2, [pc, #532]	; (800361c <HAL_GPIO_Init+0x28c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d019      	beq.n	800343e <HAL_GPIO_Init+0xae>
 800340a:	4a85      	ldr	r2, [pc, #532]	; (8003620 <HAL_GPIO_Init+0x290>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d016      	beq.n	800343e <HAL_GPIO_Init+0xae>
 8003410:	4a84      	ldr	r2, [pc, #528]	; (8003624 <HAL_GPIO_Init+0x294>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_GPIO_Init+0xae>
          break;
 8003416:	e02c      	b.n	8003472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	623b      	str	r3, [r7, #32]
          break;
 800341e:	e028      	b.n	8003472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	3304      	adds	r3, #4
 8003426:	623b      	str	r3, [r7, #32]
          break;
 8003428:	e023      	b.n	8003472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	3308      	adds	r3, #8
 8003430:	623b      	str	r3, [r7, #32]
          break;
 8003432:	e01e      	b.n	8003472 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	330c      	adds	r3, #12
 800343a:	623b      	str	r3, [r7, #32]
          break;
 800343c:	e019      	b.n	8003472 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003446:	2304      	movs	r3, #4
 8003448:	623b      	str	r3, [r7, #32]
          break;
 800344a:	e012      	b.n	8003472 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003454:	2308      	movs	r3, #8
 8003456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	611a      	str	r2, [r3, #16]
          break;
 800345e:	e008      	b.n	8003472 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003460:	2308      	movs	r3, #8
 8003462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	615a      	str	r2, [r3, #20]
          break;
 800346a:	e002      	b.n	8003472 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800346c:	2300      	movs	r3, #0
 800346e:	623b      	str	r3, [r7, #32]
          break;
 8003470:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2bff      	cmp	r3, #255	; 0xff
 8003476:	d801      	bhi.n	800347c <HAL_GPIO_Init+0xec>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	e001      	b.n	8003480 <HAL_GPIO_Init+0xf0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2bff      	cmp	r3, #255	; 0xff
 8003486:	d802      	bhi.n	800348e <HAL_GPIO_Init+0xfe>
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	e002      	b.n	8003494 <HAL_GPIO_Init+0x104>
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	3b08      	subs	r3, #8
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	210f      	movs	r1, #15
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	401a      	ands	r2, r3
 80034a6:	6a39      	ldr	r1, [r7, #32]
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	431a      	orrs	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8096 	beq.w	80035ee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034c2:	4b59      	ldr	r3, [pc, #356]	; (8003628 <HAL_GPIO_Init+0x298>)
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	4a58      	ldr	r2, [pc, #352]	; (8003628 <HAL_GPIO_Init+0x298>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6193      	str	r3, [r2, #24]
 80034ce:	4b56      	ldr	r3, [pc, #344]	; (8003628 <HAL_GPIO_Init+0x298>)
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
 80034d8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034da:	4a54      	ldr	r2, [pc, #336]	; (800362c <HAL_GPIO_Init+0x29c>)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	3302      	adds	r3, #2
 80034e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	220f      	movs	r2, #15
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	4013      	ands	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a4b      	ldr	r2, [pc, #300]	; (8003630 <HAL_GPIO_Init+0x2a0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <HAL_GPIO_Init+0x19e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a4a      	ldr	r2, [pc, #296]	; (8003634 <HAL_GPIO_Init+0x2a4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00d      	beq.n	800352a <HAL_GPIO_Init+0x19a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a49      	ldr	r2, [pc, #292]	; (8003638 <HAL_GPIO_Init+0x2a8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d007      	beq.n	8003526 <HAL_GPIO_Init+0x196>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a48      	ldr	r2, [pc, #288]	; (800363c <HAL_GPIO_Init+0x2ac>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <HAL_GPIO_Init+0x192>
 800351e:	2303      	movs	r3, #3
 8003520:	e006      	b.n	8003530 <HAL_GPIO_Init+0x1a0>
 8003522:	2304      	movs	r3, #4
 8003524:	e004      	b.n	8003530 <HAL_GPIO_Init+0x1a0>
 8003526:	2302      	movs	r3, #2
 8003528:	e002      	b.n	8003530 <HAL_GPIO_Init+0x1a0>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_GPIO_Init+0x1a0>
 800352e:	2300      	movs	r3, #0
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	f002 0203 	and.w	r2, r2, #3
 8003536:	0092      	lsls	r2, r2, #2
 8003538:	4093      	lsls	r3, r2
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003540:	493a      	ldr	r1, [pc, #232]	; (800362c <HAL_GPIO_Init+0x29c>)
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	3302      	adds	r3, #2
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d006      	beq.n	8003568 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800355a:	4b39      	ldr	r3, [pc, #228]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4938      	ldr	r1, [pc, #224]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
 8003566:	e006      	b.n	8003576 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003568:	4b35      	ldr	r3, [pc, #212]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	43db      	mvns	r3, r3
 8003570:	4933      	ldr	r1, [pc, #204]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 8003572:	4013      	ands	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003582:	4b2f      	ldr	r3, [pc, #188]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	492e      	ldr	r1, [pc, #184]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
 800358e:	e006      	b.n	800359e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003590:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	43db      	mvns	r3, r3
 8003598:	4929      	ldr	r1, [pc, #164]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 800359a:	4013      	ands	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035aa:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	4924      	ldr	r1, [pc, #144]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
 80035b6:	e006      	b.n	80035c6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035b8:	4b21      	ldr	r3, [pc, #132]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	43db      	mvns	r3, r3
 80035c0:	491f      	ldr	r1, [pc, #124]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d006      	beq.n	80035e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035d2:	4b1b      	ldr	r3, [pc, #108]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	491a      	ldr	r1, [pc, #104]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60cb      	str	r3, [r1, #12]
 80035de:	e006      	b.n	80035ee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035e0:	4b17      	ldr	r3, [pc, #92]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	4915      	ldr	r1, [pc, #84]	; (8003640 <HAL_GPIO_Init+0x2b0>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	3301      	adds	r3, #1
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	fa22 f303 	lsr.w	r3, r2, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f47f aed0 	bne.w	80033a4 <HAL_GPIO_Init+0x14>
  }
}
 8003604:	bf00      	nop
 8003606:	372c      	adds	r7, #44	; 0x2c
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	10210000 	.word	0x10210000
 8003614:	10110000 	.word	0x10110000
 8003618:	10120000 	.word	0x10120000
 800361c:	10310000 	.word	0x10310000
 8003620:	10320000 	.word	0x10320000
 8003624:	10220000 	.word	0x10220000
 8003628:	40021000 	.word	0x40021000
 800362c:	40010000 	.word	0x40010000
 8003630:	40010800 	.word	0x40010800
 8003634:	40010c00 	.word	0x40010c00
 8003638:	40011000 	.word	0x40011000
 800363c:	40011400 	.word	0x40011400
 8003640:	40010400 	.word	0x40010400

08003644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	807b      	strh	r3, [r7, #2]
 8003650:	4613      	mov	r3, r2
 8003652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003654:	787b      	ldrb	r3, [r7, #1]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003660:	e003      	b.n	800366a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003662:	887b      	ldrh	r3, [r7, #2]
 8003664:	041a      	lsls	r2, r3, #16
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	611a      	str	r2, [r3, #16]
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr

08003674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e11f      	b.n	80038c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7fe fd3a 	bl	8002114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	; 0x24
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d8:	f001 f90e 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 80036dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4a7b      	ldr	r2, [pc, #492]	; (80038d0 <HAL_I2C_Init+0x25c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d807      	bhi.n	80036f8 <HAL_I2C_Init+0x84>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a7a      	ldr	r2, [pc, #488]	; (80038d4 <HAL_I2C_Init+0x260>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	bf94      	ite	ls
 80036f0:	2301      	movls	r3, #1
 80036f2:	2300      	movhi	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e006      	b.n	8003706 <HAL_I2C_Init+0x92>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a77      	ldr	r2, [pc, #476]	; (80038d8 <HAL_I2C_Init+0x264>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	bf94      	ite	ls
 8003700:	2301      	movls	r3, #1
 8003702:	2300      	movhi	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e0db      	b.n	80038c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a72      	ldr	r2, [pc, #456]	; (80038dc <HAL_I2C_Init+0x268>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0c9b      	lsrs	r3, r3, #18
 8003718:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a64      	ldr	r2, [pc, #400]	; (80038d0 <HAL_I2C_Init+0x25c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d802      	bhi.n	8003748 <HAL_I2C_Init+0xd4>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	3301      	adds	r3, #1
 8003746:	e009      	b.n	800375c <HAL_I2C_Init+0xe8>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	4a63      	ldr	r2, [pc, #396]	; (80038e0 <HAL_I2C_Init+0x26c>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	3301      	adds	r3, #1
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	430b      	orrs	r3, r1
 8003762:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800376e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4956      	ldr	r1, [pc, #344]	; (80038d0 <HAL_I2C_Init+0x25c>)
 8003778:	428b      	cmp	r3, r1
 800377a:	d80d      	bhi.n	8003798 <HAL_I2C_Init+0x124>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1e59      	subs	r1, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	fbb1 f3f3 	udiv	r3, r1, r3
 800378a:	3301      	adds	r3, #1
 800378c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003790:	2b04      	cmp	r3, #4
 8003792:	bf38      	it	cc
 8003794:	2304      	movcc	r3, #4
 8003796:	e04f      	b.n	8003838 <HAL_I2C_Init+0x1c4>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d111      	bne.n	80037c4 <HAL_I2C_Init+0x150>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1e58      	subs	r0, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	440b      	add	r3, r1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e012      	b.n	80037ea <HAL_I2C_Init+0x176>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e58      	subs	r0, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	0099      	lsls	r1, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x17e>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e022      	b.n	8003838 <HAL_I2C_Init+0x1c4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10e      	bne.n	8003818 <HAL_I2C_Init+0x1a4>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1e58      	subs	r0, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	440b      	add	r3, r1
 8003808:	fbb0 f3f3 	udiv	r3, r0, r3
 800380c:	3301      	adds	r3, #1
 800380e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003816:	e00f      	b.n	8003838 <HAL_I2C_Init+0x1c4>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1e58      	subs	r0, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	0099      	lsls	r1, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	fbb0 f3f3 	udiv	r3, r0, r3
 800382e:	3301      	adds	r3, #1
 8003830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	6809      	ldr	r1, [r1, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003866:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6911      	ldr	r1, [r2, #16]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68d2      	ldr	r2, [r2, #12]
 8003872:	4311      	orrs	r1, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	000186a0 	.word	0x000186a0
 80038d4:	001e847f 	.word	0x001e847f
 80038d8:	003d08ff 	.word	0x003d08ff
 80038dc:	431bde83 	.word	0x431bde83
 80038e0:	10624dd3 	.word	0x10624dd3

080038e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	461a      	mov	r2, r3
 80038f0:	460b      	mov	r3, r1
 80038f2:	817b      	strh	r3, [r7, #10]
 80038f4:	4613      	mov	r3, r2
 80038f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038f8:	f7fe fd2e 	bl	8002358 <HAL_GetTick>
 80038fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b20      	cmp	r3, #32
 8003908:	f040 80e0 	bne.w	8003acc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	2319      	movs	r3, #25
 8003912:	2201      	movs	r2, #1
 8003914:	4970      	ldr	r1, [pc, #448]	; (8003ad8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fa92 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
 8003924:	e0d3      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_I2C_Master_Transmit+0x50>
 8003930:	2302      	movs	r3, #2
 8003932:	e0cc      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b01      	cmp	r3, #1
 8003948:	d007      	beq.n	800395a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003968:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2221      	movs	r2, #33	; 0x21
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2210      	movs	r2, #16
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	893a      	ldrh	r2, [r7, #8]
 800398a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a50      	ldr	r2, [pc, #320]	; (8003adc <HAL_I2C_Master_Transmit+0x1f8>)
 800399a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800399c:	8979      	ldrh	r1, [r7, #10]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f9ca 	bl	8003d3c <I2C_MasterRequestWrite>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e08d      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039c8:	e066      	b.n	8003a98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	6a39      	ldr	r1, [r7, #32]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fb0c 	bl	8003fec <I2C_WaitOnTXEFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00d      	beq.n	80039f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d107      	bne.n	80039f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e06b      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d11b      	bne.n	8003a6c <HAL_I2C_Master_Transmit+0x188>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d017      	beq.n	8003a6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	781a      	ldrb	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	6a39      	ldr	r1, [r7, #32]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fafc 	bl	800406e <I2C_WaitOnBTFFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00d      	beq.n	8003a98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d107      	bne.n	8003a94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e01a      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d194      	bne.n	80039ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	00100002 	.word	0x00100002
 8003adc:	ffff0000 	.word	0xffff0000

08003ae0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	607a      	str	r2, [r7, #4]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	460b      	mov	r3, r1
 8003aee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003af0:	f7fe fc32 	bl	8002358 <HAL_GetTick>
 8003af4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	f040 8111 	bne.w	8003d2a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	2319      	movs	r3, #25
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4988      	ldr	r1, [pc, #544]	; (8003d34 <HAL_I2C_IsDeviceReady+0x254>)
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f994 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e104      	b.n	8003d2c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_I2C_IsDeviceReady+0x50>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e0fd      	b.n	8003d2c <HAL_I2C_IsDeviceReady+0x24c>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d007      	beq.n	8003b56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2224      	movs	r2, #36	; 0x24
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a70      	ldr	r2, [pc, #448]	; (8003d38 <HAL_I2C_IsDeviceReady+0x258>)
 8003b78:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f952 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00d      	beq.n	8003bbe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb0:	d103      	bne.n	8003bba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0b6      	b.n	8003d2c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bbe:	897b      	ldrh	r3, [r7, #10]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bcc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003bce:	f7fe fbc3 	bl	8002358 <HAL_GetTick>
 8003bd2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	bf0c      	ite	eq
 8003be2:	2301      	moveq	r3, #1
 8003be4:	2300      	movne	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2301      	moveq	r3, #1
 8003bfc:	2300      	movne	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c02:	e025      	b.n	8003c50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c04:	f7fe fba8 	bl	8002358 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d302      	bcc.n	8003c1a <HAL_I2C_IsDeviceReady+0x13a>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	22a0      	movs	r2, #160	; 0xa0
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2ba0      	cmp	r3, #160	; 0xa0
 8003c5a:	d005      	beq.n	8003c68 <HAL_I2C_IsDeviceReady+0x188>
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <HAL_I2C_IsDeviceReady+0x188>
 8003c62:	7dbb      	ldrb	r3, [r7, #22]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0cd      	beq.n	8003c04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d129      	bne.n	8003cd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2319      	movs	r3, #25
 8003caa:	2201      	movs	r2, #1
 8003cac:	4921      	ldr	r1, [pc, #132]	; (8003d34 <HAL_I2C_IsDeviceReady+0x254>)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f8c6 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e036      	b.n	8003d2c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e02c      	b.n	8003d2c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	2319      	movs	r3, #25
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	490f      	ldr	r1, [pc, #60]	; (8003d34 <HAL_I2C_IsDeviceReady+0x254>)
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f8a2 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e012      	b.n	8003d2c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	f4ff af32 	bcc.w	8003b7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
  }
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3720      	adds	r7, #32
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	00100002 	.word	0x00100002
 8003d38:	ffff0000 	.word	0xffff0000

08003d3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d006      	beq.n	8003d66 <I2C_MasterRequestWrite+0x2a>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d003      	beq.n	8003d66 <I2C_MasterRequestWrite+0x2a>
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d64:	d108      	bne.n	8003d78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	e00b      	b.n	8003d90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	2b12      	cmp	r3, #18
 8003d7e:	d107      	bne.n	8003d90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f84f 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00d      	beq.n	8003dc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db6:	d103      	bne.n	8003dc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e035      	b.n	8003e30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dcc:	d108      	bne.n	8003de0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dce:	897b      	ldrh	r3, [r7, #10]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ddc:	611a      	str	r2, [r3, #16]
 8003dde:	e01b      	b.n	8003e18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003de0:	897b      	ldrh	r3, [r7, #10]
 8003de2:	11db      	asrs	r3, r3, #7
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f003 0306 	and.w	r3, r3, #6
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f063 030f 	orn	r3, r3, #15
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	490e      	ldr	r1, [pc, #56]	; (8003e38 <I2C_MasterRequestWrite+0xfc>)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f875 	bl	8003eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e010      	b.n	8003e30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e0e:	897b      	ldrh	r3, [r7, #10]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4907      	ldr	r1, [pc, #28]	; (8003e3c <I2C_MasterRequestWrite+0x100>)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f865 	bl	8003eee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	00010008 	.word	0x00010008
 8003e3c:	00010002 	.word	0x00010002

08003e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e50:	e025      	b.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d021      	beq.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5a:	f7fe fa7d 	bl	8002358 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d116      	bne.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f043 0220 	orr.w	r2, r3, #32
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e023      	b.n	8003ee6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d10d      	bne.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	e00c      	b.n	8003ede <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d0b6      	beq.n	8003e52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003efc:	e051      	b.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0c:	d123      	bne.n	8003f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e046      	b.n	8003fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d021      	beq.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5e:	f7fe f9fb 	bl	8002358 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d302      	bcc.n	8003f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d116      	bne.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f043 0220 	orr.w	r2, r3, #32
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e020      	b.n	8003fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10c      	bne.n	8003fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf14      	ite	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	2300      	moveq	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	e00b      	b.n	8003fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d18d      	bne.n	8003efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff8:	e02d      	b.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f878 	bl	80040f0 <I2C_IsAcknowledgeFailed>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e02d      	b.n	8004066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d021      	beq.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fe f9a1 	bl	8002358 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d116      	bne.n	8004056 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e007      	b.n	8004066 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b80      	cmp	r3, #128	; 0x80
 8004062:	d1ca      	bne.n	8003ffa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800407a:	e02d      	b.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f837 	bl	80040f0 <I2C_IsAcknowledgeFailed>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e02d      	b.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d021      	beq.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004094:	f7fe f960 	bl	8002358 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d302      	bcc.n	80040aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d116      	bne.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e007      	b.n	80040e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d1ca      	bne.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004106:	d11b      	bne.n	8004140 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004110:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	f043 0204 	orr.w	r2, r3, #4
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e000      	b.n	8004142 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e26c      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8087 	beq.w	800427a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800416c:	4b92      	ldr	r3, [pc, #584]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b04      	cmp	r3, #4
 8004176:	d00c      	beq.n	8004192 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004178:	4b8f      	ldr	r3, [pc, #572]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d112      	bne.n	80041aa <HAL_RCC_OscConfig+0x5e>
 8004184:	4b8c      	ldr	r3, [pc, #560]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004190:	d10b      	bne.n	80041aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004192:	4b89      	ldr	r3, [pc, #548]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d06c      	beq.n	8004278 <HAL_RCC_OscConfig+0x12c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d168      	bne.n	8004278 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e246      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b2:	d106      	bne.n	80041c2 <HAL_RCC_OscConfig+0x76>
 80041b4:	4b80      	ldr	r3, [pc, #512]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a7f      	ldr	r2, [pc, #508]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80041ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e02e      	b.n	8004220 <HAL_RCC_OscConfig+0xd4>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x98>
 80041ca:	4b7b      	ldr	r3, [pc, #492]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a7a      	ldr	r2, [pc, #488]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b78      	ldr	r3, [pc, #480]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a77      	ldr	r2, [pc, #476]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e01d      	b.n	8004220 <HAL_RCC_OscConfig+0xd4>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ec:	d10c      	bne.n	8004208 <HAL_RCC_OscConfig+0xbc>
 80041ee:	4b72      	ldr	r3, [pc, #456]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a71      	ldr	r2, [pc, #452]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80041f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	4b6f      	ldr	r3, [pc, #444]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a6e      	ldr	r2, [pc, #440]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e00b      	b.n	8004220 <HAL_RCC_OscConfig+0xd4>
 8004208:	4b6b      	ldr	r3, [pc, #428]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a6a      	ldr	r2, [pc, #424]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 800420e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4b68      	ldr	r3, [pc, #416]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a67      	ldr	r2, [pc, #412]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 800421a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d013      	beq.n	8004250 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fe f896 	bl	8002358 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004230:	f7fe f892 	bl	8002358 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b64      	cmp	r3, #100	; 0x64
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e1fa      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	4b5d      	ldr	r3, [pc, #372]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0f0      	beq.n	8004230 <HAL_RCC_OscConfig+0xe4>
 800424e:	e014      	b.n	800427a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004250:	f7fe f882 	bl	8002358 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004258:	f7fe f87e 	bl	8002358 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b64      	cmp	r3, #100	; 0x64
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e1e6      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426a:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x10c>
 8004276:	e000      	b.n	800427a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d063      	beq.n	800434e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004286:	4b4c      	ldr	r3, [pc, #304]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00b      	beq.n	80042aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004292:	4b49      	ldr	r3, [pc, #292]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b08      	cmp	r3, #8
 800429c:	d11c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x18c>
 800429e:	4b46      	ldr	r3, [pc, #280]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d116      	bne.n	80042d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042aa:	4b43      	ldr	r3, [pc, #268]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_RCC_OscConfig+0x176>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d001      	beq.n	80042c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e1ba      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c2:	4b3d      	ldr	r3, [pc, #244]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	4939      	ldr	r1, [pc, #228]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d6:	e03a      	b.n	800434e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d020      	beq.n	8004322 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e0:	4b36      	ldr	r3, [pc, #216]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e6:	f7fe f837 	bl	8002358 <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ee:	f7fe f833 	bl	8002358 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e19b      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004300:	4b2d      	ldr	r3, [pc, #180]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430c:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4927      	ldr	r1, [pc, #156]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]
 8004320:	e015      	b.n	800434e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004322:	4b26      	ldr	r3, [pc, #152]	; (80043bc <HAL_RCC_OscConfig+0x270>)
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fe f816 	bl	8002358 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004330:	f7fe f812 	bl	8002358 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e17a      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004342:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d03a      	beq.n	80043d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d019      	beq.n	8004396 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004362:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <HAL_RCC_OscConfig+0x274>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004368:	f7fd fff6 	bl	8002358 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004370:	f7fd fff2 	bl	8002358 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e15a      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <HAL_RCC_OscConfig+0x26c>)
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800438e:	2001      	movs	r0, #1
 8004390:	f000 fada 	bl	8004948 <RCC_Delay>
 8004394:	e01c      	b.n	80043d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004396:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <HAL_RCC_OscConfig+0x274>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439c:	f7fd ffdc 	bl	8002358 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a2:	e00f      	b.n	80043c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a4:	f7fd ffd8 	bl	8002358 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d908      	bls.n	80043c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e140      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000
 80043bc:	42420000 	.word	0x42420000
 80043c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c4:	4b9e      	ldr	r3, [pc, #632]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e9      	bne.n	80043a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80a6 	beq.w	800452a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043de:	2300      	movs	r3, #0
 80043e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043e2:	4b97      	ldr	r3, [pc, #604]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10d      	bne.n	800440a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ee:	4b94      	ldr	r3, [pc, #592]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	4a93      	ldr	r2, [pc, #588]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043f8:	61d3      	str	r3, [r2, #28]
 80043fa:	4b91      	ldr	r3, [pc, #580]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	4b8e      	ldr	r3, [pc, #568]	; (8004644 <HAL_RCC_OscConfig+0x4f8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d118      	bne.n	8004448 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004416:	4b8b      	ldr	r3, [pc, #556]	; (8004644 <HAL_RCC_OscConfig+0x4f8>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a8a      	ldr	r2, [pc, #552]	; (8004644 <HAL_RCC_OscConfig+0x4f8>)
 800441c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004422:	f7fd ff99 	bl	8002358 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442a:	f7fd ff95 	bl	8002358 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b64      	cmp	r3, #100	; 0x64
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e0fd      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443c:	4b81      	ldr	r3, [pc, #516]	; (8004644 <HAL_RCC_OscConfig+0x4f8>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <HAL_RCC_OscConfig+0x312>
 8004450:	4b7b      	ldr	r3, [pc, #492]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	4a7a      	ldr	r2, [pc, #488]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6213      	str	r3, [r2, #32]
 800445c:	e02d      	b.n	80044ba <HAL_RCC_OscConfig+0x36e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x334>
 8004466:	4b76      	ldr	r3, [pc, #472]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	4a75      	ldr	r2, [pc, #468]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 800446c:	f023 0301 	bic.w	r3, r3, #1
 8004470:	6213      	str	r3, [r2, #32]
 8004472:	4b73      	ldr	r3, [pc, #460]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	4a72      	ldr	r2, [pc, #456]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004478:	f023 0304 	bic.w	r3, r3, #4
 800447c:	6213      	str	r3, [r2, #32]
 800447e:	e01c      	b.n	80044ba <HAL_RCC_OscConfig+0x36e>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b05      	cmp	r3, #5
 8004486:	d10c      	bne.n	80044a2 <HAL_RCC_OscConfig+0x356>
 8004488:	4b6d      	ldr	r3, [pc, #436]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4a6c      	ldr	r2, [pc, #432]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 800448e:	f043 0304 	orr.w	r3, r3, #4
 8004492:	6213      	str	r3, [r2, #32]
 8004494:	4b6a      	ldr	r3, [pc, #424]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	4a69      	ldr	r2, [pc, #420]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	6213      	str	r3, [r2, #32]
 80044a0:	e00b      	b.n	80044ba <HAL_RCC_OscConfig+0x36e>
 80044a2:	4b67      	ldr	r3, [pc, #412]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	4a66      	ldr	r2, [pc, #408]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	6213      	str	r3, [r2, #32]
 80044ae:	4b64      	ldr	r3, [pc, #400]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	4a63      	ldr	r2, [pc, #396]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80044b4:	f023 0304 	bic.w	r3, r3, #4
 80044b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d015      	beq.n	80044ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c2:	f7fd ff49 	bl	8002358 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fd ff45 	bl	8002358 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d8:	4293      	cmp	r3, r2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0ab      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e0:	4b57      	ldr	r3, [pc, #348]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ee      	beq.n	80044ca <HAL_RCC_OscConfig+0x37e>
 80044ec:	e014      	b.n	8004518 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ee:	f7fd ff33 	bl	8002358 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f4:	e00a      	b.n	800450c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7fd ff2f 	bl	8002358 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	; 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e095      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450c:	4b4c      	ldr	r3, [pc, #304]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ee      	bne.n	80044f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	4b48      	ldr	r3, [pc, #288]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	4a47      	ldr	r2, [pc, #284]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8081 	beq.w	8004636 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004534:	4b42      	ldr	r3, [pc, #264]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b08      	cmp	r3, #8
 800453e:	d061      	beq.n	8004604 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d146      	bne.n	80045d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004548:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <HAL_RCC_OscConfig+0x4fc>)
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fd ff03 	bl	8002358 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004556:	f7fd feff 	bl	8002358 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e067      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004568:	4b35      	ldr	r3, [pc, #212]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f0      	bne.n	8004556 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800457c:	d108      	bne.n	8004590 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800457e:	4b30      	ldr	r3, [pc, #192]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	492d      	ldr	r1, [pc, #180]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004590:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a19      	ldr	r1, [r3, #32]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	430b      	orrs	r3, r1
 80045a2:	4927      	ldr	r1, [pc, #156]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a8:	4b27      	ldr	r3, [pc, #156]	; (8004648 <HAL_RCC_OscConfig+0x4fc>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ae:	f7fd fed3 	bl	8002358 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b6:	f7fd fecf 	bl	8002358 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e037      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045c8:	4b1d      	ldr	r3, [pc, #116]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f0      	beq.n	80045b6 <HAL_RCC_OscConfig+0x46a>
 80045d4:	e02f      	b.n	8004636 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045d6:	4b1c      	ldr	r3, [pc, #112]	; (8004648 <HAL_RCC_OscConfig+0x4fc>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7fd febc 	bl	8002358 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e4:	f7fd feb8 	bl	8002358 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e020      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x498>
 8004602:	e018      	b.n	8004636 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e013      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCC_OscConfig+0x4f4>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	429a      	cmp	r2, r3
 8004622:	d106      	bne.n	8004632 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d001      	beq.n	8004636 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40021000 	.word	0x40021000
 8004644:	40007000 	.word	0x40007000
 8004648:	42420060 	.word	0x42420060

0800464c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0d0      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004660:	4b6a      	ldr	r3, [pc, #424]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d910      	bls.n	8004690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b67      	ldr	r3, [pc, #412]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 0207 	bic.w	r2, r3, #7
 8004676:	4965      	ldr	r1, [pc, #404]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b63      	ldr	r3, [pc, #396]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0b8      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d020      	beq.n	80046de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a8:	4b59      	ldr	r3, [pc, #356]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4a58      	ldr	r2, [pc, #352]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046c0:	4b53      	ldr	r3, [pc, #332]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4a52      	ldr	r2, [pc, #328]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046cc:	4b50      	ldr	r3, [pc, #320]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	494d      	ldr	r1, [pc, #308]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d040      	beq.n	800476c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d107      	bne.n	8004702 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	4b47      	ldr	r3, [pc, #284]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d115      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e07f      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d107      	bne.n	800471a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470a:	4b41      	ldr	r3, [pc, #260]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d109      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e073      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471a:	4b3d      	ldr	r3, [pc, #244]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e06b      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800472a:	4b39      	ldr	r3, [pc, #228]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f023 0203 	bic.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4936      	ldr	r1, [pc, #216]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 8004738:	4313      	orrs	r3, r2
 800473a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800473c:	f7fd fe0c 	bl	8002358 <HAL_GetTick>
 8004740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004742:	e00a      	b.n	800475a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f7fd fe08 	bl	8002358 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e053      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	4b2d      	ldr	r3, [pc, #180]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f003 020c 	and.w	r2, r3, #12
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	429a      	cmp	r2, r3
 800476a:	d1eb      	bne.n	8004744 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800476c:	4b27      	ldr	r3, [pc, #156]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d210      	bcs.n	800479c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 0207 	bic.w	r2, r3, #7
 8004782:	4922      	ldr	r1, [pc, #136]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	4313      	orrs	r3, r2
 8004788:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	4b20      	ldr	r3, [pc, #128]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e032      	b.n	8004802 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d008      	beq.n	80047ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a8:	4b19      	ldr	r3, [pc, #100]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4916      	ldr	r1, [pc, #88]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	490e      	ldr	r1, [pc, #56]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047da:	f000 f821 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 80047de:	4601      	mov	r1, r0
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCC_ClockConfig+0x1c4>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <HAL_RCC_ClockConfig+0x1c8>)
 80047ec:	5cd3      	ldrb	r3, [r2, r3]
 80047ee:	fa21 f303 	lsr.w	r3, r1, r3
 80047f2:	4a09      	ldr	r2, [pc, #36]	; (8004818 <HAL_RCC_ClockConfig+0x1cc>)
 80047f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <HAL_RCC_ClockConfig+0x1d0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd fd6a 	bl	80022d4 <HAL_InitTick>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40022000 	.word	0x40022000
 8004810:	40021000 	.word	0x40021000
 8004814:	08008274 	.word	0x08008274
 8004818:	2000001c 	.word	0x2000001c
 800481c:	20000020 	.word	0x20000020

08004820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004820:	b490      	push	{r4, r7}
 8004822:	b08a      	sub	sp, #40	; 0x28
 8004824:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004826:	4b2a      	ldr	r3, [pc, #168]	; (80048d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004828:	1d3c      	adds	r4, r7, #4
 800482a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800482c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004830:	4b28      	ldr	r3, [pc, #160]	; (80048d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	2300      	movs	r3, #0
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
 8004842:	2300      	movs	r3, #0
 8004844:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800484a:	4b23      	ldr	r3, [pc, #140]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b04      	cmp	r3, #4
 8004858:	d002      	beq.n	8004860 <HAL_RCC_GetSysClockFreq+0x40>
 800485a:	2b08      	cmp	r3, #8
 800485c:	d003      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0x46>
 800485e:	e02d      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004860:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004862:	623b      	str	r3, [r7, #32]
      break;
 8004864:	e02d      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	0c9b      	lsrs	r3, r3, #18
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004872:	4413      	add	r3, r2
 8004874:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004878:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d013      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	0c5b      	lsrs	r3, r3, #17
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004892:	4413      	add	r3, r2
 8004894:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004898:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	4a0f      	ldr	r2, [pc, #60]	; (80048dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800489e:	fb02 f203 	mul.w	r2, r2, r3
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
 80048aa:	e004      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	4a0c      	ldr	r2, [pc, #48]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	623b      	str	r3, [r7, #32]
      break;
 80048ba:	e002      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80048be:	623b      	str	r3, [r7, #32]
      break;
 80048c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c2:	6a3b      	ldr	r3, [r7, #32]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3728      	adds	r7, #40	; 0x28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc90      	pop	{r4, r7}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	08006d84 	.word	0x08006d84
 80048d4:	08006d94 	.word	0x08006d94
 80048d8:	40021000 	.word	0x40021000
 80048dc:	007a1200 	.word	0x007a1200
 80048e0:	003d0900 	.word	0x003d0900

080048e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e8:	4b02      	ldr	r3, [pc, #8]	; (80048f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80048ea:	681b      	ldr	r3, [r3, #0]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	2000001c 	.word	0x2000001c

080048f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048fc:	f7ff fff2 	bl	80048e4 <HAL_RCC_GetHCLKFreq>
 8004900:	4601      	mov	r1, r0
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	0a1b      	lsrs	r3, r3, #8
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	4a03      	ldr	r2, [pc, #12]	; (800491c <HAL_RCC_GetPCLK1Freq+0x24>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40021000 	.word	0x40021000
 800491c:	08008284 	.word	0x08008284

08004920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004924:	f7ff ffde 	bl	80048e4 <HAL_RCC_GetHCLKFreq>
 8004928:	4601      	mov	r1, r0
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	0adb      	lsrs	r3, r3, #11
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	4a03      	ldr	r2, [pc, #12]	; (8004944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004936:	5cd3      	ldrb	r3, [r2, r3]
 8004938:	fa21 f303 	lsr.w	r3, r1, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021000 	.word	0x40021000
 8004944:	08008284 	.word	0x08008284

08004948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <RCC_Delay+0x34>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <RCC_Delay+0x38>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	0a5b      	lsrs	r3, r3, #9
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	fb02 f303 	mul.w	r3, r2, r3
 8004962:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004964:	bf00      	nop
  }
  while (Delay --);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1e5a      	subs	r2, r3, #1
 800496a:	60fa      	str	r2, [r7, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f9      	bne.n	8004964 <RCC_Delay+0x1c>
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	2000001c 	.word	0x2000001c
 8004980:	10624dd3 	.word	0x10624dd3

08004984 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d07d      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80049a0:	2300      	movs	r3, #0
 80049a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a4:	4b4f      	ldr	r3, [pc, #316]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10d      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b0:	4b4c      	ldr	r3, [pc, #304]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	4a4b      	ldr	r2, [pc, #300]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ba:	61d3      	str	r3, [r2, #28]
 80049bc:	4b49      	ldr	r3, [pc, #292]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	4b46      	ldr	r3, [pc, #280]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d118      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049d8:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a42      	ldr	r2, [pc, #264]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049e4:	f7fd fcb8 	bl	8002358 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	e008      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ec:	f7fd fcb4 	bl	8002358 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	; 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e06d      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049fe:	4b3a      	ldr	r3, [pc, #232]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a0a:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d02e      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d027      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a28:	4b2e      	ldr	r3, [pc, #184]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a32:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a38:	4b2c      	ldr	r3, [pc, #176]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a3e:	4a29      	ldr	r2, [pc, #164]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d014      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a4e:	f7fd fc83 	bl	8002358 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fd fc7f 	bl	8002358 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e036      	b.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ee      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a78:	4b1a      	ldr	r3, [pc, #104]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4917      	ldr	r1, [pc, #92]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a90:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	490b      	ldr	r1, [pc, #44]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d008      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	4904      	ldr	r1, [pc, #16]	; (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40007000 	.word	0x40007000
 8004aec:	42420440 	.word	0x42420440

08004af0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b08d      	sub	sp, #52	; 0x34
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004af8:	4b55      	ldr	r3, [pc, #340]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004afa:	f107 040c 	add.w	r4, r7, #12
 8004afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b04:	4b53      	ldr	r3, [pc, #332]	; (8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0e:	2300      	movs	r3, #0
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b12:	2300      	movs	r3, #0
 8004b14:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d07f      	beq.n	8004c24 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004b24:	2b10      	cmp	r3, #16
 8004b26:	d002      	beq.n	8004b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d048      	beq.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004b2c:	e08b      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8004b2e:	4b4a      	ldr	r3, [pc, #296]	; (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004b34:	4b48      	ldr	r3, [pc, #288]	; (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d07f      	beq.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	0c9b      	lsrs	r3, r3, #18
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b52:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d018      	beq.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b5e:	4b3e      	ldr	r3, [pc, #248]	; (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	0c5b      	lsrs	r3, r3, #17
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00d      	beq.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004b7e:	4a37      	ldr	r2, [pc, #220]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	fb02 f303 	mul.w	r3, r2, r3
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b8e:	e004      	b.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	4a33      	ldr	r2, [pc, #204]	; (8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004b94:	fb02 f303 	mul.w	r3, r2, r3
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004b9a:	4b2f      	ldr	r3, [pc, #188]	; (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba6:	d102      	bne.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004bac:	e048      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	4a2c      	ldr	r2, [pc, #176]	; (8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	085b      	lsrs	r3, r3, #1
 8004bba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004bbc:	e040      	b.n	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8004bbe:	4b26      	ldr	r3, [pc, #152]	; (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bce:	d108      	bne.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8004bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be0:	e01f      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bec:	d109      	bne.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8004bee:	4b1a      	ldr	r3, [pc, #104]	; (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8004bfa:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c00:	e00f      	b.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c0c:	d11a      	bne.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d014      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8004c1a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004c20:	e010      	b.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8004c22:	e00f      	b.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004c24:	f7ff fe7c 	bl	8004920 <HAL_RCC_GetPCLK2Freq>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	0b9b      	lsrs	r3, r3, #14
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	3301      	adds	r3, #1
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004c3e:	e002      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004c40:	bf00      	nop
 8004c42:	e000      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8004c44:	bf00      	nop
    }
  }
  return (frequency);
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3734      	adds	r7, #52	; 0x34
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd90      	pop	{r4, r7, pc}
 8004c50:	08006d98 	.word	0x08006d98
 8004c54:	08006da8 	.word	0x08006da8
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	007a1200 	.word	0x007a1200
 8004c60:	003d0900 	.word	0x003d0900
 8004c64:	aaaaaaab 	.word	0xaaaaaaab

08004c68 <__errno>:
 8004c68:	4b01      	ldr	r3, [pc, #4]	; (8004c70 <__errno+0x8>)
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000028 	.word	0x20000028

08004c74 <__libc_init_array>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	2500      	movs	r5, #0
 8004c78:	4e0c      	ldr	r6, [pc, #48]	; (8004cac <__libc_init_array+0x38>)
 8004c7a:	4c0d      	ldr	r4, [pc, #52]	; (8004cb0 <__libc_init_array+0x3c>)
 8004c7c:	1ba4      	subs	r4, r4, r6
 8004c7e:	10a4      	asrs	r4, r4, #2
 8004c80:	42a5      	cmp	r5, r4
 8004c82:	d109      	bne.n	8004c98 <__libc_init_array+0x24>
 8004c84:	f002 f85e 	bl	8006d44 <_init>
 8004c88:	2500      	movs	r5, #0
 8004c8a:	4e0a      	ldr	r6, [pc, #40]	; (8004cb4 <__libc_init_array+0x40>)
 8004c8c:	4c0a      	ldr	r4, [pc, #40]	; (8004cb8 <__libc_init_array+0x44>)
 8004c8e:	1ba4      	subs	r4, r4, r6
 8004c90:	10a4      	asrs	r4, r4, #2
 8004c92:	42a5      	cmp	r5, r4
 8004c94:	d105      	bne.n	8004ca2 <__libc_init_array+0x2e>
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c9c:	4798      	blx	r3
 8004c9e:	3501      	adds	r5, #1
 8004ca0:	e7ee      	b.n	8004c80 <__libc_init_array+0xc>
 8004ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ca6:	4798      	blx	r3
 8004ca8:	3501      	adds	r5, #1
 8004caa:	e7f2      	b.n	8004c92 <__libc_init_array+0x1e>
 8004cac:	080084e8 	.word	0x080084e8
 8004cb0:	080084e8 	.word	0x080084e8
 8004cb4:	080084e8 	.word	0x080084e8
 8004cb8:	080084ec 	.word	0x080084ec

08004cbc <memset>:
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4402      	add	r2, r0
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <memset+0xa>
 8004cc4:	4770      	bx	lr
 8004cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cca:	e7f9      	b.n	8004cc0 <memset+0x4>

08004ccc <__cvt>:
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd2:	461e      	mov	r6, r3
 8004cd4:	bfbb      	ittet	lt
 8004cd6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004cda:	461e      	movlt	r6, r3
 8004cdc:	2300      	movge	r3, #0
 8004cde:	232d      	movlt	r3, #45	; 0x2d
 8004ce0:	b088      	sub	sp, #32
 8004ce2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004ce4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004ce8:	f027 0720 	bic.w	r7, r7, #32
 8004cec:	2f46      	cmp	r7, #70	; 0x46
 8004cee:	4614      	mov	r4, r2
 8004cf0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004cf2:	700b      	strb	r3, [r1, #0]
 8004cf4:	d004      	beq.n	8004d00 <__cvt+0x34>
 8004cf6:	2f45      	cmp	r7, #69	; 0x45
 8004cf8:	d100      	bne.n	8004cfc <__cvt+0x30>
 8004cfa:	3501      	adds	r5, #1
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e000      	b.n	8004d02 <__cvt+0x36>
 8004d00:	2303      	movs	r3, #3
 8004d02:	aa07      	add	r2, sp, #28
 8004d04:	9204      	str	r2, [sp, #16]
 8004d06:	aa06      	add	r2, sp, #24
 8004d08:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d0c:	e9cd 3500 	strd	r3, r5, [sp]
 8004d10:	4622      	mov	r2, r4
 8004d12:	4633      	mov	r3, r6
 8004d14:	f000 fcd8 	bl	80056c8 <_dtoa_r>
 8004d18:	2f47      	cmp	r7, #71	; 0x47
 8004d1a:	4680      	mov	r8, r0
 8004d1c:	d102      	bne.n	8004d24 <__cvt+0x58>
 8004d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d20:	07db      	lsls	r3, r3, #31
 8004d22:	d526      	bpl.n	8004d72 <__cvt+0xa6>
 8004d24:	2f46      	cmp	r7, #70	; 0x46
 8004d26:	eb08 0905 	add.w	r9, r8, r5
 8004d2a:	d111      	bne.n	8004d50 <__cvt+0x84>
 8004d2c:	f898 3000 	ldrb.w	r3, [r8]
 8004d30:	2b30      	cmp	r3, #48	; 0x30
 8004d32:	d10a      	bne.n	8004d4a <__cvt+0x7e>
 8004d34:	2200      	movs	r2, #0
 8004d36:	2300      	movs	r3, #0
 8004d38:	4620      	mov	r0, r4
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	f7fb fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8004d40:	b918      	cbnz	r0, 8004d4a <__cvt+0x7e>
 8004d42:	f1c5 0501 	rsb	r5, r5, #1
 8004d46:	f8ca 5000 	str.w	r5, [sl]
 8004d4a:	f8da 3000 	ldr.w	r3, [sl]
 8004d4e:	4499      	add	r9, r3
 8004d50:	2200      	movs	r2, #0
 8004d52:	2300      	movs	r3, #0
 8004d54:	4620      	mov	r0, r4
 8004d56:	4631      	mov	r1, r6
 8004d58:	f7fb fe26 	bl	80009a8 <__aeabi_dcmpeq>
 8004d5c:	b938      	cbnz	r0, 8004d6e <__cvt+0xa2>
 8004d5e:	2230      	movs	r2, #48	; 0x30
 8004d60:	9b07      	ldr	r3, [sp, #28]
 8004d62:	454b      	cmp	r3, r9
 8004d64:	d205      	bcs.n	8004d72 <__cvt+0xa6>
 8004d66:	1c59      	adds	r1, r3, #1
 8004d68:	9107      	str	r1, [sp, #28]
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	e7f8      	b.n	8004d60 <__cvt+0x94>
 8004d6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d72:	4640      	mov	r0, r8
 8004d74:	9b07      	ldr	r3, [sp, #28]
 8004d76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d78:	eba3 0308 	sub.w	r3, r3, r8
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	b008      	add	sp, #32
 8004d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004d84 <__exponent>:
 8004d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d86:	2900      	cmp	r1, #0
 8004d88:	bfb4      	ite	lt
 8004d8a:	232d      	movlt	r3, #45	; 0x2d
 8004d8c:	232b      	movge	r3, #43	; 0x2b
 8004d8e:	4604      	mov	r4, r0
 8004d90:	bfb8      	it	lt
 8004d92:	4249      	neglt	r1, r1
 8004d94:	2909      	cmp	r1, #9
 8004d96:	f804 2b02 	strb.w	r2, [r4], #2
 8004d9a:	7043      	strb	r3, [r0, #1]
 8004d9c:	dd21      	ble.n	8004de2 <__exponent+0x5e>
 8004d9e:	f10d 0307 	add.w	r3, sp, #7
 8004da2:	461f      	mov	r7, r3
 8004da4:	260a      	movs	r6, #10
 8004da6:	fb91 f5f6 	sdiv	r5, r1, r6
 8004daa:	fb06 1115 	mls	r1, r6, r5, r1
 8004dae:	2d09      	cmp	r5, #9
 8004db0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004db4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004db8:	f103 32ff 	add.w	r2, r3, #4294967295
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	dc09      	bgt.n	8004dd4 <__exponent+0x50>
 8004dc0:	3130      	adds	r1, #48	; 0x30
 8004dc2:	3b02      	subs	r3, #2
 8004dc4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004dc8:	42bb      	cmp	r3, r7
 8004dca:	4622      	mov	r2, r4
 8004dcc:	d304      	bcc.n	8004dd8 <__exponent+0x54>
 8004dce:	1a10      	subs	r0, r2, r0
 8004dd0:	b003      	add	sp, #12
 8004dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	e7e6      	b.n	8004da6 <__exponent+0x22>
 8004dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ddc:	f804 2b01 	strb.w	r2, [r4], #1
 8004de0:	e7f2      	b.n	8004dc8 <__exponent+0x44>
 8004de2:	2330      	movs	r3, #48	; 0x30
 8004de4:	4419      	add	r1, r3
 8004de6:	7083      	strb	r3, [r0, #2]
 8004de8:	1d02      	adds	r2, r0, #4
 8004dea:	70c1      	strb	r1, [r0, #3]
 8004dec:	e7ef      	b.n	8004dce <__exponent+0x4a>
	...

08004df0 <_printf_float>:
 8004df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df4:	b091      	sub	sp, #68	; 0x44
 8004df6:	460c      	mov	r4, r1
 8004df8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004dfa:	4693      	mov	fp, r2
 8004dfc:	461e      	mov	r6, r3
 8004dfe:	4605      	mov	r5, r0
 8004e00:	f001 fa16 	bl	8006230 <_localeconv_r>
 8004e04:	6803      	ldr	r3, [r0, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	9309      	str	r3, [sp, #36]	; 0x24
 8004e0a:	f7fb f9a1 	bl	8000150 <strlen>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	930e      	str	r3, [sp, #56]	; 0x38
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	900a      	str	r0, [sp, #40]	; 0x28
 8004e16:	3307      	adds	r3, #7
 8004e18:	f023 0307 	bic.w	r3, r3, #7
 8004e1c:	f103 0208 	add.w	r2, r3, #8
 8004e20:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004e24:	f8d4 a000 	ldr.w	sl, [r4]
 8004e28:	603a      	str	r2, [r7, #0]
 8004e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e32:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8004e36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e40:	4ba6      	ldr	r3, [pc, #664]	; (80050dc <_printf_float+0x2ec>)
 8004e42:	4638      	mov	r0, r7
 8004e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e46:	f7fb fde1 	bl	8000a0c <__aeabi_dcmpun>
 8004e4a:	bb68      	cbnz	r0, 8004ea8 <_printf_float+0xb8>
 8004e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e50:	4ba2      	ldr	r3, [pc, #648]	; (80050dc <_printf_float+0x2ec>)
 8004e52:	4638      	mov	r0, r7
 8004e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e56:	f7fb fdbb 	bl	80009d0 <__aeabi_dcmple>
 8004e5a:	bb28      	cbnz	r0, 8004ea8 <_printf_float+0xb8>
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2300      	movs	r3, #0
 8004e60:	4638      	mov	r0, r7
 8004e62:	4649      	mov	r1, r9
 8004e64:	f7fb fdaa 	bl	80009bc <__aeabi_dcmplt>
 8004e68:	b110      	cbz	r0, 8004e70 <_printf_float+0x80>
 8004e6a:	232d      	movs	r3, #45	; 0x2d
 8004e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e70:	4f9b      	ldr	r7, [pc, #620]	; (80050e0 <_printf_float+0x2f0>)
 8004e72:	4b9c      	ldr	r3, [pc, #624]	; (80050e4 <_printf_float+0x2f4>)
 8004e74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e78:	bf98      	it	ls
 8004e7a:	461f      	movls	r7, r3
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	f04f 0900 	mov.w	r9, #0
 8004e82:	6123      	str	r3, [r4, #16]
 8004e84:	f02a 0304 	bic.w	r3, sl, #4
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	9600      	str	r6, [sp, #0]
 8004e8c:	465b      	mov	r3, fp
 8004e8e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004e90:	4621      	mov	r1, r4
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 f9e2 	bl	800525c <_printf_common>
 8004e98:	3001      	adds	r0, #1
 8004e9a:	f040 8090 	bne.w	8004fbe <_printf_float+0x1ce>
 8004e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea2:	b011      	add	sp, #68	; 0x44
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea8:	463a      	mov	r2, r7
 8004eaa:	464b      	mov	r3, r9
 8004eac:	4638      	mov	r0, r7
 8004eae:	4649      	mov	r1, r9
 8004eb0:	f7fb fdac 	bl	8000a0c <__aeabi_dcmpun>
 8004eb4:	b110      	cbz	r0, 8004ebc <_printf_float+0xcc>
 8004eb6:	4f8c      	ldr	r7, [pc, #560]	; (80050e8 <_printf_float+0x2f8>)
 8004eb8:	4b8c      	ldr	r3, [pc, #560]	; (80050ec <_printf_float+0x2fc>)
 8004eba:	e7db      	b.n	8004e74 <_printf_float+0x84>
 8004ebc:	6863      	ldr	r3, [r4, #4]
 8004ebe:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004ec2:	1c59      	adds	r1, r3, #1
 8004ec4:	a80d      	add	r0, sp, #52	; 0x34
 8004ec6:	a90e      	add	r1, sp, #56	; 0x38
 8004ec8:	d140      	bne.n	8004f4c <_printf_float+0x15c>
 8004eca:	2306      	movs	r3, #6
 8004ecc:	6063      	str	r3, [r4, #4]
 8004ece:	f04f 0c00 	mov.w	ip, #0
 8004ed2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004ed6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004eda:	6863      	ldr	r3, [r4, #4]
 8004edc:	6022      	str	r2, [r4, #0]
 8004ede:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	463a      	mov	r2, r7
 8004ee6:	464b      	mov	r3, r9
 8004ee8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004eec:	4628      	mov	r0, r5
 8004eee:	f7ff feed 	bl	8004ccc <__cvt>
 8004ef2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004ef6:	2b47      	cmp	r3, #71	; 0x47
 8004ef8:	4607      	mov	r7, r0
 8004efa:	d109      	bne.n	8004f10 <_printf_float+0x120>
 8004efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004efe:	1cd8      	adds	r0, r3, #3
 8004f00:	db02      	blt.n	8004f08 <_printf_float+0x118>
 8004f02:	6862      	ldr	r2, [r4, #4]
 8004f04:	4293      	cmp	r3, r2
 8004f06:	dd47      	ble.n	8004f98 <_printf_float+0x1a8>
 8004f08:	f1a8 0802 	sub.w	r8, r8, #2
 8004f0c:	fa5f f888 	uxtb.w	r8, r8
 8004f10:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004f14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f16:	d824      	bhi.n	8004f62 <_printf_float+0x172>
 8004f18:	3901      	subs	r1, #1
 8004f1a:	4642      	mov	r2, r8
 8004f1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f20:	910d      	str	r1, [sp, #52]	; 0x34
 8004f22:	f7ff ff2f 	bl	8004d84 <__exponent>
 8004f26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f28:	4681      	mov	r9, r0
 8004f2a:	1813      	adds	r3, r2, r0
 8004f2c:	2a01      	cmp	r2, #1
 8004f2e:	6123      	str	r3, [r4, #16]
 8004f30:	dc02      	bgt.n	8004f38 <_printf_float+0x148>
 8004f32:	6822      	ldr	r2, [r4, #0]
 8004f34:	07d1      	lsls	r1, r2, #31
 8004f36:	d501      	bpl.n	8004f3c <_printf_float+0x14c>
 8004f38:	3301      	adds	r3, #1
 8004f3a:	6123      	str	r3, [r4, #16]
 8004f3c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0a2      	beq.n	8004e8a <_printf_float+0x9a>
 8004f44:	232d      	movs	r3, #45	; 0x2d
 8004f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f4a:	e79e      	b.n	8004e8a <_printf_float+0x9a>
 8004f4c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004f50:	f000 816e 	beq.w	8005230 <_printf_float+0x440>
 8004f54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f58:	d1b9      	bne.n	8004ece <_printf_float+0xde>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1b7      	bne.n	8004ece <_printf_float+0xde>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e7b4      	b.n	8004ecc <_printf_float+0xdc>
 8004f62:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004f66:	d119      	bne.n	8004f9c <_printf_float+0x1ac>
 8004f68:	2900      	cmp	r1, #0
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	dd0c      	ble.n	8004f88 <_printf_float+0x198>
 8004f6e:	6121      	str	r1, [r4, #16]
 8004f70:	b913      	cbnz	r3, 8004f78 <_printf_float+0x188>
 8004f72:	6822      	ldr	r2, [r4, #0]
 8004f74:	07d2      	lsls	r2, r2, #31
 8004f76:	d502      	bpl.n	8004f7e <_printf_float+0x18e>
 8004f78:	3301      	adds	r3, #1
 8004f7a:	440b      	add	r3, r1
 8004f7c:	6123      	str	r3, [r4, #16]
 8004f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f80:	f04f 0900 	mov.w	r9, #0
 8004f84:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f86:	e7d9      	b.n	8004f3c <_printf_float+0x14c>
 8004f88:	b913      	cbnz	r3, 8004f90 <_printf_float+0x1a0>
 8004f8a:	6822      	ldr	r2, [r4, #0]
 8004f8c:	07d0      	lsls	r0, r2, #31
 8004f8e:	d501      	bpl.n	8004f94 <_printf_float+0x1a4>
 8004f90:	3302      	adds	r3, #2
 8004f92:	e7f3      	b.n	8004f7c <_printf_float+0x18c>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e7f1      	b.n	8004f7c <_printf_float+0x18c>
 8004f98:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004f9c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	db05      	blt.n	8004fb0 <_printf_float+0x1c0>
 8004fa4:	6822      	ldr	r2, [r4, #0]
 8004fa6:	6123      	str	r3, [r4, #16]
 8004fa8:	07d1      	lsls	r1, r2, #31
 8004faa:	d5e8      	bpl.n	8004f7e <_printf_float+0x18e>
 8004fac:	3301      	adds	r3, #1
 8004fae:	e7e5      	b.n	8004f7c <_printf_float+0x18c>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bfcc      	ite	gt
 8004fb4:	2301      	movgt	r3, #1
 8004fb6:	f1c3 0302 	rsble	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	e7de      	b.n	8004f7c <_printf_float+0x18c>
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	055a      	lsls	r2, r3, #21
 8004fc2:	d407      	bmi.n	8004fd4 <_printf_float+0x1e4>
 8004fc4:	6923      	ldr	r3, [r4, #16]
 8004fc6:	463a      	mov	r2, r7
 8004fc8:	4659      	mov	r1, fp
 8004fca:	4628      	mov	r0, r5
 8004fcc:	47b0      	blx	r6
 8004fce:	3001      	adds	r0, #1
 8004fd0:	d129      	bne.n	8005026 <_printf_float+0x236>
 8004fd2:	e764      	b.n	8004e9e <_printf_float+0xae>
 8004fd4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004fd8:	f240 80d7 	bls.w	800518a <_printf_float+0x39a>
 8004fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f7fb fce0 	bl	80009a8 <__aeabi_dcmpeq>
 8004fe8:	b388      	cbz	r0, 800504e <_printf_float+0x25e>
 8004fea:	2301      	movs	r3, #1
 8004fec:	4a40      	ldr	r2, [pc, #256]	; (80050f0 <_printf_float+0x300>)
 8004fee:	4659      	mov	r1, fp
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	47b0      	blx	r6
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	f43f af52 	beq.w	8004e9e <_printf_float+0xae>
 8004ffa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ffe:	429a      	cmp	r2, r3
 8005000:	db02      	blt.n	8005008 <_printf_float+0x218>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	07d8      	lsls	r0, r3, #31
 8005006:	d50e      	bpl.n	8005026 <_printf_float+0x236>
 8005008:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800500c:	4659      	mov	r1, fp
 800500e:	4628      	mov	r0, r5
 8005010:	47b0      	blx	r6
 8005012:	3001      	adds	r0, #1
 8005014:	f43f af43 	beq.w	8004e9e <_printf_float+0xae>
 8005018:	2700      	movs	r7, #0
 800501a:	f104 081a 	add.w	r8, r4, #26
 800501e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005020:	3b01      	subs	r3, #1
 8005022:	42bb      	cmp	r3, r7
 8005024:	dc09      	bgt.n	800503a <_printf_float+0x24a>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	079f      	lsls	r7, r3, #30
 800502a:	f100 80fd 	bmi.w	8005228 <_printf_float+0x438>
 800502e:	68e0      	ldr	r0, [r4, #12]
 8005030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005032:	4298      	cmp	r0, r3
 8005034:	bfb8      	it	lt
 8005036:	4618      	movlt	r0, r3
 8005038:	e733      	b.n	8004ea2 <_printf_float+0xb2>
 800503a:	2301      	movs	r3, #1
 800503c:	4642      	mov	r2, r8
 800503e:	4659      	mov	r1, fp
 8005040:	4628      	mov	r0, r5
 8005042:	47b0      	blx	r6
 8005044:	3001      	adds	r0, #1
 8005046:	f43f af2a 	beq.w	8004e9e <_printf_float+0xae>
 800504a:	3701      	adds	r7, #1
 800504c:	e7e7      	b.n	800501e <_printf_float+0x22e>
 800504e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005050:	2b00      	cmp	r3, #0
 8005052:	dc2b      	bgt.n	80050ac <_printf_float+0x2bc>
 8005054:	2301      	movs	r3, #1
 8005056:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <_printf_float+0x300>)
 8005058:	4659      	mov	r1, fp
 800505a:	4628      	mov	r0, r5
 800505c:	47b0      	blx	r6
 800505e:	3001      	adds	r0, #1
 8005060:	f43f af1d 	beq.w	8004e9e <_printf_float+0xae>
 8005064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005066:	b923      	cbnz	r3, 8005072 <_printf_float+0x282>
 8005068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800506a:	b913      	cbnz	r3, 8005072 <_printf_float+0x282>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	07d9      	lsls	r1, r3, #31
 8005070:	d5d9      	bpl.n	8005026 <_printf_float+0x236>
 8005072:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005076:	4659      	mov	r1, fp
 8005078:	4628      	mov	r0, r5
 800507a:	47b0      	blx	r6
 800507c:	3001      	adds	r0, #1
 800507e:	f43f af0e 	beq.w	8004e9e <_printf_float+0xae>
 8005082:	f04f 0800 	mov.w	r8, #0
 8005086:	f104 091a 	add.w	r9, r4, #26
 800508a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800508c:	425b      	negs	r3, r3
 800508e:	4543      	cmp	r3, r8
 8005090:	dc01      	bgt.n	8005096 <_printf_float+0x2a6>
 8005092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005094:	e797      	b.n	8004fc6 <_printf_float+0x1d6>
 8005096:	2301      	movs	r3, #1
 8005098:	464a      	mov	r2, r9
 800509a:	4659      	mov	r1, fp
 800509c:	4628      	mov	r0, r5
 800509e:	47b0      	blx	r6
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f aefc 	beq.w	8004e9e <_printf_float+0xae>
 80050a6:	f108 0801 	add.w	r8, r8, #1
 80050aa:	e7ee      	b.n	800508a <_printf_float+0x29a>
 80050ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050b0:	429a      	cmp	r2, r3
 80050b2:	bfa8      	it	ge
 80050b4:	461a      	movge	r2, r3
 80050b6:	2a00      	cmp	r2, #0
 80050b8:	4690      	mov	r8, r2
 80050ba:	dd07      	ble.n	80050cc <_printf_float+0x2dc>
 80050bc:	4613      	mov	r3, r2
 80050be:	4659      	mov	r1, fp
 80050c0:	463a      	mov	r2, r7
 80050c2:	4628      	mov	r0, r5
 80050c4:	47b0      	blx	r6
 80050c6:	3001      	adds	r0, #1
 80050c8:	f43f aee9 	beq.w	8004e9e <_printf_float+0xae>
 80050cc:	f104 031a 	add.w	r3, r4, #26
 80050d0:	f04f 0a00 	mov.w	sl, #0
 80050d4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80050d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80050da:	e015      	b.n	8005108 <_printf_float+0x318>
 80050dc:	7fefffff 	.word	0x7fefffff
 80050e0:	08008290 	.word	0x08008290
 80050e4:	0800828c 	.word	0x0800828c
 80050e8:	08008298 	.word	0x08008298
 80050ec:	08008294 	.word	0x08008294
 80050f0:	0800829c 	.word	0x0800829c
 80050f4:	2301      	movs	r3, #1
 80050f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050f8:	4659      	mov	r1, fp
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b0      	blx	r6
 80050fe:	3001      	adds	r0, #1
 8005100:	f43f aecd 	beq.w	8004e9e <_printf_float+0xae>
 8005104:	f10a 0a01 	add.w	sl, sl, #1
 8005108:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800510c:	eba9 0308 	sub.w	r3, r9, r8
 8005110:	4553      	cmp	r3, sl
 8005112:	dcef      	bgt.n	80050f4 <_printf_float+0x304>
 8005114:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005118:	429a      	cmp	r2, r3
 800511a:	444f      	add	r7, r9
 800511c:	db14      	blt.n	8005148 <_printf_float+0x358>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	07da      	lsls	r2, r3, #31
 8005122:	d411      	bmi.n	8005148 <_printf_float+0x358>
 8005124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005126:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005128:	eba3 0209 	sub.w	r2, r3, r9
 800512c:	eba3 0901 	sub.w	r9, r3, r1
 8005130:	4591      	cmp	r9, r2
 8005132:	bfa8      	it	ge
 8005134:	4691      	movge	r9, r2
 8005136:	f1b9 0f00 	cmp.w	r9, #0
 800513a:	dc0d      	bgt.n	8005158 <_printf_float+0x368>
 800513c:	2700      	movs	r7, #0
 800513e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005142:	f104 081a 	add.w	r8, r4, #26
 8005146:	e018      	b.n	800517a <_printf_float+0x38a>
 8005148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800514c:	4659      	mov	r1, fp
 800514e:	4628      	mov	r0, r5
 8005150:	47b0      	blx	r6
 8005152:	3001      	adds	r0, #1
 8005154:	d1e6      	bne.n	8005124 <_printf_float+0x334>
 8005156:	e6a2      	b.n	8004e9e <_printf_float+0xae>
 8005158:	464b      	mov	r3, r9
 800515a:	463a      	mov	r2, r7
 800515c:	4659      	mov	r1, fp
 800515e:	4628      	mov	r0, r5
 8005160:	47b0      	blx	r6
 8005162:	3001      	adds	r0, #1
 8005164:	d1ea      	bne.n	800513c <_printf_float+0x34c>
 8005166:	e69a      	b.n	8004e9e <_printf_float+0xae>
 8005168:	2301      	movs	r3, #1
 800516a:	4642      	mov	r2, r8
 800516c:	4659      	mov	r1, fp
 800516e:	4628      	mov	r0, r5
 8005170:	47b0      	blx	r6
 8005172:	3001      	adds	r0, #1
 8005174:	f43f ae93 	beq.w	8004e9e <_printf_float+0xae>
 8005178:	3701      	adds	r7, #1
 800517a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	eba3 0309 	sub.w	r3, r3, r9
 8005184:	42bb      	cmp	r3, r7
 8005186:	dcef      	bgt.n	8005168 <_printf_float+0x378>
 8005188:	e74d      	b.n	8005026 <_printf_float+0x236>
 800518a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800518c:	2a01      	cmp	r2, #1
 800518e:	dc01      	bgt.n	8005194 <_printf_float+0x3a4>
 8005190:	07db      	lsls	r3, r3, #31
 8005192:	d538      	bpl.n	8005206 <_printf_float+0x416>
 8005194:	2301      	movs	r3, #1
 8005196:	463a      	mov	r2, r7
 8005198:	4659      	mov	r1, fp
 800519a:	4628      	mov	r0, r5
 800519c:	47b0      	blx	r6
 800519e:	3001      	adds	r0, #1
 80051a0:	f43f ae7d 	beq.w	8004e9e <_printf_float+0xae>
 80051a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051a8:	4659      	mov	r1, fp
 80051aa:	4628      	mov	r0, r5
 80051ac:	47b0      	blx	r6
 80051ae:	3001      	adds	r0, #1
 80051b0:	f107 0701 	add.w	r7, r7, #1
 80051b4:	f43f ae73 	beq.w	8004e9e <_printf_float+0xae>
 80051b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051be:	2200      	movs	r2, #0
 80051c0:	f103 38ff 	add.w	r8, r3, #4294967295
 80051c4:	2300      	movs	r3, #0
 80051c6:	f7fb fbef 	bl	80009a8 <__aeabi_dcmpeq>
 80051ca:	b9c0      	cbnz	r0, 80051fe <_printf_float+0x40e>
 80051cc:	4643      	mov	r3, r8
 80051ce:	463a      	mov	r2, r7
 80051d0:	4659      	mov	r1, fp
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b0      	blx	r6
 80051d6:	3001      	adds	r0, #1
 80051d8:	d10d      	bne.n	80051f6 <_printf_float+0x406>
 80051da:	e660      	b.n	8004e9e <_printf_float+0xae>
 80051dc:	2301      	movs	r3, #1
 80051de:	4642      	mov	r2, r8
 80051e0:	4659      	mov	r1, fp
 80051e2:	4628      	mov	r0, r5
 80051e4:	47b0      	blx	r6
 80051e6:	3001      	adds	r0, #1
 80051e8:	f43f ae59 	beq.w	8004e9e <_printf_float+0xae>
 80051ec:	3701      	adds	r7, #1
 80051ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051f0:	3b01      	subs	r3, #1
 80051f2:	42bb      	cmp	r3, r7
 80051f4:	dcf2      	bgt.n	80051dc <_printf_float+0x3ec>
 80051f6:	464b      	mov	r3, r9
 80051f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051fc:	e6e4      	b.n	8004fc8 <_printf_float+0x1d8>
 80051fe:	2700      	movs	r7, #0
 8005200:	f104 081a 	add.w	r8, r4, #26
 8005204:	e7f3      	b.n	80051ee <_printf_float+0x3fe>
 8005206:	2301      	movs	r3, #1
 8005208:	e7e1      	b.n	80051ce <_printf_float+0x3de>
 800520a:	2301      	movs	r3, #1
 800520c:	4642      	mov	r2, r8
 800520e:	4659      	mov	r1, fp
 8005210:	4628      	mov	r0, r5
 8005212:	47b0      	blx	r6
 8005214:	3001      	adds	r0, #1
 8005216:	f43f ae42 	beq.w	8004e9e <_printf_float+0xae>
 800521a:	3701      	adds	r7, #1
 800521c:	68e3      	ldr	r3, [r4, #12]
 800521e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	42bb      	cmp	r3, r7
 8005224:	dcf1      	bgt.n	800520a <_printf_float+0x41a>
 8005226:	e702      	b.n	800502e <_printf_float+0x23e>
 8005228:	2700      	movs	r7, #0
 800522a:	f104 0819 	add.w	r8, r4, #25
 800522e:	e7f5      	b.n	800521c <_printf_float+0x42c>
 8005230:	2b00      	cmp	r3, #0
 8005232:	f43f ae94 	beq.w	8004f5e <_printf_float+0x16e>
 8005236:	f04f 0c00 	mov.w	ip, #0
 800523a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800523e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005242:	6022      	str	r2, [r4, #0]
 8005244:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005248:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	463a      	mov	r2, r7
 8005250:	464b      	mov	r3, r9
 8005252:	4628      	mov	r0, r5
 8005254:	f7ff fd3a 	bl	8004ccc <__cvt>
 8005258:	4607      	mov	r7, r0
 800525a:	e64f      	b.n	8004efc <_printf_float+0x10c>

0800525c <_printf_common>:
 800525c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005260:	4691      	mov	r9, r2
 8005262:	461f      	mov	r7, r3
 8005264:	688a      	ldr	r2, [r1, #8]
 8005266:	690b      	ldr	r3, [r1, #16]
 8005268:	4606      	mov	r6, r0
 800526a:	4293      	cmp	r3, r2
 800526c:	bfb8      	it	lt
 800526e:	4613      	movlt	r3, r2
 8005270:	f8c9 3000 	str.w	r3, [r9]
 8005274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005278:	460c      	mov	r4, r1
 800527a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800527e:	b112      	cbz	r2, 8005286 <_printf_common+0x2a>
 8005280:	3301      	adds	r3, #1
 8005282:	f8c9 3000 	str.w	r3, [r9]
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	0699      	lsls	r1, r3, #26
 800528a:	bf42      	ittt	mi
 800528c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005290:	3302      	addmi	r3, #2
 8005292:	f8c9 3000 	strmi.w	r3, [r9]
 8005296:	6825      	ldr	r5, [r4, #0]
 8005298:	f015 0506 	ands.w	r5, r5, #6
 800529c:	d107      	bne.n	80052ae <_printf_common+0x52>
 800529e:	f104 0a19 	add.w	sl, r4, #25
 80052a2:	68e3      	ldr	r3, [r4, #12]
 80052a4:	f8d9 2000 	ldr.w	r2, [r9]
 80052a8:	1a9b      	subs	r3, r3, r2
 80052aa:	42ab      	cmp	r3, r5
 80052ac:	dc29      	bgt.n	8005302 <_printf_common+0xa6>
 80052ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052b2:	6822      	ldr	r2, [r4, #0]
 80052b4:	3300      	adds	r3, #0
 80052b6:	bf18      	it	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	0692      	lsls	r2, r2, #26
 80052bc:	d42e      	bmi.n	800531c <_printf_common+0xc0>
 80052be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052c2:	4639      	mov	r1, r7
 80052c4:	4630      	mov	r0, r6
 80052c6:	47c0      	blx	r8
 80052c8:	3001      	adds	r0, #1
 80052ca:	d021      	beq.n	8005310 <_printf_common+0xb4>
 80052cc:	6823      	ldr	r3, [r4, #0]
 80052ce:	68e5      	ldr	r5, [r4, #12]
 80052d0:	f003 0306 	and.w	r3, r3, #6
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	bf18      	it	ne
 80052d8:	2500      	movne	r5, #0
 80052da:	f8d9 2000 	ldr.w	r2, [r9]
 80052de:	f04f 0900 	mov.w	r9, #0
 80052e2:	bf08      	it	eq
 80052e4:	1aad      	subeq	r5, r5, r2
 80052e6:	68a3      	ldr	r3, [r4, #8]
 80052e8:	6922      	ldr	r2, [r4, #16]
 80052ea:	bf08      	it	eq
 80052ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f0:	4293      	cmp	r3, r2
 80052f2:	bfc4      	itt	gt
 80052f4:	1a9b      	subgt	r3, r3, r2
 80052f6:	18ed      	addgt	r5, r5, r3
 80052f8:	341a      	adds	r4, #26
 80052fa:	454d      	cmp	r5, r9
 80052fc:	d11a      	bne.n	8005334 <_printf_common+0xd8>
 80052fe:	2000      	movs	r0, #0
 8005300:	e008      	b.n	8005314 <_printf_common+0xb8>
 8005302:	2301      	movs	r3, #1
 8005304:	4652      	mov	r2, sl
 8005306:	4639      	mov	r1, r7
 8005308:	4630      	mov	r0, r6
 800530a:	47c0      	blx	r8
 800530c:	3001      	adds	r0, #1
 800530e:	d103      	bne.n	8005318 <_printf_common+0xbc>
 8005310:	f04f 30ff 	mov.w	r0, #4294967295
 8005314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005318:	3501      	adds	r5, #1
 800531a:	e7c2      	b.n	80052a2 <_printf_common+0x46>
 800531c:	2030      	movs	r0, #48	; 0x30
 800531e:	18e1      	adds	r1, r4, r3
 8005320:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800532a:	4422      	add	r2, r4
 800532c:	3302      	adds	r3, #2
 800532e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005332:	e7c4      	b.n	80052be <_printf_common+0x62>
 8005334:	2301      	movs	r3, #1
 8005336:	4622      	mov	r2, r4
 8005338:	4639      	mov	r1, r7
 800533a:	4630      	mov	r0, r6
 800533c:	47c0      	blx	r8
 800533e:	3001      	adds	r0, #1
 8005340:	d0e6      	beq.n	8005310 <_printf_common+0xb4>
 8005342:	f109 0901 	add.w	r9, r9, #1
 8005346:	e7d8      	b.n	80052fa <_printf_common+0x9e>

08005348 <_printf_i>:
 8005348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800534c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005350:	460c      	mov	r4, r1
 8005352:	7e09      	ldrb	r1, [r1, #24]
 8005354:	b085      	sub	sp, #20
 8005356:	296e      	cmp	r1, #110	; 0x6e
 8005358:	4617      	mov	r7, r2
 800535a:	4606      	mov	r6, r0
 800535c:	4698      	mov	r8, r3
 800535e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005360:	f000 80b3 	beq.w	80054ca <_printf_i+0x182>
 8005364:	d822      	bhi.n	80053ac <_printf_i+0x64>
 8005366:	2963      	cmp	r1, #99	; 0x63
 8005368:	d036      	beq.n	80053d8 <_printf_i+0x90>
 800536a:	d80a      	bhi.n	8005382 <_printf_i+0x3a>
 800536c:	2900      	cmp	r1, #0
 800536e:	f000 80b9 	beq.w	80054e4 <_printf_i+0x19c>
 8005372:	2958      	cmp	r1, #88	; 0x58
 8005374:	f000 8083 	beq.w	800547e <_printf_i+0x136>
 8005378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800537c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005380:	e032      	b.n	80053e8 <_printf_i+0xa0>
 8005382:	2964      	cmp	r1, #100	; 0x64
 8005384:	d001      	beq.n	800538a <_printf_i+0x42>
 8005386:	2969      	cmp	r1, #105	; 0x69
 8005388:	d1f6      	bne.n	8005378 <_printf_i+0x30>
 800538a:	6820      	ldr	r0, [r4, #0]
 800538c:	6813      	ldr	r3, [r2, #0]
 800538e:	0605      	lsls	r5, r0, #24
 8005390:	f103 0104 	add.w	r1, r3, #4
 8005394:	d52a      	bpl.n	80053ec <_printf_i+0xa4>
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6011      	str	r1, [r2, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	da03      	bge.n	80053a6 <_printf_i+0x5e>
 800539e:	222d      	movs	r2, #45	; 0x2d
 80053a0:	425b      	negs	r3, r3
 80053a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053a6:	486f      	ldr	r0, [pc, #444]	; (8005564 <_printf_i+0x21c>)
 80053a8:	220a      	movs	r2, #10
 80053aa:	e039      	b.n	8005420 <_printf_i+0xd8>
 80053ac:	2973      	cmp	r1, #115	; 0x73
 80053ae:	f000 809d 	beq.w	80054ec <_printf_i+0x1a4>
 80053b2:	d808      	bhi.n	80053c6 <_printf_i+0x7e>
 80053b4:	296f      	cmp	r1, #111	; 0x6f
 80053b6:	d020      	beq.n	80053fa <_printf_i+0xb2>
 80053b8:	2970      	cmp	r1, #112	; 0x70
 80053ba:	d1dd      	bne.n	8005378 <_printf_i+0x30>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	f043 0320 	orr.w	r3, r3, #32
 80053c2:	6023      	str	r3, [r4, #0]
 80053c4:	e003      	b.n	80053ce <_printf_i+0x86>
 80053c6:	2975      	cmp	r1, #117	; 0x75
 80053c8:	d017      	beq.n	80053fa <_printf_i+0xb2>
 80053ca:	2978      	cmp	r1, #120	; 0x78
 80053cc:	d1d4      	bne.n	8005378 <_printf_i+0x30>
 80053ce:	2378      	movs	r3, #120	; 0x78
 80053d0:	4865      	ldr	r0, [pc, #404]	; (8005568 <_printf_i+0x220>)
 80053d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053d6:	e055      	b.n	8005484 <_printf_i+0x13c>
 80053d8:	6813      	ldr	r3, [r2, #0]
 80053da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053de:	1d19      	adds	r1, r3, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6011      	str	r1, [r2, #0]
 80053e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053e8:	2301      	movs	r3, #1
 80053ea:	e08c      	b.n	8005506 <_printf_i+0x1be>
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053f2:	6011      	str	r1, [r2, #0]
 80053f4:	bf18      	it	ne
 80053f6:	b21b      	sxthne	r3, r3
 80053f8:	e7cf      	b.n	800539a <_printf_i+0x52>
 80053fa:	6813      	ldr	r3, [r2, #0]
 80053fc:	6825      	ldr	r5, [r4, #0]
 80053fe:	1d18      	adds	r0, r3, #4
 8005400:	6010      	str	r0, [r2, #0]
 8005402:	0628      	lsls	r0, r5, #24
 8005404:	d501      	bpl.n	800540a <_printf_i+0xc2>
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	e002      	b.n	8005410 <_printf_i+0xc8>
 800540a:	0668      	lsls	r0, r5, #25
 800540c:	d5fb      	bpl.n	8005406 <_printf_i+0xbe>
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	296f      	cmp	r1, #111	; 0x6f
 8005412:	bf14      	ite	ne
 8005414:	220a      	movne	r2, #10
 8005416:	2208      	moveq	r2, #8
 8005418:	4852      	ldr	r0, [pc, #328]	; (8005564 <_printf_i+0x21c>)
 800541a:	2100      	movs	r1, #0
 800541c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005420:	6865      	ldr	r5, [r4, #4]
 8005422:	2d00      	cmp	r5, #0
 8005424:	60a5      	str	r5, [r4, #8]
 8005426:	f2c0 8095 	blt.w	8005554 <_printf_i+0x20c>
 800542a:	6821      	ldr	r1, [r4, #0]
 800542c:	f021 0104 	bic.w	r1, r1, #4
 8005430:	6021      	str	r1, [r4, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d13d      	bne.n	80054b2 <_printf_i+0x16a>
 8005436:	2d00      	cmp	r5, #0
 8005438:	f040 808e 	bne.w	8005558 <_printf_i+0x210>
 800543c:	4665      	mov	r5, ip
 800543e:	2a08      	cmp	r2, #8
 8005440:	d10b      	bne.n	800545a <_printf_i+0x112>
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	07db      	lsls	r3, r3, #31
 8005446:	d508      	bpl.n	800545a <_printf_i+0x112>
 8005448:	6923      	ldr	r3, [r4, #16]
 800544a:	6862      	ldr	r2, [r4, #4]
 800544c:	429a      	cmp	r2, r3
 800544e:	bfde      	ittt	le
 8005450:	2330      	movle	r3, #48	; 0x30
 8005452:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005456:	f105 35ff 	addle.w	r5, r5, #4294967295
 800545a:	ebac 0305 	sub.w	r3, ip, r5
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	f8cd 8000 	str.w	r8, [sp]
 8005464:	463b      	mov	r3, r7
 8005466:	aa03      	add	r2, sp, #12
 8005468:	4621      	mov	r1, r4
 800546a:	4630      	mov	r0, r6
 800546c:	f7ff fef6 	bl	800525c <_printf_common>
 8005470:	3001      	adds	r0, #1
 8005472:	d14d      	bne.n	8005510 <_printf_i+0x1c8>
 8005474:	f04f 30ff 	mov.w	r0, #4294967295
 8005478:	b005      	add	sp, #20
 800547a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800547e:	4839      	ldr	r0, [pc, #228]	; (8005564 <_printf_i+0x21c>)
 8005480:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005484:	6813      	ldr	r3, [r2, #0]
 8005486:	6821      	ldr	r1, [r4, #0]
 8005488:	1d1d      	adds	r5, r3, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6015      	str	r5, [r2, #0]
 800548e:	060a      	lsls	r2, r1, #24
 8005490:	d50b      	bpl.n	80054aa <_printf_i+0x162>
 8005492:	07ca      	lsls	r2, r1, #31
 8005494:	bf44      	itt	mi
 8005496:	f041 0120 	orrmi.w	r1, r1, #32
 800549a:	6021      	strmi	r1, [r4, #0]
 800549c:	b91b      	cbnz	r3, 80054a6 <_printf_i+0x15e>
 800549e:	6822      	ldr	r2, [r4, #0]
 80054a0:	f022 0220 	bic.w	r2, r2, #32
 80054a4:	6022      	str	r2, [r4, #0]
 80054a6:	2210      	movs	r2, #16
 80054a8:	e7b7      	b.n	800541a <_printf_i+0xd2>
 80054aa:	064d      	lsls	r5, r1, #25
 80054ac:	bf48      	it	mi
 80054ae:	b29b      	uxthmi	r3, r3
 80054b0:	e7ef      	b.n	8005492 <_printf_i+0x14a>
 80054b2:	4665      	mov	r5, ip
 80054b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80054b8:	fb02 3311 	mls	r3, r2, r1, r3
 80054bc:	5cc3      	ldrb	r3, [r0, r3]
 80054be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054c2:	460b      	mov	r3, r1
 80054c4:	2900      	cmp	r1, #0
 80054c6:	d1f5      	bne.n	80054b4 <_printf_i+0x16c>
 80054c8:	e7b9      	b.n	800543e <_printf_i+0xf6>
 80054ca:	6813      	ldr	r3, [r2, #0]
 80054cc:	6825      	ldr	r5, [r4, #0]
 80054ce:	1d18      	adds	r0, r3, #4
 80054d0:	6961      	ldr	r1, [r4, #20]
 80054d2:	6010      	str	r0, [r2, #0]
 80054d4:	0628      	lsls	r0, r5, #24
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	d501      	bpl.n	80054de <_printf_i+0x196>
 80054da:	6019      	str	r1, [r3, #0]
 80054dc:	e002      	b.n	80054e4 <_printf_i+0x19c>
 80054de:	066a      	lsls	r2, r5, #25
 80054e0:	d5fb      	bpl.n	80054da <_printf_i+0x192>
 80054e2:	8019      	strh	r1, [r3, #0]
 80054e4:	2300      	movs	r3, #0
 80054e6:	4665      	mov	r5, ip
 80054e8:	6123      	str	r3, [r4, #16]
 80054ea:	e7b9      	b.n	8005460 <_printf_i+0x118>
 80054ec:	6813      	ldr	r3, [r2, #0]
 80054ee:	1d19      	adds	r1, r3, #4
 80054f0:	6011      	str	r1, [r2, #0]
 80054f2:	681d      	ldr	r5, [r3, #0]
 80054f4:	6862      	ldr	r2, [r4, #4]
 80054f6:	2100      	movs	r1, #0
 80054f8:	4628      	mov	r0, r5
 80054fa:	f000 feaf 	bl	800625c <memchr>
 80054fe:	b108      	cbz	r0, 8005504 <_printf_i+0x1bc>
 8005500:	1b40      	subs	r0, r0, r5
 8005502:	6060      	str	r0, [r4, #4]
 8005504:	6863      	ldr	r3, [r4, #4]
 8005506:	6123      	str	r3, [r4, #16]
 8005508:	2300      	movs	r3, #0
 800550a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800550e:	e7a7      	b.n	8005460 <_printf_i+0x118>
 8005510:	6923      	ldr	r3, [r4, #16]
 8005512:	462a      	mov	r2, r5
 8005514:	4639      	mov	r1, r7
 8005516:	4630      	mov	r0, r6
 8005518:	47c0      	blx	r8
 800551a:	3001      	adds	r0, #1
 800551c:	d0aa      	beq.n	8005474 <_printf_i+0x12c>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	079b      	lsls	r3, r3, #30
 8005522:	d413      	bmi.n	800554c <_printf_i+0x204>
 8005524:	68e0      	ldr	r0, [r4, #12]
 8005526:	9b03      	ldr	r3, [sp, #12]
 8005528:	4298      	cmp	r0, r3
 800552a:	bfb8      	it	lt
 800552c:	4618      	movlt	r0, r3
 800552e:	e7a3      	b.n	8005478 <_printf_i+0x130>
 8005530:	2301      	movs	r3, #1
 8005532:	464a      	mov	r2, r9
 8005534:	4639      	mov	r1, r7
 8005536:	4630      	mov	r0, r6
 8005538:	47c0      	blx	r8
 800553a:	3001      	adds	r0, #1
 800553c:	d09a      	beq.n	8005474 <_printf_i+0x12c>
 800553e:	3501      	adds	r5, #1
 8005540:	68e3      	ldr	r3, [r4, #12]
 8005542:	9a03      	ldr	r2, [sp, #12]
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	42ab      	cmp	r3, r5
 8005548:	dcf2      	bgt.n	8005530 <_printf_i+0x1e8>
 800554a:	e7eb      	b.n	8005524 <_printf_i+0x1dc>
 800554c:	2500      	movs	r5, #0
 800554e:	f104 0919 	add.w	r9, r4, #25
 8005552:	e7f5      	b.n	8005540 <_printf_i+0x1f8>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1ac      	bne.n	80054b2 <_printf_i+0x16a>
 8005558:	7803      	ldrb	r3, [r0, #0]
 800555a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800555e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005562:	e76c      	b.n	800543e <_printf_i+0xf6>
 8005564:	0800829e 	.word	0x0800829e
 8005568:	080082af 	.word	0x080082af

0800556c <siprintf>:
 800556c:	b40e      	push	{r1, r2, r3}
 800556e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005572:	b500      	push	{lr}
 8005574:	b09c      	sub	sp, #112	; 0x70
 8005576:	ab1d      	add	r3, sp, #116	; 0x74
 8005578:	9002      	str	r0, [sp, #8]
 800557a:	9006      	str	r0, [sp, #24]
 800557c:	9107      	str	r1, [sp, #28]
 800557e:	9104      	str	r1, [sp, #16]
 8005580:	4808      	ldr	r0, [pc, #32]	; (80055a4 <siprintf+0x38>)
 8005582:	4909      	ldr	r1, [pc, #36]	; (80055a8 <siprintf+0x3c>)
 8005584:	f853 2b04 	ldr.w	r2, [r3], #4
 8005588:	9105      	str	r1, [sp, #20]
 800558a:	6800      	ldr	r0, [r0, #0]
 800558c:	a902      	add	r1, sp, #8
 800558e:	9301      	str	r3, [sp, #4]
 8005590:	f001 fa68 	bl	8006a64 <_svfiprintf_r>
 8005594:	2200      	movs	r2, #0
 8005596:	9b02      	ldr	r3, [sp, #8]
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	b01c      	add	sp, #112	; 0x70
 800559c:	f85d eb04 	ldr.w	lr, [sp], #4
 80055a0:	b003      	add	sp, #12
 80055a2:	4770      	bx	lr
 80055a4:	20000028 	.word	0x20000028
 80055a8:	ffff0208 	.word	0xffff0208

080055ac <quorem>:
 80055ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b0:	6903      	ldr	r3, [r0, #16]
 80055b2:	690c      	ldr	r4, [r1, #16]
 80055b4:	4680      	mov	r8, r0
 80055b6:	42a3      	cmp	r3, r4
 80055b8:	f2c0 8084 	blt.w	80056c4 <quorem+0x118>
 80055bc:	3c01      	subs	r4, #1
 80055be:	f101 0714 	add.w	r7, r1, #20
 80055c2:	f100 0614 	add.w	r6, r0, #20
 80055c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80055ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80055ce:	3501      	adds	r5, #1
 80055d0:	fbb0 f5f5 	udiv	r5, r0, r5
 80055d4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80055d8:	eb06 030c 	add.w	r3, r6, ip
 80055dc:	eb07 090c 	add.w	r9, r7, ip
 80055e0:	9301      	str	r3, [sp, #4]
 80055e2:	b39d      	cbz	r5, 800564c <quorem+0xa0>
 80055e4:	f04f 0a00 	mov.w	sl, #0
 80055e8:	4638      	mov	r0, r7
 80055ea:	46b6      	mov	lr, r6
 80055ec:	46d3      	mov	fp, sl
 80055ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80055f2:	b293      	uxth	r3, r2
 80055f4:	fb05 a303 	mla	r3, r5, r3, sl
 80055f8:	0c12      	lsrs	r2, r2, #16
 80055fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055fe:	fb05 a202 	mla	r2, r5, r2, sl
 8005602:	b29b      	uxth	r3, r3
 8005604:	ebab 0303 	sub.w	r3, fp, r3
 8005608:	f8de b000 	ldr.w	fp, [lr]
 800560c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005610:	fa1f fb8b 	uxth.w	fp, fp
 8005614:	445b      	add	r3, fp
 8005616:	fa1f fb82 	uxth.w	fp, r2
 800561a:	f8de 2000 	ldr.w	r2, [lr]
 800561e:	4581      	cmp	r9, r0
 8005620:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005628:	b29b      	uxth	r3, r3
 800562a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800562e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005632:	f84e 3b04 	str.w	r3, [lr], #4
 8005636:	d2da      	bcs.n	80055ee <quorem+0x42>
 8005638:	f856 300c 	ldr.w	r3, [r6, ip]
 800563c:	b933      	cbnz	r3, 800564c <quorem+0xa0>
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	3b04      	subs	r3, #4
 8005642:	429e      	cmp	r6, r3
 8005644:	461a      	mov	r2, r3
 8005646:	d331      	bcc.n	80056ac <quorem+0x100>
 8005648:	f8c8 4010 	str.w	r4, [r8, #16]
 800564c:	4640      	mov	r0, r8
 800564e:	f001 f833 	bl	80066b8 <__mcmp>
 8005652:	2800      	cmp	r0, #0
 8005654:	db26      	blt.n	80056a4 <quorem+0xf8>
 8005656:	4630      	mov	r0, r6
 8005658:	f04f 0c00 	mov.w	ip, #0
 800565c:	3501      	adds	r5, #1
 800565e:	f857 1b04 	ldr.w	r1, [r7], #4
 8005662:	f8d0 e000 	ldr.w	lr, [r0]
 8005666:	b28b      	uxth	r3, r1
 8005668:	ebac 0303 	sub.w	r3, ip, r3
 800566c:	fa1f f28e 	uxth.w	r2, lr
 8005670:	4413      	add	r3, r2
 8005672:	0c0a      	lsrs	r2, r1, #16
 8005674:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005678:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800567c:	b29b      	uxth	r3, r3
 800567e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005682:	45b9      	cmp	r9, r7
 8005684:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005688:	f840 3b04 	str.w	r3, [r0], #4
 800568c:	d2e7      	bcs.n	800565e <quorem+0xb2>
 800568e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005692:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005696:	b92a      	cbnz	r2, 80056a4 <quorem+0xf8>
 8005698:	3b04      	subs	r3, #4
 800569a:	429e      	cmp	r6, r3
 800569c:	461a      	mov	r2, r3
 800569e:	d30b      	bcc.n	80056b8 <quorem+0x10c>
 80056a0:	f8c8 4010 	str.w	r4, [r8, #16]
 80056a4:	4628      	mov	r0, r5
 80056a6:	b003      	add	sp, #12
 80056a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	3b04      	subs	r3, #4
 80056b0:	2a00      	cmp	r2, #0
 80056b2:	d1c9      	bne.n	8005648 <quorem+0x9c>
 80056b4:	3c01      	subs	r4, #1
 80056b6:	e7c4      	b.n	8005642 <quorem+0x96>
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	3b04      	subs	r3, #4
 80056bc:	2a00      	cmp	r2, #0
 80056be:	d1ef      	bne.n	80056a0 <quorem+0xf4>
 80056c0:	3c01      	subs	r4, #1
 80056c2:	e7ea      	b.n	800569a <quorem+0xee>
 80056c4:	2000      	movs	r0, #0
 80056c6:	e7ee      	b.n	80056a6 <quorem+0xfa>

080056c8 <_dtoa_r>:
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	4616      	mov	r6, r2
 80056ce:	461f      	mov	r7, r3
 80056d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056d2:	b095      	sub	sp, #84	; 0x54
 80056d4:	4604      	mov	r4, r0
 80056d6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80056da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80056de:	b93d      	cbnz	r5, 80056f0 <_dtoa_r+0x28>
 80056e0:	2010      	movs	r0, #16
 80056e2:	f000 fdb3 	bl	800624c <malloc>
 80056e6:	6260      	str	r0, [r4, #36]	; 0x24
 80056e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056ec:	6005      	str	r5, [r0, #0]
 80056ee:	60c5      	str	r5, [r0, #12]
 80056f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	b151      	cbz	r1, 800570c <_dtoa_r+0x44>
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	2301      	movs	r3, #1
 80056fa:	4093      	lsls	r3, r2
 80056fc:	604a      	str	r2, [r1, #4]
 80056fe:	608b      	str	r3, [r1, #8]
 8005700:	4620      	mov	r0, r4
 8005702:	f000 fdf8 	bl	80062f6 <_Bfree>
 8005706:	2200      	movs	r2, #0
 8005708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	1e3b      	subs	r3, r7, #0
 800570e:	bfaf      	iteee	ge
 8005710:	2300      	movge	r3, #0
 8005712:	2201      	movlt	r2, #1
 8005714:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005718:	9303      	strlt	r3, [sp, #12]
 800571a:	bfac      	ite	ge
 800571c:	f8c8 3000 	strge.w	r3, [r8]
 8005720:	f8c8 2000 	strlt.w	r2, [r8]
 8005724:	4bae      	ldr	r3, [pc, #696]	; (80059e0 <_dtoa_r+0x318>)
 8005726:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800572a:	ea33 0308 	bics.w	r3, r3, r8
 800572e:	d11b      	bne.n	8005768 <_dtoa_r+0xa0>
 8005730:	f242 730f 	movw	r3, #9999	; 0x270f
 8005734:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005736:	6013      	str	r3, [r2, #0]
 8005738:	9b02      	ldr	r3, [sp, #8]
 800573a:	b923      	cbnz	r3, 8005746 <_dtoa_r+0x7e>
 800573c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005740:	2800      	cmp	r0, #0
 8005742:	f000 8545 	beq.w	80061d0 <_dtoa_r+0xb08>
 8005746:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005748:	b953      	cbnz	r3, 8005760 <_dtoa_r+0x98>
 800574a:	4ba6      	ldr	r3, [pc, #664]	; (80059e4 <_dtoa_r+0x31c>)
 800574c:	e021      	b.n	8005792 <_dtoa_r+0xca>
 800574e:	4ba6      	ldr	r3, [pc, #664]	; (80059e8 <_dtoa_r+0x320>)
 8005750:	9306      	str	r3, [sp, #24]
 8005752:	3308      	adds	r3, #8
 8005754:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	9806      	ldr	r0, [sp, #24]
 800575a:	b015      	add	sp, #84	; 0x54
 800575c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005760:	4ba0      	ldr	r3, [pc, #640]	; (80059e4 <_dtoa_r+0x31c>)
 8005762:	9306      	str	r3, [sp, #24]
 8005764:	3303      	adds	r3, #3
 8005766:	e7f5      	b.n	8005754 <_dtoa_r+0x8c>
 8005768:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800576c:	2200      	movs	r2, #0
 800576e:	2300      	movs	r3, #0
 8005770:	4630      	mov	r0, r6
 8005772:	4639      	mov	r1, r7
 8005774:	f7fb f918 	bl	80009a8 <__aeabi_dcmpeq>
 8005778:	4682      	mov	sl, r0
 800577a:	b160      	cbz	r0, 8005796 <_dtoa_r+0xce>
 800577c:	2301      	movs	r3, #1
 800577e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8520 	beq.w	80061ca <_dtoa_r+0xb02>
 800578a:	4b98      	ldr	r3, [pc, #608]	; (80059ec <_dtoa_r+0x324>)
 800578c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	3b01      	subs	r3, #1
 8005792:	9306      	str	r3, [sp, #24]
 8005794:	e7e0      	b.n	8005758 <_dtoa_r+0x90>
 8005796:	ab12      	add	r3, sp, #72	; 0x48
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	ab13      	add	r3, sp, #76	; 0x4c
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	4632      	mov	r2, r6
 80057a0:	463b      	mov	r3, r7
 80057a2:	4620      	mov	r0, r4
 80057a4:	f001 f800 	bl	80067a8 <__d2b>
 80057a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80057ac:	4683      	mov	fp, r0
 80057ae:	2d00      	cmp	r5, #0
 80057b0:	d07d      	beq.n	80058ae <_dtoa_r+0x1e6>
 80057b2:	46b0      	mov	r8, r6
 80057b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80057b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80057bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80057c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80057c8:	2200      	movs	r2, #0
 80057ca:	4b89      	ldr	r3, [pc, #548]	; (80059f0 <_dtoa_r+0x328>)
 80057cc:	4640      	mov	r0, r8
 80057ce:	4649      	mov	r1, r9
 80057d0:	f7fa fcca 	bl	8000168 <__aeabi_dsub>
 80057d4:	a37c      	add	r3, pc, #496	; (adr r3, 80059c8 <_dtoa_r+0x300>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f7fa fe7d 	bl	80004d8 <__aeabi_dmul>
 80057de:	a37c      	add	r3, pc, #496	; (adr r3, 80059d0 <_dtoa_r+0x308>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f7fa fcc2 	bl	800016c <__adddf3>
 80057e8:	4606      	mov	r6, r0
 80057ea:	4628      	mov	r0, r5
 80057ec:	460f      	mov	r7, r1
 80057ee:	f7fa fe09 	bl	8000404 <__aeabi_i2d>
 80057f2:	a379      	add	r3, pc, #484	; (adr r3, 80059d8 <_dtoa_r+0x310>)
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f7fa fe6e 	bl	80004d8 <__aeabi_dmul>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4630      	mov	r0, r6
 8005802:	4639      	mov	r1, r7
 8005804:	f7fa fcb2 	bl	800016c <__adddf3>
 8005808:	4606      	mov	r6, r0
 800580a:	460f      	mov	r7, r1
 800580c:	f7fb f914 	bl	8000a38 <__aeabi_d2iz>
 8005810:	2200      	movs	r2, #0
 8005812:	4682      	mov	sl, r0
 8005814:	2300      	movs	r3, #0
 8005816:	4630      	mov	r0, r6
 8005818:	4639      	mov	r1, r7
 800581a:	f7fb f8cf 	bl	80009bc <__aeabi_dcmplt>
 800581e:	b148      	cbz	r0, 8005834 <_dtoa_r+0x16c>
 8005820:	4650      	mov	r0, sl
 8005822:	f7fa fdef 	bl	8000404 <__aeabi_i2d>
 8005826:	4632      	mov	r2, r6
 8005828:	463b      	mov	r3, r7
 800582a:	f7fb f8bd 	bl	80009a8 <__aeabi_dcmpeq>
 800582e:	b908      	cbnz	r0, 8005834 <_dtoa_r+0x16c>
 8005830:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005834:	f1ba 0f16 	cmp.w	sl, #22
 8005838:	d85a      	bhi.n	80058f0 <_dtoa_r+0x228>
 800583a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800583e:	496d      	ldr	r1, [pc, #436]	; (80059f4 <_dtoa_r+0x32c>)
 8005840:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005848:	f7fb f8d6 	bl	80009f8 <__aeabi_dcmpgt>
 800584c:	2800      	cmp	r0, #0
 800584e:	d051      	beq.n	80058f4 <_dtoa_r+0x22c>
 8005850:	2300      	movs	r3, #0
 8005852:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005856:	930d      	str	r3, [sp, #52]	; 0x34
 8005858:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800585a:	1b5d      	subs	r5, r3, r5
 800585c:	1e6b      	subs	r3, r5, #1
 800585e:	9307      	str	r3, [sp, #28]
 8005860:	bf43      	ittte	mi
 8005862:	2300      	movmi	r3, #0
 8005864:	f1c5 0901 	rsbmi	r9, r5, #1
 8005868:	9307      	strmi	r3, [sp, #28]
 800586a:	f04f 0900 	movpl.w	r9, #0
 800586e:	f1ba 0f00 	cmp.w	sl, #0
 8005872:	db41      	blt.n	80058f8 <_dtoa_r+0x230>
 8005874:	9b07      	ldr	r3, [sp, #28]
 8005876:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800587a:	4453      	add	r3, sl
 800587c:	9307      	str	r3, [sp, #28]
 800587e:	2300      	movs	r3, #0
 8005880:	9308      	str	r3, [sp, #32]
 8005882:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005884:	2b09      	cmp	r3, #9
 8005886:	f200 808f 	bhi.w	80059a8 <_dtoa_r+0x2e0>
 800588a:	2b05      	cmp	r3, #5
 800588c:	bfc4      	itt	gt
 800588e:	3b04      	subgt	r3, #4
 8005890:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005892:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005894:	bfc8      	it	gt
 8005896:	2500      	movgt	r5, #0
 8005898:	f1a3 0302 	sub.w	r3, r3, #2
 800589c:	bfd8      	it	le
 800589e:	2501      	movle	r5, #1
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	f200 808d 	bhi.w	80059c0 <_dtoa_r+0x2f8>
 80058a6:	e8df f003 	tbb	[pc, r3]
 80058aa:	7d7b      	.short	0x7d7b
 80058ac:	6f2f      	.short	0x6f2f
 80058ae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80058b2:	441d      	add	r5, r3
 80058b4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80058b8:	2820      	cmp	r0, #32
 80058ba:	dd13      	ble.n	80058e4 <_dtoa_r+0x21c>
 80058bc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80058c0:	9b02      	ldr	r3, [sp, #8]
 80058c2:	fa08 f800 	lsl.w	r8, r8, r0
 80058c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80058ca:	fa23 f000 	lsr.w	r0, r3, r0
 80058ce:	ea48 0000 	orr.w	r0, r8, r0
 80058d2:	f7fa fd87 	bl	80003e4 <__aeabi_ui2d>
 80058d6:	2301      	movs	r3, #1
 80058d8:	4680      	mov	r8, r0
 80058da:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80058de:	3d01      	subs	r5, #1
 80058e0:	9310      	str	r3, [sp, #64]	; 0x40
 80058e2:	e771      	b.n	80057c8 <_dtoa_r+0x100>
 80058e4:	9b02      	ldr	r3, [sp, #8]
 80058e6:	f1c0 0020 	rsb	r0, r0, #32
 80058ea:	fa03 f000 	lsl.w	r0, r3, r0
 80058ee:	e7f0      	b.n	80058d2 <_dtoa_r+0x20a>
 80058f0:	2301      	movs	r3, #1
 80058f2:	e7b0      	b.n	8005856 <_dtoa_r+0x18e>
 80058f4:	900d      	str	r0, [sp, #52]	; 0x34
 80058f6:	e7af      	b.n	8005858 <_dtoa_r+0x190>
 80058f8:	f1ca 0300 	rsb	r3, sl, #0
 80058fc:	9308      	str	r3, [sp, #32]
 80058fe:	2300      	movs	r3, #0
 8005900:	eba9 090a 	sub.w	r9, r9, sl
 8005904:	930c      	str	r3, [sp, #48]	; 0x30
 8005906:	e7bc      	b.n	8005882 <_dtoa_r+0x1ba>
 8005908:	2301      	movs	r3, #1
 800590a:	9309      	str	r3, [sp, #36]	; 0x24
 800590c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800590e:	2b00      	cmp	r3, #0
 8005910:	dd74      	ble.n	80059fc <_dtoa_r+0x334>
 8005912:	4698      	mov	r8, r3
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	2200      	movs	r2, #0
 8005918:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800591a:	6072      	str	r2, [r6, #4]
 800591c:	2204      	movs	r2, #4
 800591e:	f102 0014 	add.w	r0, r2, #20
 8005922:	4298      	cmp	r0, r3
 8005924:	6871      	ldr	r1, [r6, #4]
 8005926:	d96e      	bls.n	8005a06 <_dtoa_r+0x33e>
 8005928:	4620      	mov	r0, r4
 800592a:	f000 fcb0 	bl	800628e <_Balloc>
 800592e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005930:	6030      	str	r0, [r6, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f1b8 0f0e 	cmp.w	r8, #14
 8005938:	9306      	str	r3, [sp, #24]
 800593a:	f200 80ed 	bhi.w	8005b18 <_dtoa_r+0x450>
 800593e:	2d00      	cmp	r5, #0
 8005940:	f000 80ea 	beq.w	8005b18 <_dtoa_r+0x450>
 8005944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005948:	f1ba 0f00 	cmp.w	sl, #0
 800594c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005950:	dd77      	ble.n	8005a42 <_dtoa_r+0x37a>
 8005952:	4a28      	ldr	r2, [pc, #160]	; (80059f4 <_dtoa_r+0x32c>)
 8005954:	f00a 030f 	and.w	r3, sl, #15
 8005958:	ea4f 162a 	mov.w	r6, sl, asr #4
 800595c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005960:	06f0      	lsls	r0, r6, #27
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800596a:	d568      	bpl.n	8005a3e <_dtoa_r+0x376>
 800596c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005970:	4b21      	ldr	r3, [pc, #132]	; (80059f8 <_dtoa_r+0x330>)
 8005972:	2503      	movs	r5, #3
 8005974:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005978:	f7fa fed8 	bl	800072c <__aeabi_ddiv>
 800597c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005980:	f006 060f 	and.w	r6, r6, #15
 8005984:	4f1c      	ldr	r7, [pc, #112]	; (80059f8 <_dtoa_r+0x330>)
 8005986:	e04f      	b.n	8005a28 <_dtoa_r+0x360>
 8005988:	2301      	movs	r3, #1
 800598a:	9309      	str	r3, [sp, #36]	; 0x24
 800598c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800598e:	4453      	add	r3, sl
 8005990:	f103 0801 	add.w	r8, r3, #1
 8005994:	9304      	str	r3, [sp, #16]
 8005996:	4643      	mov	r3, r8
 8005998:	2b01      	cmp	r3, #1
 800599a:	bfb8      	it	lt
 800599c:	2301      	movlt	r3, #1
 800599e:	e7ba      	b.n	8005916 <_dtoa_r+0x24e>
 80059a0:	2300      	movs	r3, #0
 80059a2:	e7b2      	b.n	800590a <_dtoa_r+0x242>
 80059a4:	2300      	movs	r3, #0
 80059a6:	e7f0      	b.n	800598a <_dtoa_r+0x2c2>
 80059a8:	2501      	movs	r5, #1
 80059aa:	2300      	movs	r3, #0
 80059ac:	9509      	str	r5, [sp, #36]	; 0x24
 80059ae:	931e      	str	r3, [sp, #120]	; 0x78
 80059b0:	f04f 33ff 	mov.w	r3, #4294967295
 80059b4:	2200      	movs	r2, #0
 80059b6:	9304      	str	r3, [sp, #16]
 80059b8:	4698      	mov	r8, r3
 80059ba:	2312      	movs	r3, #18
 80059bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80059be:	e7aa      	b.n	8005916 <_dtoa_r+0x24e>
 80059c0:	2301      	movs	r3, #1
 80059c2:	9309      	str	r3, [sp, #36]	; 0x24
 80059c4:	e7f4      	b.n	80059b0 <_dtoa_r+0x2e8>
 80059c6:	bf00      	nop
 80059c8:	636f4361 	.word	0x636f4361
 80059cc:	3fd287a7 	.word	0x3fd287a7
 80059d0:	8b60c8b3 	.word	0x8b60c8b3
 80059d4:	3fc68a28 	.word	0x3fc68a28
 80059d8:	509f79fb 	.word	0x509f79fb
 80059dc:	3fd34413 	.word	0x3fd34413
 80059e0:	7ff00000 	.word	0x7ff00000
 80059e4:	080082c9 	.word	0x080082c9
 80059e8:	080082c0 	.word	0x080082c0
 80059ec:	0800829d 	.word	0x0800829d
 80059f0:	3ff80000 	.word	0x3ff80000
 80059f4:	080082f8 	.word	0x080082f8
 80059f8:	080082d0 	.word	0x080082d0
 80059fc:	2301      	movs	r3, #1
 80059fe:	9304      	str	r3, [sp, #16]
 8005a00:	4698      	mov	r8, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	e7da      	b.n	80059bc <_dtoa_r+0x2f4>
 8005a06:	3101      	adds	r1, #1
 8005a08:	6071      	str	r1, [r6, #4]
 8005a0a:	0052      	lsls	r2, r2, #1
 8005a0c:	e787      	b.n	800591e <_dtoa_r+0x256>
 8005a0e:	07f1      	lsls	r1, r6, #31
 8005a10:	d508      	bpl.n	8005a24 <_dtoa_r+0x35c>
 8005a12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a1a:	f7fa fd5d 	bl	80004d8 <__aeabi_dmul>
 8005a1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a22:	3501      	adds	r5, #1
 8005a24:	1076      	asrs	r6, r6, #1
 8005a26:	3708      	adds	r7, #8
 8005a28:	2e00      	cmp	r6, #0
 8005a2a:	d1f0      	bne.n	8005a0e <_dtoa_r+0x346>
 8005a2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a34:	f7fa fe7a 	bl	800072c <__aeabi_ddiv>
 8005a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a3c:	e01b      	b.n	8005a76 <_dtoa_r+0x3ae>
 8005a3e:	2502      	movs	r5, #2
 8005a40:	e7a0      	b.n	8005984 <_dtoa_r+0x2bc>
 8005a42:	f000 80a4 	beq.w	8005b8e <_dtoa_r+0x4c6>
 8005a46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005a4a:	f1ca 0600 	rsb	r6, sl, #0
 8005a4e:	4ba0      	ldr	r3, [pc, #640]	; (8005cd0 <_dtoa_r+0x608>)
 8005a50:	f006 020f 	and.w	r2, r6, #15
 8005a54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f7fa fd3c 	bl	80004d8 <__aeabi_dmul>
 8005a60:	2502      	movs	r5, #2
 8005a62:	2300      	movs	r3, #0
 8005a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a68:	4f9a      	ldr	r7, [pc, #616]	; (8005cd4 <_dtoa_r+0x60c>)
 8005a6a:	1136      	asrs	r6, r6, #4
 8005a6c:	2e00      	cmp	r6, #0
 8005a6e:	f040 8083 	bne.w	8005b78 <_dtoa_r+0x4b0>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e0      	bne.n	8005a38 <_dtoa_r+0x370>
 8005a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 808a 	beq.w	8005b92 <_dtoa_r+0x4ca>
 8005a7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005a86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	4b92      	ldr	r3, [pc, #584]	; (8005cd8 <_dtoa_r+0x610>)
 8005a8e:	f7fa ff95 	bl	80009bc <__aeabi_dcmplt>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d07d      	beq.n	8005b92 <_dtoa_r+0x4ca>
 8005a96:	f1b8 0f00 	cmp.w	r8, #0
 8005a9a:	d07a      	beq.n	8005b92 <_dtoa_r+0x4ca>
 8005a9c:	9b04      	ldr	r3, [sp, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	dd36      	ble.n	8005b10 <_dtoa_r+0x448>
 8005aa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	4b8c      	ldr	r3, [pc, #560]	; (8005cdc <_dtoa_r+0x614>)
 8005aaa:	f7fa fd15 	bl	80004d8 <__aeabi_dmul>
 8005aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ab2:	9e04      	ldr	r6, [sp, #16]
 8005ab4:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005ab8:	3501      	adds	r5, #1
 8005aba:	4628      	mov	r0, r5
 8005abc:	f7fa fca2 	bl	8000404 <__aeabi_i2d>
 8005ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ac4:	f7fa fd08 	bl	80004d8 <__aeabi_dmul>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4b85      	ldr	r3, [pc, #532]	; (8005ce0 <_dtoa_r+0x618>)
 8005acc:	f7fa fb4e 	bl	800016c <__adddf3>
 8005ad0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005ad4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ad8:	950b      	str	r5, [sp, #44]	; 0x2c
 8005ada:	2e00      	cmp	r6, #0
 8005adc:	d15c      	bne.n	8005b98 <_dtoa_r+0x4d0>
 8005ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4b7f      	ldr	r3, [pc, #508]	; (8005ce4 <_dtoa_r+0x61c>)
 8005ae6:	f7fa fb3f 	bl	8000168 <__aeabi_dsub>
 8005aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aec:	462b      	mov	r3, r5
 8005aee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005af2:	f7fa ff81 	bl	80009f8 <__aeabi_dcmpgt>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	f040 8281 	bne.w	8005ffe <_dtoa_r+0x936>
 8005afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b02:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005b06:	f7fa ff59 	bl	80009bc <__aeabi_dcmplt>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	f040 8275 	bne.w	8005ffa <_dtoa_r+0x932>
 8005b10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005b14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f2c0 814b 	blt.w	8005db6 <_dtoa_r+0x6ee>
 8005b20:	f1ba 0f0e 	cmp.w	sl, #14
 8005b24:	f300 8147 	bgt.w	8005db6 <_dtoa_r+0x6ee>
 8005b28:	4b69      	ldr	r3, [pc, #420]	; (8005cd0 <_dtoa_r+0x608>)
 8005b2a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f280 80d7 	bge.w	8005cec <_dtoa_r+0x624>
 8005b3e:	f1b8 0f00 	cmp.w	r8, #0
 8005b42:	f300 80d3 	bgt.w	8005cec <_dtoa_r+0x624>
 8005b46:	f040 8257 	bne.w	8005ff8 <_dtoa_r+0x930>
 8005b4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	4b64      	ldr	r3, [pc, #400]	; (8005ce4 <_dtoa_r+0x61c>)
 8005b52:	f7fa fcc1 	bl	80004d8 <__aeabi_dmul>
 8005b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b5a:	f7fa ff43 	bl	80009e4 <__aeabi_dcmpge>
 8005b5e:	4646      	mov	r6, r8
 8005b60:	4647      	mov	r7, r8
 8005b62:	2800      	cmp	r0, #0
 8005b64:	f040 822d 	bne.w	8005fc2 <_dtoa_r+0x8fa>
 8005b68:	9b06      	ldr	r3, [sp, #24]
 8005b6a:	9a06      	ldr	r2, [sp, #24]
 8005b6c:	1c5d      	adds	r5, r3, #1
 8005b6e:	2331      	movs	r3, #49	; 0x31
 8005b70:	f10a 0a01 	add.w	sl, sl, #1
 8005b74:	7013      	strb	r3, [r2, #0]
 8005b76:	e228      	b.n	8005fca <_dtoa_r+0x902>
 8005b78:	07f2      	lsls	r2, r6, #31
 8005b7a:	d505      	bpl.n	8005b88 <_dtoa_r+0x4c0>
 8005b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b80:	f7fa fcaa 	bl	80004d8 <__aeabi_dmul>
 8005b84:	2301      	movs	r3, #1
 8005b86:	3501      	adds	r5, #1
 8005b88:	1076      	asrs	r6, r6, #1
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	e76e      	b.n	8005a6c <_dtoa_r+0x3a4>
 8005b8e:	2502      	movs	r5, #2
 8005b90:	e771      	b.n	8005a76 <_dtoa_r+0x3ae>
 8005b92:	4657      	mov	r7, sl
 8005b94:	4646      	mov	r6, r8
 8005b96:	e790      	b.n	8005aba <_dtoa_r+0x3f2>
 8005b98:	4b4d      	ldr	r3, [pc, #308]	; (8005cd0 <_dtoa_r+0x608>)
 8005b9a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b9e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d048      	beq.n	8005c3a <_dtoa_r+0x572>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	2000      	movs	r0, #0
 8005bae:	494e      	ldr	r1, [pc, #312]	; (8005ce8 <_dtoa_r+0x620>)
 8005bb0:	f7fa fdbc 	bl	800072c <__aeabi_ddiv>
 8005bb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bb8:	f7fa fad6 	bl	8000168 <__aeabi_dsub>
 8005bbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005bc0:	9d06      	ldr	r5, [sp, #24]
 8005bc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bc6:	f7fa ff37 	bl	8000a38 <__aeabi_d2iz>
 8005bca:	9011      	str	r0, [sp, #68]	; 0x44
 8005bcc:	f7fa fc1a 	bl	8000404 <__aeabi_i2d>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bd8:	f7fa fac6 	bl	8000168 <__aeabi_dsub>
 8005bdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005be2:	3330      	adds	r3, #48	; 0x30
 8005be4:	f805 3b01 	strb.w	r3, [r5], #1
 8005be8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bec:	f7fa fee6 	bl	80009bc <__aeabi_dcmplt>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	d163      	bne.n	8005cbc <_dtoa_r+0x5f4>
 8005bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	4937      	ldr	r1, [pc, #220]	; (8005cd8 <_dtoa_r+0x610>)
 8005bfc:	f7fa fab4 	bl	8000168 <__aeabi_dsub>
 8005c00:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c04:	f7fa feda 	bl	80009bc <__aeabi_dcmplt>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	f040 80b5 	bne.w	8005d78 <_dtoa_r+0x6b0>
 8005c0e:	9b06      	ldr	r3, [sp, #24]
 8005c10:	1aeb      	subs	r3, r5, r3
 8005c12:	429e      	cmp	r6, r3
 8005c14:	f77f af7c 	ble.w	8005b10 <_dtoa_r+0x448>
 8005c18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	4b2f      	ldr	r3, [pc, #188]	; (8005cdc <_dtoa_r+0x614>)
 8005c20:	f7fa fc5a 	bl	80004d8 <__aeabi_dmul>
 8005c24:	2200      	movs	r2, #0
 8005c26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2e:	4b2b      	ldr	r3, [pc, #172]	; (8005cdc <_dtoa_r+0x614>)
 8005c30:	f7fa fc52 	bl	80004d8 <__aeabi_dmul>
 8005c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c38:	e7c3      	b.n	8005bc2 <_dtoa_r+0x4fa>
 8005c3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c3e:	f7fa fc4b 	bl	80004d8 <__aeabi_dmul>
 8005c42:	9b06      	ldr	r3, [sp, #24]
 8005c44:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c48:	199d      	adds	r5, r3, r6
 8005c4a:	461e      	mov	r6, r3
 8005c4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c50:	f7fa fef2 	bl	8000a38 <__aeabi_d2iz>
 8005c54:	9011      	str	r0, [sp, #68]	; 0x44
 8005c56:	f7fa fbd5 	bl	8000404 <__aeabi_i2d>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c62:	f7fa fa81 	bl	8000168 <__aeabi_dsub>
 8005c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c6c:	3330      	adds	r3, #48	; 0x30
 8005c6e:	f806 3b01 	strb.w	r3, [r6], #1
 8005c72:	42ae      	cmp	r6, r5
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	d124      	bne.n	8005cc4 <_dtoa_r+0x5fc>
 8005c7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ce8 <_dtoa_r+0x620>)
 8005c80:	f7fa fa74 	bl	800016c <__adddf3>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c8c:	f7fa feb4 	bl	80009f8 <__aeabi_dcmpgt>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d171      	bne.n	8005d78 <_dtoa_r+0x6b0>
 8005c94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c98:	2000      	movs	r0, #0
 8005c9a:	4913      	ldr	r1, [pc, #76]	; (8005ce8 <_dtoa_r+0x620>)
 8005c9c:	f7fa fa64 	bl	8000168 <__aeabi_dsub>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca8:	f7fa fe88 	bl	80009bc <__aeabi_dcmplt>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	f43f af2f 	beq.w	8005b10 <_dtoa_r+0x448>
 8005cb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cb6:	1e6a      	subs	r2, r5, #1
 8005cb8:	2b30      	cmp	r3, #48	; 0x30
 8005cba:	d001      	beq.n	8005cc0 <_dtoa_r+0x5f8>
 8005cbc:	46ba      	mov	sl, r7
 8005cbe:	e04a      	b.n	8005d56 <_dtoa_r+0x68e>
 8005cc0:	4615      	mov	r5, r2
 8005cc2:	e7f6      	b.n	8005cb2 <_dtoa_r+0x5ea>
 8005cc4:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <_dtoa_r+0x614>)
 8005cc6:	f7fa fc07 	bl	80004d8 <__aeabi_dmul>
 8005cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cce:	e7bd      	b.n	8005c4c <_dtoa_r+0x584>
 8005cd0:	080082f8 	.word	0x080082f8
 8005cd4:	080082d0 	.word	0x080082d0
 8005cd8:	3ff00000 	.word	0x3ff00000
 8005cdc:	40240000 	.word	0x40240000
 8005ce0:	401c0000 	.word	0x401c0000
 8005ce4:	40140000 	.word	0x40140000
 8005ce8:	3fe00000 	.word	0x3fe00000
 8005cec:	9d06      	ldr	r5, [sp, #24]
 8005cee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	f7fa fd17 	bl	800072c <__aeabi_ddiv>
 8005cfe:	f7fa fe9b 	bl	8000a38 <__aeabi_d2iz>
 8005d02:	4681      	mov	r9, r0
 8005d04:	f7fa fb7e 	bl	8000404 <__aeabi_i2d>
 8005d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d0c:	f7fa fbe4 	bl	80004d8 <__aeabi_dmul>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4630      	mov	r0, r6
 8005d16:	4639      	mov	r1, r7
 8005d18:	f7fa fa26 	bl	8000168 <__aeabi_dsub>
 8005d1c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005d20:	f805 6b01 	strb.w	r6, [r5], #1
 8005d24:	9e06      	ldr	r6, [sp, #24]
 8005d26:	4602      	mov	r2, r0
 8005d28:	1bae      	subs	r6, r5, r6
 8005d2a:	45b0      	cmp	r8, r6
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	d135      	bne.n	8005d9c <_dtoa_r+0x6d4>
 8005d30:	f7fa fa1c 	bl	800016c <__adddf3>
 8005d34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d38:	4606      	mov	r6, r0
 8005d3a:	460f      	mov	r7, r1
 8005d3c:	f7fa fe5c 	bl	80009f8 <__aeabi_dcmpgt>
 8005d40:	b9c8      	cbnz	r0, 8005d76 <_dtoa_r+0x6ae>
 8005d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d46:	4630      	mov	r0, r6
 8005d48:	4639      	mov	r1, r7
 8005d4a:	f7fa fe2d 	bl	80009a8 <__aeabi_dcmpeq>
 8005d4e:	b110      	cbz	r0, 8005d56 <_dtoa_r+0x68e>
 8005d50:	f019 0f01 	tst.w	r9, #1
 8005d54:	d10f      	bne.n	8005d76 <_dtoa_r+0x6ae>
 8005d56:	4659      	mov	r1, fp
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 facc 	bl	80062f6 <_Bfree>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d62:	702b      	strb	r3, [r5, #0]
 8005d64:	f10a 0301 	add.w	r3, sl, #1
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f43f acf3 	beq.w	8005758 <_dtoa_r+0x90>
 8005d72:	601d      	str	r5, [r3, #0]
 8005d74:	e4f0      	b.n	8005758 <_dtoa_r+0x90>
 8005d76:	4657      	mov	r7, sl
 8005d78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d7c:	1e6b      	subs	r3, r5, #1
 8005d7e:	2a39      	cmp	r2, #57	; 0x39
 8005d80:	d106      	bne.n	8005d90 <_dtoa_r+0x6c8>
 8005d82:	9a06      	ldr	r2, [sp, #24]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d107      	bne.n	8005d98 <_dtoa_r+0x6d0>
 8005d88:	2330      	movs	r3, #48	; 0x30
 8005d8a:	7013      	strb	r3, [r2, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	3701      	adds	r7, #1
 8005d90:	781a      	ldrb	r2, [r3, #0]
 8005d92:	3201      	adds	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	e791      	b.n	8005cbc <_dtoa_r+0x5f4>
 8005d98:	461d      	mov	r5, r3
 8005d9a:	e7ed      	b.n	8005d78 <_dtoa_r+0x6b0>
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4b99      	ldr	r3, [pc, #612]	; (8006004 <_dtoa_r+0x93c>)
 8005da0:	f7fa fb9a 	bl	80004d8 <__aeabi_dmul>
 8005da4:	2200      	movs	r2, #0
 8005da6:	2300      	movs	r3, #0
 8005da8:	4606      	mov	r6, r0
 8005daa:	460f      	mov	r7, r1
 8005dac:	f7fa fdfc 	bl	80009a8 <__aeabi_dcmpeq>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d09e      	beq.n	8005cf2 <_dtoa_r+0x62a>
 8005db4:	e7cf      	b.n	8005d56 <_dtoa_r+0x68e>
 8005db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005db8:	2a00      	cmp	r2, #0
 8005dba:	f000 8088 	beq.w	8005ece <_dtoa_r+0x806>
 8005dbe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005dc0:	2a01      	cmp	r2, #1
 8005dc2:	dc6d      	bgt.n	8005ea0 <_dtoa_r+0x7d8>
 8005dc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005dc6:	2a00      	cmp	r2, #0
 8005dc8:	d066      	beq.n	8005e98 <_dtoa_r+0x7d0>
 8005dca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dce:	464d      	mov	r5, r9
 8005dd0:	9e08      	ldr	r6, [sp, #32]
 8005dd2:	9a07      	ldr	r2, [sp, #28]
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	441a      	add	r2, r3
 8005dd8:	4620      	mov	r0, r4
 8005dda:	4499      	add	r9, r3
 8005ddc:	9207      	str	r2, [sp, #28]
 8005dde:	f000 fb2a 	bl	8006436 <__i2b>
 8005de2:	4607      	mov	r7, r0
 8005de4:	2d00      	cmp	r5, #0
 8005de6:	dd0b      	ble.n	8005e00 <_dtoa_r+0x738>
 8005de8:	9b07      	ldr	r3, [sp, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dd08      	ble.n	8005e00 <_dtoa_r+0x738>
 8005dee:	42ab      	cmp	r3, r5
 8005df0:	bfa8      	it	ge
 8005df2:	462b      	movge	r3, r5
 8005df4:	9a07      	ldr	r2, [sp, #28]
 8005df6:	eba9 0903 	sub.w	r9, r9, r3
 8005dfa:	1aed      	subs	r5, r5, r3
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	9307      	str	r3, [sp, #28]
 8005e00:	9b08      	ldr	r3, [sp, #32]
 8005e02:	b1eb      	cbz	r3, 8005e40 <_dtoa_r+0x778>
 8005e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d065      	beq.n	8005ed6 <_dtoa_r+0x80e>
 8005e0a:	b18e      	cbz	r6, 8005e30 <_dtoa_r+0x768>
 8005e0c:	4639      	mov	r1, r7
 8005e0e:	4632      	mov	r2, r6
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fbaf 	bl	8006574 <__pow5mult>
 8005e16:	465a      	mov	r2, fp
 8005e18:	4601      	mov	r1, r0
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f000 fb13 	bl	8006448 <__multiply>
 8005e22:	4659      	mov	r1, fp
 8005e24:	900a      	str	r0, [sp, #40]	; 0x28
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 fa65 	bl	80062f6 <_Bfree>
 8005e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2e:	469b      	mov	fp, r3
 8005e30:	9b08      	ldr	r3, [sp, #32]
 8005e32:	1b9a      	subs	r2, r3, r6
 8005e34:	d004      	beq.n	8005e40 <_dtoa_r+0x778>
 8005e36:	4659      	mov	r1, fp
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 fb9b 	bl	8006574 <__pow5mult>
 8005e3e:	4683      	mov	fp, r0
 8005e40:	2101      	movs	r1, #1
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 faf7 	bl	8006436 <__i2b>
 8005e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 81c6 	beq.w	80061de <_dtoa_r+0xb16>
 8005e52:	461a      	mov	r2, r3
 8005e54:	4601      	mov	r1, r0
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 fb8c 	bl	8006574 <__pow5mult>
 8005e5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e5e:	4606      	mov	r6, r0
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	dc3e      	bgt.n	8005ee2 <_dtoa_r+0x81a>
 8005e64:	9b02      	ldr	r3, [sp, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d137      	bne.n	8005eda <_dtoa_r+0x812>
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d134      	bne.n	8005ede <_dtoa_r+0x816>
 8005e74:	9b03      	ldr	r3, [sp, #12]
 8005e76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e7a:	0d1b      	lsrs	r3, r3, #20
 8005e7c:	051b      	lsls	r3, r3, #20
 8005e7e:	b12b      	cbz	r3, 8005e8c <_dtoa_r+0x7c4>
 8005e80:	9b07      	ldr	r3, [sp, #28]
 8005e82:	f109 0901 	add.w	r9, r9, #1
 8005e86:	3301      	adds	r3, #1
 8005e88:	9307      	str	r3, [sp, #28]
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	9308      	str	r3, [sp, #32]
 8005e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d128      	bne.n	8005ee6 <_dtoa_r+0x81e>
 8005e94:	2001      	movs	r0, #1
 8005e96:	e02e      	b.n	8005ef6 <_dtoa_r+0x82e>
 8005e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e9e:	e796      	b.n	8005dce <_dtoa_r+0x706>
 8005ea0:	9b08      	ldr	r3, [sp, #32]
 8005ea2:	f108 36ff 	add.w	r6, r8, #4294967295
 8005ea6:	42b3      	cmp	r3, r6
 8005ea8:	bfb7      	itett	lt
 8005eaa:	9b08      	ldrlt	r3, [sp, #32]
 8005eac:	1b9e      	subge	r6, r3, r6
 8005eae:	1af2      	sublt	r2, r6, r3
 8005eb0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005eb2:	bfbf      	itttt	lt
 8005eb4:	9608      	strlt	r6, [sp, #32]
 8005eb6:	189b      	addlt	r3, r3, r2
 8005eb8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005eba:	2600      	movlt	r6, #0
 8005ebc:	f1b8 0f00 	cmp.w	r8, #0
 8005ec0:	bfb9      	ittee	lt
 8005ec2:	eba9 0508 	sublt.w	r5, r9, r8
 8005ec6:	2300      	movlt	r3, #0
 8005ec8:	464d      	movge	r5, r9
 8005eca:	4643      	movge	r3, r8
 8005ecc:	e781      	b.n	8005dd2 <_dtoa_r+0x70a>
 8005ece:	9e08      	ldr	r6, [sp, #32]
 8005ed0:	464d      	mov	r5, r9
 8005ed2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005ed4:	e786      	b.n	8005de4 <_dtoa_r+0x71c>
 8005ed6:	9a08      	ldr	r2, [sp, #32]
 8005ed8:	e7ad      	b.n	8005e36 <_dtoa_r+0x76e>
 8005eda:	2300      	movs	r3, #0
 8005edc:	e7d6      	b.n	8005e8c <_dtoa_r+0x7c4>
 8005ede:	9b02      	ldr	r3, [sp, #8]
 8005ee0:	e7d4      	b.n	8005e8c <_dtoa_r+0x7c4>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9308      	str	r3, [sp, #32]
 8005ee6:	6933      	ldr	r3, [r6, #16]
 8005ee8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005eec:	6918      	ldr	r0, [r3, #16]
 8005eee:	f000 fa54 	bl	800639a <__hi0bits>
 8005ef2:	f1c0 0020 	rsb	r0, r0, #32
 8005ef6:	9b07      	ldr	r3, [sp, #28]
 8005ef8:	4418      	add	r0, r3
 8005efa:	f010 001f 	ands.w	r0, r0, #31
 8005efe:	d047      	beq.n	8005f90 <_dtoa_r+0x8c8>
 8005f00:	f1c0 0320 	rsb	r3, r0, #32
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	dd3b      	ble.n	8005f80 <_dtoa_r+0x8b8>
 8005f08:	9b07      	ldr	r3, [sp, #28]
 8005f0a:	f1c0 001c 	rsb	r0, r0, #28
 8005f0e:	4481      	add	r9, r0
 8005f10:	4405      	add	r5, r0
 8005f12:	4403      	add	r3, r0
 8005f14:	9307      	str	r3, [sp, #28]
 8005f16:	f1b9 0f00 	cmp.w	r9, #0
 8005f1a:	dd05      	ble.n	8005f28 <_dtoa_r+0x860>
 8005f1c:	4659      	mov	r1, fp
 8005f1e:	464a      	mov	r2, r9
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 fb75 	bl	8006610 <__lshift>
 8005f26:	4683      	mov	fp, r0
 8005f28:	9b07      	ldr	r3, [sp, #28]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	dd05      	ble.n	8005f3a <_dtoa_r+0x872>
 8005f2e:	4631      	mov	r1, r6
 8005f30:	461a      	mov	r2, r3
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 fb6c 	bl	8006610 <__lshift>
 8005f38:	4606      	mov	r6, r0
 8005f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f3c:	b353      	cbz	r3, 8005f94 <_dtoa_r+0x8cc>
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4658      	mov	r0, fp
 8005f42:	f000 fbb9 	bl	80066b8 <__mcmp>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	da24      	bge.n	8005f94 <_dtoa_r+0x8cc>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	220a      	movs	r2, #10
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 f9e7 	bl	8006324 <__multadd>
 8005f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f5c:	4683      	mov	fp, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 8144 	beq.w	80061ec <_dtoa_r+0xb24>
 8005f64:	2300      	movs	r3, #0
 8005f66:	4639      	mov	r1, r7
 8005f68:	220a      	movs	r2, #10
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f000 f9da 	bl	8006324 <__multadd>
 8005f70:	9b04      	ldr	r3, [sp, #16]
 8005f72:	4607      	mov	r7, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	dc4d      	bgt.n	8006014 <_dtoa_r+0x94c>
 8005f78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	dd4a      	ble.n	8006014 <_dtoa_r+0x94c>
 8005f7e:	e011      	b.n	8005fa4 <_dtoa_r+0x8dc>
 8005f80:	d0c9      	beq.n	8005f16 <_dtoa_r+0x84e>
 8005f82:	9a07      	ldr	r2, [sp, #28]
 8005f84:	331c      	adds	r3, #28
 8005f86:	441a      	add	r2, r3
 8005f88:	4499      	add	r9, r3
 8005f8a:	441d      	add	r5, r3
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	e7c1      	b.n	8005f14 <_dtoa_r+0x84c>
 8005f90:	4603      	mov	r3, r0
 8005f92:	e7f6      	b.n	8005f82 <_dtoa_r+0x8ba>
 8005f94:	f1b8 0f00 	cmp.w	r8, #0
 8005f98:	dc36      	bgt.n	8006008 <_dtoa_r+0x940>
 8005f9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	dd33      	ble.n	8006008 <_dtoa_r+0x940>
 8005fa0:	f8cd 8010 	str.w	r8, [sp, #16]
 8005fa4:	9b04      	ldr	r3, [sp, #16]
 8005fa6:	b963      	cbnz	r3, 8005fc2 <_dtoa_r+0x8fa>
 8005fa8:	4631      	mov	r1, r6
 8005faa:	2205      	movs	r2, #5
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 f9b9 	bl	8006324 <__multadd>
 8005fb2:	4601      	mov	r1, r0
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	4658      	mov	r0, fp
 8005fb8:	f000 fb7e 	bl	80066b8 <__mcmp>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	f73f add3 	bgt.w	8005b68 <_dtoa_r+0x4a0>
 8005fc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005fc4:	9d06      	ldr	r5, [sp, #24]
 8005fc6:	ea6f 0a03 	mvn.w	sl, r3
 8005fca:	f04f 0900 	mov.w	r9, #0
 8005fce:	4631      	mov	r1, r6
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 f990 	bl	80062f6 <_Bfree>
 8005fd6:	2f00      	cmp	r7, #0
 8005fd8:	f43f aebd 	beq.w	8005d56 <_dtoa_r+0x68e>
 8005fdc:	f1b9 0f00 	cmp.w	r9, #0
 8005fe0:	d005      	beq.n	8005fee <_dtoa_r+0x926>
 8005fe2:	45b9      	cmp	r9, r7
 8005fe4:	d003      	beq.n	8005fee <_dtoa_r+0x926>
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 f984 	bl	80062f6 <_Bfree>
 8005fee:	4639      	mov	r1, r7
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f000 f980 	bl	80062f6 <_Bfree>
 8005ff6:	e6ae      	b.n	8005d56 <_dtoa_r+0x68e>
 8005ff8:	2600      	movs	r6, #0
 8005ffa:	4637      	mov	r7, r6
 8005ffc:	e7e1      	b.n	8005fc2 <_dtoa_r+0x8fa>
 8005ffe:	46ba      	mov	sl, r7
 8006000:	4637      	mov	r7, r6
 8006002:	e5b1      	b.n	8005b68 <_dtoa_r+0x4a0>
 8006004:	40240000 	.word	0x40240000
 8006008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600a:	f8cd 8010 	str.w	r8, [sp, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80f3 	beq.w	80061fa <_dtoa_r+0xb32>
 8006014:	2d00      	cmp	r5, #0
 8006016:	dd05      	ble.n	8006024 <_dtoa_r+0x95c>
 8006018:	4639      	mov	r1, r7
 800601a:	462a      	mov	r2, r5
 800601c:	4620      	mov	r0, r4
 800601e:	f000 faf7 	bl	8006610 <__lshift>
 8006022:	4607      	mov	r7, r0
 8006024:	9b08      	ldr	r3, [sp, #32]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d04c      	beq.n	80060c4 <_dtoa_r+0x9fc>
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4620      	mov	r0, r4
 800602e:	f000 f92e 	bl	800628e <_Balloc>
 8006032:	4605      	mov	r5, r0
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	f107 010c 	add.w	r1, r7, #12
 800603a:	3202      	adds	r2, #2
 800603c:	0092      	lsls	r2, r2, #2
 800603e:	300c      	adds	r0, #12
 8006040:	f000 f91a 	bl	8006278 <memcpy>
 8006044:	2201      	movs	r2, #1
 8006046:	4629      	mov	r1, r5
 8006048:	4620      	mov	r0, r4
 800604a:	f000 fae1 	bl	8006610 <__lshift>
 800604e:	46b9      	mov	r9, r7
 8006050:	4607      	mov	r7, r0
 8006052:	9b06      	ldr	r3, [sp, #24]
 8006054:	9307      	str	r3, [sp, #28]
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	9308      	str	r3, [sp, #32]
 800605e:	4631      	mov	r1, r6
 8006060:	4658      	mov	r0, fp
 8006062:	f7ff faa3 	bl	80055ac <quorem>
 8006066:	4649      	mov	r1, r9
 8006068:	4605      	mov	r5, r0
 800606a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800606e:	4658      	mov	r0, fp
 8006070:	f000 fb22 	bl	80066b8 <__mcmp>
 8006074:	463a      	mov	r2, r7
 8006076:	9002      	str	r0, [sp, #8]
 8006078:	4631      	mov	r1, r6
 800607a:	4620      	mov	r0, r4
 800607c:	f000 fb36 	bl	80066ec <__mdiff>
 8006080:	68c3      	ldr	r3, [r0, #12]
 8006082:	4602      	mov	r2, r0
 8006084:	bb03      	cbnz	r3, 80060c8 <_dtoa_r+0xa00>
 8006086:	4601      	mov	r1, r0
 8006088:	9009      	str	r0, [sp, #36]	; 0x24
 800608a:	4658      	mov	r0, fp
 800608c:	f000 fb14 	bl	80066b8 <__mcmp>
 8006090:	4603      	mov	r3, r0
 8006092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006094:	4611      	mov	r1, r2
 8006096:	4620      	mov	r0, r4
 8006098:	9309      	str	r3, [sp, #36]	; 0x24
 800609a:	f000 f92c 	bl	80062f6 <_Bfree>
 800609e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a0:	b9a3      	cbnz	r3, 80060cc <_dtoa_r+0xa04>
 80060a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80060a4:	b992      	cbnz	r2, 80060cc <_dtoa_r+0xa04>
 80060a6:	9a08      	ldr	r2, [sp, #32]
 80060a8:	b982      	cbnz	r2, 80060cc <_dtoa_r+0xa04>
 80060aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80060ae:	d029      	beq.n	8006104 <_dtoa_r+0xa3c>
 80060b0:	9b02      	ldr	r3, [sp, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	dd01      	ble.n	80060ba <_dtoa_r+0x9f2>
 80060b6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80060ba:	9b07      	ldr	r3, [sp, #28]
 80060bc:	1c5d      	adds	r5, r3, #1
 80060be:	f883 8000 	strb.w	r8, [r3]
 80060c2:	e784      	b.n	8005fce <_dtoa_r+0x906>
 80060c4:	4638      	mov	r0, r7
 80060c6:	e7c2      	b.n	800604e <_dtoa_r+0x986>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e7e3      	b.n	8006094 <_dtoa_r+0x9cc>
 80060cc:	9a02      	ldr	r2, [sp, #8]
 80060ce:	2a00      	cmp	r2, #0
 80060d0:	db04      	blt.n	80060dc <_dtoa_r+0xa14>
 80060d2:	d123      	bne.n	800611c <_dtoa_r+0xa54>
 80060d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80060d6:	bb0a      	cbnz	r2, 800611c <_dtoa_r+0xa54>
 80060d8:	9a08      	ldr	r2, [sp, #32]
 80060da:	b9fa      	cbnz	r2, 800611c <_dtoa_r+0xa54>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	ddec      	ble.n	80060ba <_dtoa_r+0x9f2>
 80060e0:	4659      	mov	r1, fp
 80060e2:	2201      	movs	r2, #1
 80060e4:	4620      	mov	r0, r4
 80060e6:	f000 fa93 	bl	8006610 <__lshift>
 80060ea:	4631      	mov	r1, r6
 80060ec:	4683      	mov	fp, r0
 80060ee:	f000 fae3 	bl	80066b8 <__mcmp>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	dc03      	bgt.n	80060fe <_dtoa_r+0xa36>
 80060f6:	d1e0      	bne.n	80060ba <_dtoa_r+0x9f2>
 80060f8:	f018 0f01 	tst.w	r8, #1
 80060fc:	d0dd      	beq.n	80060ba <_dtoa_r+0x9f2>
 80060fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006102:	d1d8      	bne.n	80060b6 <_dtoa_r+0x9ee>
 8006104:	9b07      	ldr	r3, [sp, #28]
 8006106:	9a07      	ldr	r2, [sp, #28]
 8006108:	1c5d      	adds	r5, r3, #1
 800610a:	2339      	movs	r3, #57	; 0x39
 800610c:	7013      	strb	r3, [r2, #0]
 800610e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006112:	1e6a      	subs	r2, r5, #1
 8006114:	2b39      	cmp	r3, #57	; 0x39
 8006116:	d04d      	beq.n	80061b4 <_dtoa_r+0xaec>
 8006118:	3301      	adds	r3, #1
 800611a:	e052      	b.n	80061c2 <_dtoa_r+0xafa>
 800611c:	9a07      	ldr	r2, [sp, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f102 0501 	add.w	r5, r2, #1
 8006124:	dd06      	ble.n	8006134 <_dtoa_r+0xa6c>
 8006126:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800612a:	d0eb      	beq.n	8006104 <_dtoa_r+0xa3c>
 800612c:	f108 0801 	add.w	r8, r8, #1
 8006130:	9b07      	ldr	r3, [sp, #28]
 8006132:	e7c4      	b.n	80060be <_dtoa_r+0x9f6>
 8006134:	9b06      	ldr	r3, [sp, #24]
 8006136:	9a04      	ldr	r2, [sp, #16]
 8006138:	1aeb      	subs	r3, r5, r3
 800613a:	4293      	cmp	r3, r2
 800613c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006140:	d021      	beq.n	8006186 <_dtoa_r+0xabe>
 8006142:	4659      	mov	r1, fp
 8006144:	2300      	movs	r3, #0
 8006146:	220a      	movs	r2, #10
 8006148:	4620      	mov	r0, r4
 800614a:	f000 f8eb 	bl	8006324 <__multadd>
 800614e:	45b9      	cmp	r9, r7
 8006150:	4683      	mov	fp, r0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	f04f 020a 	mov.w	r2, #10
 800615a:	4649      	mov	r1, r9
 800615c:	4620      	mov	r0, r4
 800615e:	d105      	bne.n	800616c <_dtoa_r+0xaa4>
 8006160:	f000 f8e0 	bl	8006324 <__multadd>
 8006164:	4681      	mov	r9, r0
 8006166:	4607      	mov	r7, r0
 8006168:	9507      	str	r5, [sp, #28]
 800616a:	e778      	b.n	800605e <_dtoa_r+0x996>
 800616c:	f000 f8da 	bl	8006324 <__multadd>
 8006170:	4639      	mov	r1, r7
 8006172:	4681      	mov	r9, r0
 8006174:	2300      	movs	r3, #0
 8006176:	220a      	movs	r2, #10
 8006178:	4620      	mov	r0, r4
 800617a:	f000 f8d3 	bl	8006324 <__multadd>
 800617e:	4607      	mov	r7, r0
 8006180:	e7f2      	b.n	8006168 <_dtoa_r+0xaa0>
 8006182:	f04f 0900 	mov.w	r9, #0
 8006186:	4659      	mov	r1, fp
 8006188:	2201      	movs	r2, #1
 800618a:	4620      	mov	r0, r4
 800618c:	f000 fa40 	bl	8006610 <__lshift>
 8006190:	4631      	mov	r1, r6
 8006192:	4683      	mov	fp, r0
 8006194:	f000 fa90 	bl	80066b8 <__mcmp>
 8006198:	2800      	cmp	r0, #0
 800619a:	dcb8      	bgt.n	800610e <_dtoa_r+0xa46>
 800619c:	d102      	bne.n	80061a4 <_dtoa_r+0xadc>
 800619e:	f018 0f01 	tst.w	r8, #1
 80061a2:	d1b4      	bne.n	800610e <_dtoa_r+0xa46>
 80061a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061a8:	1e6a      	subs	r2, r5, #1
 80061aa:	2b30      	cmp	r3, #48	; 0x30
 80061ac:	f47f af0f 	bne.w	8005fce <_dtoa_r+0x906>
 80061b0:	4615      	mov	r5, r2
 80061b2:	e7f7      	b.n	80061a4 <_dtoa_r+0xadc>
 80061b4:	9b06      	ldr	r3, [sp, #24]
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d105      	bne.n	80061c6 <_dtoa_r+0xafe>
 80061ba:	2331      	movs	r3, #49	; 0x31
 80061bc:	9a06      	ldr	r2, [sp, #24]
 80061be:	f10a 0a01 	add.w	sl, sl, #1
 80061c2:	7013      	strb	r3, [r2, #0]
 80061c4:	e703      	b.n	8005fce <_dtoa_r+0x906>
 80061c6:	4615      	mov	r5, r2
 80061c8:	e7a1      	b.n	800610e <_dtoa_r+0xa46>
 80061ca:	4b17      	ldr	r3, [pc, #92]	; (8006228 <_dtoa_r+0xb60>)
 80061cc:	f7ff bae1 	b.w	8005792 <_dtoa_r+0xca>
 80061d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f47f aabb 	bne.w	800574e <_dtoa_r+0x86>
 80061d8:	4b14      	ldr	r3, [pc, #80]	; (800622c <_dtoa_r+0xb64>)
 80061da:	f7ff bada 	b.w	8005792 <_dtoa_r+0xca>
 80061de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f77f ae3f 	ble.w	8005e64 <_dtoa_r+0x79c>
 80061e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061e8:	9308      	str	r3, [sp, #32]
 80061ea:	e653      	b.n	8005e94 <_dtoa_r+0x7cc>
 80061ec:	9b04      	ldr	r3, [sp, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	dc03      	bgt.n	80061fa <_dtoa_r+0xb32>
 80061f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	f73f aed5 	bgt.w	8005fa4 <_dtoa_r+0x8dc>
 80061fa:	9d06      	ldr	r5, [sp, #24]
 80061fc:	4631      	mov	r1, r6
 80061fe:	4658      	mov	r0, fp
 8006200:	f7ff f9d4 	bl	80055ac <quorem>
 8006204:	9b06      	ldr	r3, [sp, #24]
 8006206:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800620a:	f805 8b01 	strb.w	r8, [r5], #1
 800620e:	9a04      	ldr	r2, [sp, #16]
 8006210:	1aeb      	subs	r3, r5, r3
 8006212:	429a      	cmp	r2, r3
 8006214:	ddb5      	ble.n	8006182 <_dtoa_r+0xaba>
 8006216:	4659      	mov	r1, fp
 8006218:	2300      	movs	r3, #0
 800621a:	220a      	movs	r2, #10
 800621c:	4620      	mov	r0, r4
 800621e:	f000 f881 	bl	8006324 <__multadd>
 8006222:	4683      	mov	fp, r0
 8006224:	e7ea      	b.n	80061fc <_dtoa_r+0xb34>
 8006226:	bf00      	nop
 8006228:	0800829c 	.word	0x0800829c
 800622c:	080082c0 	.word	0x080082c0

08006230 <_localeconv_r>:
 8006230:	4b04      	ldr	r3, [pc, #16]	; (8006244 <_localeconv_r+0x14>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a18      	ldr	r0, [r3, #32]
 8006236:	4b04      	ldr	r3, [pc, #16]	; (8006248 <_localeconv_r+0x18>)
 8006238:	2800      	cmp	r0, #0
 800623a:	bf08      	it	eq
 800623c:	4618      	moveq	r0, r3
 800623e:	30f0      	adds	r0, #240	; 0xf0
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20000028 	.word	0x20000028
 8006248:	2000008c 	.word	0x2000008c

0800624c <malloc>:
 800624c:	4b02      	ldr	r3, [pc, #8]	; (8006258 <malloc+0xc>)
 800624e:	4601      	mov	r1, r0
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f000 bb53 	b.w	80068fc <_malloc_r>
 8006256:	bf00      	nop
 8006258:	20000028 	.word	0x20000028

0800625c <memchr>:
 800625c:	b510      	push	{r4, lr}
 800625e:	b2c9      	uxtb	r1, r1
 8006260:	4402      	add	r2, r0
 8006262:	4290      	cmp	r0, r2
 8006264:	4603      	mov	r3, r0
 8006266:	d101      	bne.n	800626c <memchr+0x10>
 8006268:	2300      	movs	r3, #0
 800626a:	e003      	b.n	8006274 <memchr+0x18>
 800626c:	781c      	ldrb	r4, [r3, #0]
 800626e:	3001      	adds	r0, #1
 8006270:	428c      	cmp	r4, r1
 8006272:	d1f6      	bne.n	8006262 <memchr+0x6>
 8006274:	4618      	mov	r0, r3
 8006276:	bd10      	pop	{r4, pc}

08006278 <memcpy>:
 8006278:	b510      	push	{r4, lr}
 800627a:	1e43      	subs	r3, r0, #1
 800627c:	440a      	add	r2, r1
 800627e:	4291      	cmp	r1, r2
 8006280:	d100      	bne.n	8006284 <memcpy+0xc>
 8006282:	bd10      	pop	{r4, pc}
 8006284:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800628c:	e7f7      	b.n	800627e <memcpy+0x6>

0800628e <_Balloc>:
 800628e:	b570      	push	{r4, r5, r6, lr}
 8006290:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006292:	4604      	mov	r4, r0
 8006294:	460e      	mov	r6, r1
 8006296:	b93d      	cbnz	r5, 80062a8 <_Balloc+0x1a>
 8006298:	2010      	movs	r0, #16
 800629a:	f7ff ffd7 	bl	800624c <malloc>
 800629e:	6260      	str	r0, [r4, #36]	; 0x24
 80062a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062a4:	6005      	str	r5, [r0, #0]
 80062a6:	60c5      	str	r5, [r0, #12]
 80062a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80062aa:	68eb      	ldr	r3, [r5, #12]
 80062ac:	b183      	cbz	r3, 80062d0 <_Balloc+0x42>
 80062ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80062b6:	b9b8      	cbnz	r0, 80062e8 <_Balloc+0x5a>
 80062b8:	2101      	movs	r1, #1
 80062ba:	fa01 f506 	lsl.w	r5, r1, r6
 80062be:	1d6a      	adds	r2, r5, #5
 80062c0:	0092      	lsls	r2, r2, #2
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 fabf 	bl	8006846 <_calloc_r>
 80062c8:	b160      	cbz	r0, 80062e4 <_Balloc+0x56>
 80062ca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80062ce:	e00e      	b.n	80062ee <_Balloc+0x60>
 80062d0:	2221      	movs	r2, #33	; 0x21
 80062d2:	2104      	movs	r1, #4
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 fab6 	bl	8006846 <_calloc_r>
 80062da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062dc:	60e8      	str	r0, [r5, #12]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e4      	bne.n	80062ae <_Balloc+0x20>
 80062e4:	2000      	movs	r0, #0
 80062e6:	bd70      	pop	{r4, r5, r6, pc}
 80062e8:	6802      	ldr	r2, [r0, #0]
 80062ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80062ee:	2300      	movs	r3, #0
 80062f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062f4:	e7f7      	b.n	80062e6 <_Balloc+0x58>

080062f6 <_Bfree>:
 80062f6:	b570      	push	{r4, r5, r6, lr}
 80062f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80062fa:	4606      	mov	r6, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	b93c      	cbnz	r4, 8006310 <_Bfree+0x1a>
 8006300:	2010      	movs	r0, #16
 8006302:	f7ff ffa3 	bl	800624c <malloc>
 8006306:	6270      	str	r0, [r6, #36]	; 0x24
 8006308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800630c:	6004      	str	r4, [r0, #0]
 800630e:	60c4      	str	r4, [r0, #12]
 8006310:	b13d      	cbz	r5, 8006322 <_Bfree+0x2c>
 8006312:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006314:	686a      	ldr	r2, [r5, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800631c:	6029      	str	r1, [r5, #0]
 800631e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006322:	bd70      	pop	{r4, r5, r6, pc}

08006324 <__multadd>:
 8006324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006328:	461f      	mov	r7, r3
 800632a:	4606      	mov	r6, r0
 800632c:	460c      	mov	r4, r1
 800632e:	2300      	movs	r3, #0
 8006330:	690d      	ldr	r5, [r1, #16]
 8006332:	f101 0c14 	add.w	ip, r1, #20
 8006336:	f8dc 0000 	ldr.w	r0, [ip]
 800633a:	3301      	adds	r3, #1
 800633c:	b281      	uxth	r1, r0
 800633e:	fb02 7101 	mla	r1, r2, r1, r7
 8006342:	0c00      	lsrs	r0, r0, #16
 8006344:	0c0f      	lsrs	r7, r1, #16
 8006346:	fb02 7000 	mla	r0, r2, r0, r7
 800634a:	b289      	uxth	r1, r1
 800634c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006350:	429d      	cmp	r5, r3
 8006352:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006356:	f84c 1b04 	str.w	r1, [ip], #4
 800635a:	dcec      	bgt.n	8006336 <__multadd+0x12>
 800635c:	b1d7      	cbz	r7, 8006394 <__multadd+0x70>
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	42ab      	cmp	r3, r5
 8006362:	dc12      	bgt.n	800638a <__multadd+0x66>
 8006364:	6861      	ldr	r1, [r4, #4]
 8006366:	4630      	mov	r0, r6
 8006368:	3101      	adds	r1, #1
 800636a:	f7ff ff90 	bl	800628e <_Balloc>
 800636e:	4680      	mov	r8, r0
 8006370:	6922      	ldr	r2, [r4, #16]
 8006372:	f104 010c 	add.w	r1, r4, #12
 8006376:	3202      	adds	r2, #2
 8006378:	0092      	lsls	r2, r2, #2
 800637a:	300c      	adds	r0, #12
 800637c:	f7ff ff7c 	bl	8006278 <memcpy>
 8006380:	4621      	mov	r1, r4
 8006382:	4630      	mov	r0, r6
 8006384:	f7ff ffb7 	bl	80062f6 <_Bfree>
 8006388:	4644      	mov	r4, r8
 800638a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800638e:	3501      	adds	r5, #1
 8006390:	615f      	str	r7, [r3, #20]
 8006392:	6125      	str	r5, [r4, #16]
 8006394:	4620      	mov	r0, r4
 8006396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800639a <__hi0bits>:
 800639a:	0c02      	lsrs	r2, r0, #16
 800639c:	0412      	lsls	r2, r2, #16
 800639e:	4603      	mov	r3, r0
 80063a0:	b9b2      	cbnz	r2, 80063d0 <__hi0bits+0x36>
 80063a2:	0403      	lsls	r3, r0, #16
 80063a4:	2010      	movs	r0, #16
 80063a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80063aa:	bf04      	itt	eq
 80063ac:	021b      	lsleq	r3, r3, #8
 80063ae:	3008      	addeq	r0, #8
 80063b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80063b4:	bf04      	itt	eq
 80063b6:	011b      	lsleq	r3, r3, #4
 80063b8:	3004      	addeq	r0, #4
 80063ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80063be:	bf04      	itt	eq
 80063c0:	009b      	lsleq	r3, r3, #2
 80063c2:	3002      	addeq	r0, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	db06      	blt.n	80063d6 <__hi0bits+0x3c>
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	d503      	bpl.n	80063d4 <__hi0bits+0x3a>
 80063cc:	3001      	adds	r0, #1
 80063ce:	4770      	bx	lr
 80063d0:	2000      	movs	r0, #0
 80063d2:	e7e8      	b.n	80063a6 <__hi0bits+0xc>
 80063d4:	2020      	movs	r0, #32
 80063d6:	4770      	bx	lr

080063d8 <__lo0bits>:
 80063d8:	6803      	ldr	r3, [r0, #0]
 80063da:	4601      	mov	r1, r0
 80063dc:	f013 0207 	ands.w	r2, r3, #7
 80063e0:	d00b      	beq.n	80063fa <__lo0bits+0x22>
 80063e2:	07da      	lsls	r2, r3, #31
 80063e4:	d423      	bmi.n	800642e <__lo0bits+0x56>
 80063e6:	0798      	lsls	r0, r3, #30
 80063e8:	bf49      	itett	mi
 80063ea:	085b      	lsrmi	r3, r3, #1
 80063ec:	089b      	lsrpl	r3, r3, #2
 80063ee:	2001      	movmi	r0, #1
 80063f0:	600b      	strmi	r3, [r1, #0]
 80063f2:	bf5c      	itt	pl
 80063f4:	600b      	strpl	r3, [r1, #0]
 80063f6:	2002      	movpl	r0, #2
 80063f8:	4770      	bx	lr
 80063fa:	b298      	uxth	r0, r3
 80063fc:	b9a8      	cbnz	r0, 800642a <__lo0bits+0x52>
 80063fe:	2010      	movs	r0, #16
 8006400:	0c1b      	lsrs	r3, r3, #16
 8006402:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006406:	bf04      	itt	eq
 8006408:	0a1b      	lsreq	r3, r3, #8
 800640a:	3008      	addeq	r0, #8
 800640c:	071a      	lsls	r2, r3, #28
 800640e:	bf04      	itt	eq
 8006410:	091b      	lsreq	r3, r3, #4
 8006412:	3004      	addeq	r0, #4
 8006414:	079a      	lsls	r2, r3, #30
 8006416:	bf04      	itt	eq
 8006418:	089b      	lsreq	r3, r3, #2
 800641a:	3002      	addeq	r0, #2
 800641c:	07da      	lsls	r2, r3, #31
 800641e:	d402      	bmi.n	8006426 <__lo0bits+0x4e>
 8006420:	085b      	lsrs	r3, r3, #1
 8006422:	d006      	beq.n	8006432 <__lo0bits+0x5a>
 8006424:	3001      	adds	r0, #1
 8006426:	600b      	str	r3, [r1, #0]
 8006428:	4770      	bx	lr
 800642a:	4610      	mov	r0, r2
 800642c:	e7e9      	b.n	8006402 <__lo0bits+0x2a>
 800642e:	2000      	movs	r0, #0
 8006430:	4770      	bx	lr
 8006432:	2020      	movs	r0, #32
 8006434:	4770      	bx	lr

08006436 <__i2b>:
 8006436:	b510      	push	{r4, lr}
 8006438:	460c      	mov	r4, r1
 800643a:	2101      	movs	r1, #1
 800643c:	f7ff ff27 	bl	800628e <_Balloc>
 8006440:	2201      	movs	r2, #1
 8006442:	6144      	str	r4, [r0, #20]
 8006444:	6102      	str	r2, [r0, #16]
 8006446:	bd10      	pop	{r4, pc}

08006448 <__multiply>:
 8006448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	4614      	mov	r4, r2
 800644e:	690a      	ldr	r2, [r1, #16]
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	4688      	mov	r8, r1
 8006454:	429a      	cmp	r2, r3
 8006456:	bfbe      	ittt	lt
 8006458:	460b      	movlt	r3, r1
 800645a:	46a0      	movlt	r8, r4
 800645c:	461c      	movlt	r4, r3
 800645e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006462:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800646a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800646e:	eb07 0609 	add.w	r6, r7, r9
 8006472:	42b3      	cmp	r3, r6
 8006474:	bfb8      	it	lt
 8006476:	3101      	addlt	r1, #1
 8006478:	f7ff ff09 	bl	800628e <_Balloc>
 800647c:	f100 0514 	add.w	r5, r0, #20
 8006480:	462b      	mov	r3, r5
 8006482:	2200      	movs	r2, #0
 8006484:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006488:	4573      	cmp	r3, lr
 800648a:	d316      	bcc.n	80064ba <__multiply+0x72>
 800648c:	f104 0214 	add.w	r2, r4, #20
 8006490:	f108 0114 	add.w	r1, r8, #20
 8006494:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006498:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	9b00      	ldr	r3, [sp, #0]
 80064a0:	9201      	str	r2, [sp, #4]
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d80c      	bhi.n	80064c0 <__multiply+0x78>
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	dd03      	ble.n	80064b2 <__multiply+0x6a>
 80064aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d05d      	beq.n	800656e <__multiply+0x126>
 80064b2:	6106      	str	r6, [r0, #16]
 80064b4:	b003      	add	sp, #12
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ba:	f843 2b04 	str.w	r2, [r3], #4
 80064be:	e7e3      	b.n	8006488 <__multiply+0x40>
 80064c0:	f8b2 b000 	ldrh.w	fp, [r2]
 80064c4:	f1bb 0f00 	cmp.w	fp, #0
 80064c8:	d023      	beq.n	8006512 <__multiply+0xca>
 80064ca:	4689      	mov	r9, r1
 80064cc:	46ac      	mov	ip, r5
 80064ce:	f04f 0800 	mov.w	r8, #0
 80064d2:	f859 4b04 	ldr.w	r4, [r9], #4
 80064d6:	f8dc a000 	ldr.w	sl, [ip]
 80064da:	b2a3      	uxth	r3, r4
 80064dc:	fa1f fa8a 	uxth.w	sl, sl
 80064e0:	fb0b a303 	mla	r3, fp, r3, sl
 80064e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80064e8:	f8dc 4000 	ldr.w	r4, [ip]
 80064ec:	4443      	add	r3, r8
 80064ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80064f2:	fb0b 840a 	mla	r4, fp, sl, r8
 80064f6:	46e2      	mov	sl, ip
 80064f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006502:	454f      	cmp	r7, r9
 8006504:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006508:	f84a 3b04 	str.w	r3, [sl], #4
 800650c:	d82b      	bhi.n	8006566 <__multiply+0x11e>
 800650e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006512:	9b01      	ldr	r3, [sp, #4]
 8006514:	3204      	adds	r2, #4
 8006516:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800651a:	f1ba 0f00 	cmp.w	sl, #0
 800651e:	d020      	beq.n	8006562 <__multiply+0x11a>
 8006520:	4689      	mov	r9, r1
 8006522:	46a8      	mov	r8, r5
 8006524:	f04f 0b00 	mov.w	fp, #0
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	f8b9 c000 	ldrh.w	ip, [r9]
 800652e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006532:	b29b      	uxth	r3, r3
 8006534:	fb0a 440c 	mla	r4, sl, ip, r4
 8006538:	46c4      	mov	ip, r8
 800653a:	445c      	add	r4, fp
 800653c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006540:	f84c 3b04 	str.w	r3, [ip], #4
 8006544:	f859 3b04 	ldr.w	r3, [r9], #4
 8006548:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800654c:	0c1b      	lsrs	r3, r3, #16
 800654e:	fb0a b303 	mla	r3, sl, r3, fp
 8006552:	454f      	cmp	r7, r9
 8006554:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006558:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800655c:	d805      	bhi.n	800656a <__multiply+0x122>
 800655e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006562:	3504      	adds	r5, #4
 8006564:	e79b      	b.n	800649e <__multiply+0x56>
 8006566:	46d4      	mov	ip, sl
 8006568:	e7b3      	b.n	80064d2 <__multiply+0x8a>
 800656a:	46e0      	mov	r8, ip
 800656c:	e7dd      	b.n	800652a <__multiply+0xe2>
 800656e:	3e01      	subs	r6, #1
 8006570:	e799      	b.n	80064a6 <__multiply+0x5e>
	...

08006574 <__pow5mult>:
 8006574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006578:	4615      	mov	r5, r2
 800657a:	f012 0203 	ands.w	r2, r2, #3
 800657e:	4606      	mov	r6, r0
 8006580:	460f      	mov	r7, r1
 8006582:	d007      	beq.n	8006594 <__pow5mult+0x20>
 8006584:	4c21      	ldr	r4, [pc, #132]	; (800660c <__pow5mult+0x98>)
 8006586:	3a01      	subs	r2, #1
 8006588:	2300      	movs	r3, #0
 800658a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800658e:	f7ff fec9 	bl	8006324 <__multadd>
 8006592:	4607      	mov	r7, r0
 8006594:	10ad      	asrs	r5, r5, #2
 8006596:	d035      	beq.n	8006604 <__pow5mult+0x90>
 8006598:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800659a:	b93c      	cbnz	r4, 80065ac <__pow5mult+0x38>
 800659c:	2010      	movs	r0, #16
 800659e:	f7ff fe55 	bl	800624c <malloc>
 80065a2:	6270      	str	r0, [r6, #36]	; 0x24
 80065a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065a8:	6004      	str	r4, [r0, #0]
 80065aa:	60c4      	str	r4, [r0, #12]
 80065ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065b4:	b94c      	cbnz	r4, 80065ca <__pow5mult+0x56>
 80065b6:	f240 2171 	movw	r1, #625	; 0x271
 80065ba:	4630      	mov	r0, r6
 80065bc:	f7ff ff3b 	bl	8006436 <__i2b>
 80065c0:	2300      	movs	r3, #0
 80065c2:	4604      	mov	r4, r0
 80065c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80065c8:	6003      	str	r3, [r0, #0]
 80065ca:	f04f 0800 	mov.w	r8, #0
 80065ce:	07eb      	lsls	r3, r5, #31
 80065d0:	d50a      	bpl.n	80065e8 <__pow5mult+0x74>
 80065d2:	4639      	mov	r1, r7
 80065d4:	4622      	mov	r2, r4
 80065d6:	4630      	mov	r0, r6
 80065d8:	f7ff ff36 	bl	8006448 <__multiply>
 80065dc:	4681      	mov	r9, r0
 80065de:	4639      	mov	r1, r7
 80065e0:	4630      	mov	r0, r6
 80065e2:	f7ff fe88 	bl	80062f6 <_Bfree>
 80065e6:	464f      	mov	r7, r9
 80065e8:	106d      	asrs	r5, r5, #1
 80065ea:	d00b      	beq.n	8006604 <__pow5mult+0x90>
 80065ec:	6820      	ldr	r0, [r4, #0]
 80065ee:	b938      	cbnz	r0, 8006600 <__pow5mult+0x8c>
 80065f0:	4622      	mov	r2, r4
 80065f2:	4621      	mov	r1, r4
 80065f4:	4630      	mov	r0, r6
 80065f6:	f7ff ff27 	bl	8006448 <__multiply>
 80065fa:	6020      	str	r0, [r4, #0]
 80065fc:	f8c0 8000 	str.w	r8, [r0]
 8006600:	4604      	mov	r4, r0
 8006602:	e7e4      	b.n	80065ce <__pow5mult+0x5a>
 8006604:	4638      	mov	r0, r7
 8006606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800660a:	bf00      	nop
 800660c:	080083c0 	.word	0x080083c0

08006610 <__lshift>:
 8006610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	460c      	mov	r4, r1
 8006616:	4607      	mov	r7, r0
 8006618:	4616      	mov	r6, r2
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006620:	eb0a 0903 	add.w	r9, sl, r3
 8006624:	6849      	ldr	r1, [r1, #4]
 8006626:	68a3      	ldr	r3, [r4, #8]
 8006628:	f109 0501 	add.w	r5, r9, #1
 800662c:	42ab      	cmp	r3, r5
 800662e:	db32      	blt.n	8006696 <__lshift+0x86>
 8006630:	4638      	mov	r0, r7
 8006632:	f7ff fe2c 	bl	800628e <_Balloc>
 8006636:	2300      	movs	r3, #0
 8006638:	4680      	mov	r8, r0
 800663a:	461a      	mov	r2, r3
 800663c:	f100 0114 	add.w	r1, r0, #20
 8006640:	4553      	cmp	r3, sl
 8006642:	db2b      	blt.n	800669c <__lshift+0x8c>
 8006644:	6920      	ldr	r0, [r4, #16]
 8006646:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800664a:	f104 0314 	add.w	r3, r4, #20
 800664e:	f016 021f 	ands.w	r2, r6, #31
 8006652:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006656:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800665a:	d025      	beq.n	80066a8 <__lshift+0x98>
 800665c:	2000      	movs	r0, #0
 800665e:	f1c2 0e20 	rsb	lr, r2, #32
 8006662:	468a      	mov	sl, r1
 8006664:	681e      	ldr	r6, [r3, #0]
 8006666:	4096      	lsls	r6, r2
 8006668:	4330      	orrs	r0, r6
 800666a:	f84a 0b04 	str.w	r0, [sl], #4
 800666e:	f853 0b04 	ldr.w	r0, [r3], #4
 8006672:	459c      	cmp	ip, r3
 8006674:	fa20 f00e 	lsr.w	r0, r0, lr
 8006678:	d814      	bhi.n	80066a4 <__lshift+0x94>
 800667a:	6048      	str	r0, [r1, #4]
 800667c:	b108      	cbz	r0, 8006682 <__lshift+0x72>
 800667e:	f109 0502 	add.w	r5, r9, #2
 8006682:	3d01      	subs	r5, #1
 8006684:	4638      	mov	r0, r7
 8006686:	f8c8 5010 	str.w	r5, [r8, #16]
 800668a:	4621      	mov	r1, r4
 800668c:	f7ff fe33 	bl	80062f6 <_Bfree>
 8006690:	4640      	mov	r0, r8
 8006692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006696:	3101      	adds	r1, #1
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	e7c7      	b.n	800662c <__lshift+0x1c>
 800669c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80066a0:	3301      	adds	r3, #1
 80066a2:	e7cd      	b.n	8006640 <__lshift+0x30>
 80066a4:	4651      	mov	r1, sl
 80066a6:	e7dc      	b.n	8006662 <__lshift+0x52>
 80066a8:	3904      	subs	r1, #4
 80066aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ae:	459c      	cmp	ip, r3
 80066b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80066b4:	d8f9      	bhi.n	80066aa <__lshift+0x9a>
 80066b6:	e7e4      	b.n	8006682 <__lshift+0x72>

080066b8 <__mcmp>:
 80066b8:	6903      	ldr	r3, [r0, #16]
 80066ba:	690a      	ldr	r2, [r1, #16]
 80066bc:	b530      	push	{r4, r5, lr}
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	d10c      	bne.n	80066dc <__mcmp+0x24>
 80066c2:	0092      	lsls	r2, r2, #2
 80066c4:	3014      	adds	r0, #20
 80066c6:	3114      	adds	r1, #20
 80066c8:	1884      	adds	r4, r0, r2
 80066ca:	4411      	add	r1, r2
 80066cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066d4:	4295      	cmp	r5, r2
 80066d6:	d003      	beq.n	80066e0 <__mcmp+0x28>
 80066d8:	d305      	bcc.n	80066e6 <__mcmp+0x2e>
 80066da:	2301      	movs	r3, #1
 80066dc:	4618      	mov	r0, r3
 80066de:	bd30      	pop	{r4, r5, pc}
 80066e0:	42a0      	cmp	r0, r4
 80066e2:	d3f3      	bcc.n	80066cc <__mcmp+0x14>
 80066e4:	e7fa      	b.n	80066dc <__mcmp+0x24>
 80066e6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ea:	e7f7      	b.n	80066dc <__mcmp+0x24>

080066ec <__mdiff>:
 80066ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f0:	460d      	mov	r5, r1
 80066f2:	4607      	mov	r7, r0
 80066f4:	4611      	mov	r1, r2
 80066f6:	4628      	mov	r0, r5
 80066f8:	4614      	mov	r4, r2
 80066fa:	f7ff ffdd 	bl	80066b8 <__mcmp>
 80066fe:	1e06      	subs	r6, r0, #0
 8006700:	d108      	bne.n	8006714 <__mdiff+0x28>
 8006702:	4631      	mov	r1, r6
 8006704:	4638      	mov	r0, r7
 8006706:	f7ff fdc2 	bl	800628e <_Balloc>
 800670a:	2301      	movs	r3, #1
 800670c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006714:	bfa4      	itt	ge
 8006716:	4623      	movge	r3, r4
 8006718:	462c      	movge	r4, r5
 800671a:	4638      	mov	r0, r7
 800671c:	6861      	ldr	r1, [r4, #4]
 800671e:	bfa6      	itte	ge
 8006720:	461d      	movge	r5, r3
 8006722:	2600      	movge	r6, #0
 8006724:	2601      	movlt	r6, #1
 8006726:	f7ff fdb2 	bl	800628e <_Balloc>
 800672a:	f04f 0e00 	mov.w	lr, #0
 800672e:	60c6      	str	r6, [r0, #12]
 8006730:	692b      	ldr	r3, [r5, #16]
 8006732:	6926      	ldr	r6, [r4, #16]
 8006734:	f104 0214 	add.w	r2, r4, #20
 8006738:	f105 0914 	add.w	r9, r5, #20
 800673c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006740:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006744:	f100 0114 	add.w	r1, r0, #20
 8006748:	f852 ab04 	ldr.w	sl, [r2], #4
 800674c:	f859 5b04 	ldr.w	r5, [r9], #4
 8006750:	fa1f f38a 	uxth.w	r3, sl
 8006754:	4473      	add	r3, lr
 8006756:	b2ac      	uxth	r4, r5
 8006758:	1b1b      	subs	r3, r3, r4
 800675a:	0c2c      	lsrs	r4, r5, #16
 800675c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006760:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006764:	b29b      	uxth	r3, r3
 8006766:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800676a:	45c8      	cmp	r8, r9
 800676c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006770:	4694      	mov	ip, r2
 8006772:	f841 4b04 	str.w	r4, [r1], #4
 8006776:	d8e7      	bhi.n	8006748 <__mdiff+0x5c>
 8006778:	45bc      	cmp	ip, r7
 800677a:	d304      	bcc.n	8006786 <__mdiff+0x9a>
 800677c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006780:	b183      	cbz	r3, 80067a4 <__mdiff+0xb8>
 8006782:	6106      	str	r6, [r0, #16]
 8006784:	e7c4      	b.n	8006710 <__mdiff+0x24>
 8006786:	f85c 4b04 	ldr.w	r4, [ip], #4
 800678a:	b2a2      	uxth	r2, r4
 800678c:	4472      	add	r2, lr
 800678e:	1413      	asrs	r3, r2, #16
 8006790:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006794:	b292      	uxth	r2, r2
 8006796:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800679a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800679e:	f841 2b04 	str.w	r2, [r1], #4
 80067a2:	e7e9      	b.n	8006778 <__mdiff+0x8c>
 80067a4:	3e01      	subs	r6, #1
 80067a6:	e7e9      	b.n	800677c <__mdiff+0x90>

080067a8 <__d2b>:
 80067a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80067ac:	461c      	mov	r4, r3
 80067ae:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80067b2:	2101      	movs	r1, #1
 80067b4:	4690      	mov	r8, r2
 80067b6:	f7ff fd6a 	bl	800628e <_Balloc>
 80067ba:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80067be:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80067c2:	4607      	mov	r7, r0
 80067c4:	bb34      	cbnz	r4, 8006814 <__d2b+0x6c>
 80067c6:	9201      	str	r2, [sp, #4]
 80067c8:	f1b8 0200 	subs.w	r2, r8, #0
 80067cc:	d027      	beq.n	800681e <__d2b+0x76>
 80067ce:	a802      	add	r0, sp, #8
 80067d0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80067d4:	f7ff fe00 	bl	80063d8 <__lo0bits>
 80067d8:	9900      	ldr	r1, [sp, #0]
 80067da:	b1f0      	cbz	r0, 800681a <__d2b+0x72>
 80067dc:	9a01      	ldr	r2, [sp, #4]
 80067de:	f1c0 0320 	rsb	r3, r0, #32
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	430b      	orrs	r3, r1
 80067e8:	40c2      	lsrs	r2, r0
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	9201      	str	r2, [sp, #4]
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	bf14      	ite	ne
 80067f4:	2102      	movne	r1, #2
 80067f6:	2101      	moveq	r1, #1
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	6139      	str	r1, [r7, #16]
 80067fc:	b1c4      	cbz	r4, 8006830 <__d2b+0x88>
 80067fe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006802:	4404      	add	r4, r0
 8006804:	6034      	str	r4, [r6, #0]
 8006806:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800680a:	6028      	str	r0, [r5, #0]
 800680c:	4638      	mov	r0, r7
 800680e:	b002      	add	sp, #8
 8006810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006814:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006818:	e7d5      	b.n	80067c6 <__d2b+0x1e>
 800681a:	6179      	str	r1, [r7, #20]
 800681c:	e7e7      	b.n	80067ee <__d2b+0x46>
 800681e:	a801      	add	r0, sp, #4
 8006820:	f7ff fdda 	bl	80063d8 <__lo0bits>
 8006824:	2101      	movs	r1, #1
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	6139      	str	r1, [r7, #16]
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	3020      	adds	r0, #32
 800682e:	e7e5      	b.n	80067fc <__d2b+0x54>
 8006830:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006834:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006838:	6030      	str	r0, [r6, #0]
 800683a:	6918      	ldr	r0, [r3, #16]
 800683c:	f7ff fdad 	bl	800639a <__hi0bits>
 8006840:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006844:	e7e1      	b.n	800680a <__d2b+0x62>

08006846 <_calloc_r>:
 8006846:	b538      	push	{r3, r4, r5, lr}
 8006848:	fb02 f401 	mul.w	r4, r2, r1
 800684c:	4621      	mov	r1, r4
 800684e:	f000 f855 	bl	80068fc <_malloc_r>
 8006852:	4605      	mov	r5, r0
 8006854:	b118      	cbz	r0, 800685e <_calloc_r+0x18>
 8006856:	4622      	mov	r2, r4
 8006858:	2100      	movs	r1, #0
 800685a:	f7fe fa2f 	bl	8004cbc <memset>
 800685e:	4628      	mov	r0, r5
 8006860:	bd38      	pop	{r3, r4, r5, pc}
	...

08006864 <_free_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4605      	mov	r5, r0
 8006868:	2900      	cmp	r1, #0
 800686a:	d043      	beq.n	80068f4 <_free_r+0x90>
 800686c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006870:	1f0c      	subs	r4, r1, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	bfb8      	it	lt
 8006876:	18e4      	addlt	r4, r4, r3
 8006878:	f000 fa27 	bl	8006cca <__malloc_lock>
 800687c:	4a1e      	ldr	r2, [pc, #120]	; (80068f8 <_free_r+0x94>)
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	4610      	mov	r0, r2
 8006882:	b933      	cbnz	r3, 8006892 <_free_r+0x2e>
 8006884:	6063      	str	r3, [r4, #4]
 8006886:	6014      	str	r4, [r2, #0]
 8006888:	4628      	mov	r0, r5
 800688a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800688e:	f000 ba1d 	b.w	8006ccc <__malloc_unlock>
 8006892:	42a3      	cmp	r3, r4
 8006894:	d90b      	bls.n	80068ae <_free_r+0x4a>
 8006896:	6821      	ldr	r1, [r4, #0]
 8006898:	1862      	adds	r2, r4, r1
 800689a:	4293      	cmp	r3, r2
 800689c:	bf01      	itttt	eq
 800689e:	681a      	ldreq	r2, [r3, #0]
 80068a0:	685b      	ldreq	r3, [r3, #4]
 80068a2:	1852      	addeq	r2, r2, r1
 80068a4:	6022      	streq	r2, [r4, #0]
 80068a6:	6063      	str	r3, [r4, #4]
 80068a8:	6004      	str	r4, [r0, #0]
 80068aa:	e7ed      	b.n	8006888 <_free_r+0x24>
 80068ac:	4613      	mov	r3, r2
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	b10a      	cbz	r2, 80068b6 <_free_r+0x52>
 80068b2:	42a2      	cmp	r2, r4
 80068b4:	d9fa      	bls.n	80068ac <_free_r+0x48>
 80068b6:	6819      	ldr	r1, [r3, #0]
 80068b8:	1858      	adds	r0, r3, r1
 80068ba:	42a0      	cmp	r0, r4
 80068bc:	d10b      	bne.n	80068d6 <_free_r+0x72>
 80068be:	6820      	ldr	r0, [r4, #0]
 80068c0:	4401      	add	r1, r0
 80068c2:	1858      	adds	r0, r3, r1
 80068c4:	4282      	cmp	r2, r0
 80068c6:	6019      	str	r1, [r3, #0]
 80068c8:	d1de      	bne.n	8006888 <_free_r+0x24>
 80068ca:	6810      	ldr	r0, [r2, #0]
 80068cc:	6852      	ldr	r2, [r2, #4]
 80068ce:	4401      	add	r1, r0
 80068d0:	6019      	str	r1, [r3, #0]
 80068d2:	605a      	str	r2, [r3, #4]
 80068d4:	e7d8      	b.n	8006888 <_free_r+0x24>
 80068d6:	d902      	bls.n	80068de <_free_r+0x7a>
 80068d8:	230c      	movs	r3, #12
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	e7d4      	b.n	8006888 <_free_r+0x24>
 80068de:	6820      	ldr	r0, [r4, #0]
 80068e0:	1821      	adds	r1, r4, r0
 80068e2:	428a      	cmp	r2, r1
 80068e4:	bf01      	itttt	eq
 80068e6:	6811      	ldreq	r1, [r2, #0]
 80068e8:	6852      	ldreq	r2, [r2, #4]
 80068ea:	1809      	addeq	r1, r1, r0
 80068ec:	6021      	streq	r1, [r4, #0]
 80068ee:	6062      	str	r2, [r4, #4]
 80068f0:	605c      	str	r4, [r3, #4]
 80068f2:	e7c9      	b.n	8006888 <_free_r+0x24>
 80068f4:	bd38      	pop	{r3, r4, r5, pc}
 80068f6:	bf00      	nop
 80068f8:	20000624 	.word	0x20000624

080068fc <_malloc_r>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	1ccd      	adds	r5, r1, #3
 8006900:	f025 0503 	bic.w	r5, r5, #3
 8006904:	3508      	adds	r5, #8
 8006906:	2d0c      	cmp	r5, #12
 8006908:	bf38      	it	cc
 800690a:	250c      	movcc	r5, #12
 800690c:	2d00      	cmp	r5, #0
 800690e:	4606      	mov	r6, r0
 8006910:	db01      	blt.n	8006916 <_malloc_r+0x1a>
 8006912:	42a9      	cmp	r1, r5
 8006914:	d903      	bls.n	800691e <_malloc_r+0x22>
 8006916:	230c      	movs	r3, #12
 8006918:	6033      	str	r3, [r6, #0]
 800691a:	2000      	movs	r0, #0
 800691c:	bd70      	pop	{r4, r5, r6, pc}
 800691e:	f000 f9d4 	bl	8006cca <__malloc_lock>
 8006922:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <_malloc_r+0xac>)
 8006924:	6814      	ldr	r4, [r2, #0]
 8006926:	4621      	mov	r1, r4
 8006928:	b991      	cbnz	r1, 8006950 <_malloc_r+0x54>
 800692a:	4c20      	ldr	r4, [pc, #128]	; (80069ac <_malloc_r+0xb0>)
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	b91b      	cbnz	r3, 8006938 <_malloc_r+0x3c>
 8006930:	4630      	mov	r0, r6
 8006932:	f000 f98f 	bl	8006c54 <_sbrk_r>
 8006936:	6020      	str	r0, [r4, #0]
 8006938:	4629      	mov	r1, r5
 800693a:	4630      	mov	r0, r6
 800693c:	f000 f98a 	bl	8006c54 <_sbrk_r>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d124      	bne.n	800698e <_malloc_r+0x92>
 8006944:	230c      	movs	r3, #12
 8006946:	4630      	mov	r0, r6
 8006948:	6033      	str	r3, [r6, #0]
 800694a:	f000 f9bf 	bl	8006ccc <__malloc_unlock>
 800694e:	e7e4      	b.n	800691a <_malloc_r+0x1e>
 8006950:	680b      	ldr	r3, [r1, #0]
 8006952:	1b5b      	subs	r3, r3, r5
 8006954:	d418      	bmi.n	8006988 <_malloc_r+0x8c>
 8006956:	2b0b      	cmp	r3, #11
 8006958:	d90f      	bls.n	800697a <_malloc_r+0x7e>
 800695a:	600b      	str	r3, [r1, #0]
 800695c:	18cc      	adds	r4, r1, r3
 800695e:	50cd      	str	r5, [r1, r3]
 8006960:	4630      	mov	r0, r6
 8006962:	f000 f9b3 	bl	8006ccc <__malloc_unlock>
 8006966:	f104 000b 	add.w	r0, r4, #11
 800696a:	1d23      	adds	r3, r4, #4
 800696c:	f020 0007 	bic.w	r0, r0, #7
 8006970:	1ac3      	subs	r3, r0, r3
 8006972:	d0d3      	beq.n	800691c <_malloc_r+0x20>
 8006974:	425a      	negs	r2, r3
 8006976:	50e2      	str	r2, [r4, r3]
 8006978:	e7d0      	b.n	800691c <_malloc_r+0x20>
 800697a:	684b      	ldr	r3, [r1, #4]
 800697c:	428c      	cmp	r4, r1
 800697e:	bf16      	itet	ne
 8006980:	6063      	strne	r3, [r4, #4]
 8006982:	6013      	streq	r3, [r2, #0]
 8006984:	460c      	movne	r4, r1
 8006986:	e7eb      	b.n	8006960 <_malloc_r+0x64>
 8006988:	460c      	mov	r4, r1
 800698a:	6849      	ldr	r1, [r1, #4]
 800698c:	e7cc      	b.n	8006928 <_malloc_r+0x2c>
 800698e:	1cc4      	adds	r4, r0, #3
 8006990:	f024 0403 	bic.w	r4, r4, #3
 8006994:	42a0      	cmp	r0, r4
 8006996:	d005      	beq.n	80069a4 <_malloc_r+0xa8>
 8006998:	1a21      	subs	r1, r4, r0
 800699a:	4630      	mov	r0, r6
 800699c:	f000 f95a 	bl	8006c54 <_sbrk_r>
 80069a0:	3001      	adds	r0, #1
 80069a2:	d0cf      	beq.n	8006944 <_malloc_r+0x48>
 80069a4:	6025      	str	r5, [r4, #0]
 80069a6:	e7db      	b.n	8006960 <_malloc_r+0x64>
 80069a8:	20000624 	.word	0x20000624
 80069ac:	20000628 	.word	0x20000628

080069b0 <__ssputs_r>:
 80069b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b4:	688e      	ldr	r6, [r1, #8]
 80069b6:	4682      	mov	sl, r0
 80069b8:	429e      	cmp	r6, r3
 80069ba:	460c      	mov	r4, r1
 80069bc:	4690      	mov	r8, r2
 80069be:	4699      	mov	r9, r3
 80069c0:	d837      	bhi.n	8006a32 <__ssputs_r+0x82>
 80069c2:	898a      	ldrh	r2, [r1, #12]
 80069c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069c8:	d031      	beq.n	8006a2e <__ssputs_r+0x7e>
 80069ca:	2302      	movs	r3, #2
 80069cc:	6825      	ldr	r5, [r4, #0]
 80069ce:	6909      	ldr	r1, [r1, #16]
 80069d0:	1a6f      	subs	r7, r5, r1
 80069d2:	6965      	ldr	r5, [r4, #20]
 80069d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80069dc:	f109 0301 	add.w	r3, r9, #1
 80069e0:	443b      	add	r3, r7
 80069e2:	429d      	cmp	r5, r3
 80069e4:	bf38      	it	cc
 80069e6:	461d      	movcc	r5, r3
 80069e8:	0553      	lsls	r3, r2, #21
 80069ea:	d530      	bpl.n	8006a4e <__ssputs_r+0x9e>
 80069ec:	4629      	mov	r1, r5
 80069ee:	f7ff ff85 	bl	80068fc <_malloc_r>
 80069f2:	4606      	mov	r6, r0
 80069f4:	b950      	cbnz	r0, 8006a0c <__ssputs_r+0x5c>
 80069f6:	230c      	movs	r3, #12
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	f8ca 3000 	str.w	r3, [sl]
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a06:	81a3      	strh	r3, [r4, #12]
 8006a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a0c:	463a      	mov	r2, r7
 8006a0e:	6921      	ldr	r1, [r4, #16]
 8006a10:	f7ff fc32 	bl	8006278 <memcpy>
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	6126      	str	r6, [r4, #16]
 8006a22:	443e      	add	r6, r7
 8006a24:	6026      	str	r6, [r4, #0]
 8006a26:	464e      	mov	r6, r9
 8006a28:	6165      	str	r5, [r4, #20]
 8006a2a:	1bed      	subs	r5, r5, r7
 8006a2c:	60a5      	str	r5, [r4, #8]
 8006a2e:	454e      	cmp	r6, r9
 8006a30:	d900      	bls.n	8006a34 <__ssputs_r+0x84>
 8006a32:	464e      	mov	r6, r9
 8006a34:	4632      	mov	r2, r6
 8006a36:	4641      	mov	r1, r8
 8006a38:	6820      	ldr	r0, [r4, #0]
 8006a3a:	f000 f92d 	bl	8006c98 <memmove>
 8006a3e:	68a3      	ldr	r3, [r4, #8]
 8006a40:	2000      	movs	r0, #0
 8006a42:	1b9b      	subs	r3, r3, r6
 8006a44:	60a3      	str	r3, [r4, #8]
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	441e      	add	r6, r3
 8006a4a:	6026      	str	r6, [r4, #0]
 8006a4c:	e7dc      	b.n	8006a08 <__ssputs_r+0x58>
 8006a4e:	462a      	mov	r2, r5
 8006a50:	f000 f93d 	bl	8006cce <_realloc_r>
 8006a54:	4606      	mov	r6, r0
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d1e2      	bne.n	8006a20 <__ssputs_r+0x70>
 8006a5a:	6921      	ldr	r1, [r4, #16]
 8006a5c:	4650      	mov	r0, sl
 8006a5e:	f7ff ff01 	bl	8006864 <_free_r>
 8006a62:	e7c8      	b.n	80069f6 <__ssputs_r+0x46>

08006a64 <_svfiprintf_r>:
 8006a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	461d      	mov	r5, r3
 8006a6a:	898b      	ldrh	r3, [r1, #12]
 8006a6c:	b09d      	sub	sp, #116	; 0x74
 8006a6e:	061f      	lsls	r7, r3, #24
 8006a70:	4680      	mov	r8, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	4616      	mov	r6, r2
 8006a76:	d50f      	bpl.n	8006a98 <_svfiprintf_r+0x34>
 8006a78:	690b      	ldr	r3, [r1, #16]
 8006a7a:	b96b      	cbnz	r3, 8006a98 <_svfiprintf_r+0x34>
 8006a7c:	2140      	movs	r1, #64	; 0x40
 8006a7e:	f7ff ff3d 	bl	80068fc <_malloc_r>
 8006a82:	6020      	str	r0, [r4, #0]
 8006a84:	6120      	str	r0, [r4, #16]
 8006a86:	b928      	cbnz	r0, 8006a94 <_svfiprintf_r+0x30>
 8006a88:	230c      	movs	r3, #12
 8006a8a:	f8c8 3000 	str.w	r3, [r8]
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a92:	e0c8      	b.n	8006c26 <_svfiprintf_r+0x1c2>
 8006a94:	2340      	movs	r3, #64	; 0x40
 8006a96:	6163      	str	r3, [r4, #20]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a9c:	2320      	movs	r3, #32
 8006a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aa2:	2330      	movs	r3, #48	; 0x30
 8006aa4:	f04f 0b01 	mov.w	fp, #1
 8006aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aac:	9503      	str	r5, [sp, #12]
 8006aae:	4637      	mov	r7, r6
 8006ab0:	463d      	mov	r5, r7
 8006ab2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ab6:	b10b      	cbz	r3, 8006abc <_svfiprintf_r+0x58>
 8006ab8:	2b25      	cmp	r3, #37	; 0x25
 8006aba:	d13e      	bne.n	8006b3a <_svfiprintf_r+0xd6>
 8006abc:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ac0:	d00b      	beq.n	8006ada <_svfiprintf_r+0x76>
 8006ac2:	4653      	mov	r3, sl
 8006ac4:	4632      	mov	r2, r6
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4640      	mov	r0, r8
 8006aca:	f7ff ff71 	bl	80069b0 <__ssputs_r>
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f000 80a4 	beq.w	8006c1c <_svfiprintf_r+0x1b8>
 8006ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad6:	4453      	add	r3, sl
 8006ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ada:	783b      	ldrb	r3, [r7, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 809d 	beq.w	8006c1c <_svfiprintf_r+0x1b8>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aec:	9304      	str	r3, [sp, #16]
 8006aee:	9307      	str	r3, [sp, #28]
 8006af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006af4:	931a      	str	r3, [sp, #104]	; 0x68
 8006af6:	462f      	mov	r7, r5
 8006af8:	2205      	movs	r2, #5
 8006afa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006afe:	4850      	ldr	r0, [pc, #320]	; (8006c40 <_svfiprintf_r+0x1dc>)
 8006b00:	f7ff fbac 	bl	800625c <memchr>
 8006b04:	9b04      	ldr	r3, [sp, #16]
 8006b06:	b9d0      	cbnz	r0, 8006b3e <_svfiprintf_r+0xda>
 8006b08:	06d9      	lsls	r1, r3, #27
 8006b0a:	bf44      	itt	mi
 8006b0c:	2220      	movmi	r2, #32
 8006b0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b12:	071a      	lsls	r2, r3, #28
 8006b14:	bf44      	itt	mi
 8006b16:	222b      	movmi	r2, #43	; 0x2b
 8006b18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b1c:	782a      	ldrb	r2, [r5, #0]
 8006b1e:	2a2a      	cmp	r2, #42	; 0x2a
 8006b20:	d015      	beq.n	8006b4e <_svfiprintf_r+0xea>
 8006b22:	462f      	mov	r7, r5
 8006b24:	2000      	movs	r0, #0
 8006b26:	250a      	movs	r5, #10
 8006b28:	9a07      	ldr	r2, [sp, #28]
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b30:	3b30      	subs	r3, #48	; 0x30
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	d94d      	bls.n	8006bd2 <_svfiprintf_r+0x16e>
 8006b36:	b1b8      	cbz	r0, 8006b68 <_svfiprintf_r+0x104>
 8006b38:	e00f      	b.n	8006b5a <_svfiprintf_r+0xf6>
 8006b3a:	462f      	mov	r7, r5
 8006b3c:	e7b8      	b.n	8006ab0 <_svfiprintf_r+0x4c>
 8006b3e:	4a40      	ldr	r2, [pc, #256]	; (8006c40 <_svfiprintf_r+0x1dc>)
 8006b40:	463d      	mov	r5, r7
 8006b42:	1a80      	subs	r0, r0, r2
 8006b44:	fa0b f000 	lsl.w	r0, fp, r0
 8006b48:	4318      	orrs	r0, r3
 8006b4a:	9004      	str	r0, [sp, #16]
 8006b4c:	e7d3      	b.n	8006af6 <_svfiprintf_r+0x92>
 8006b4e:	9a03      	ldr	r2, [sp, #12]
 8006b50:	1d11      	adds	r1, r2, #4
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	9103      	str	r1, [sp, #12]
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	db01      	blt.n	8006b5e <_svfiprintf_r+0xfa>
 8006b5a:	9207      	str	r2, [sp, #28]
 8006b5c:	e004      	b.n	8006b68 <_svfiprintf_r+0x104>
 8006b5e:	4252      	negs	r2, r2
 8006b60:	f043 0302 	orr.w	r3, r3, #2
 8006b64:	9207      	str	r2, [sp, #28]
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	783b      	ldrb	r3, [r7, #0]
 8006b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b6c:	d10c      	bne.n	8006b88 <_svfiprintf_r+0x124>
 8006b6e:	787b      	ldrb	r3, [r7, #1]
 8006b70:	2b2a      	cmp	r3, #42	; 0x2a
 8006b72:	d133      	bne.n	8006bdc <_svfiprintf_r+0x178>
 8006b74:	9b03      	ldr	r3, [sp, #12]
 8006b76:	3702      	adds	r7, #2
 8006b78:	1d1a      	adds	r2, r3, #4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	9203      	str	r2, [sp, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bfb8      	it	lt
 8006b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b86:	9305      	str	r3, [sp, #20]
 8006b88:	4d2e      	ldr	r5, [pc, #184]	; (8006c44 <_svfiprintf_r+0x1e0>)
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	7839      	ldrb	r1, [r7, #0]
 8006b8e:	4628      	mov	r0, r5
 8006b90:	f7ff fb64 	bl	800625c <memchr>
 8006b94:	b138      	cbz	r0, 8006ba6 <_svfiprintf_r+0x142>
 8006b96:	2340      	movs	r3, #64	; 0x40
 8006b98:	1b40      	subs	r0, r0, r5
 8006b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8006b9e:	9b04      	ldr	r3, [sp, #16]
 8006ba0:	3701      	adds	r7, #1
 8006ba2:	4303      	orrs	r3, r0
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	7839      	ldrb	r1, [r7, #0]
 8006ba8:	2206      	movs	r2, #6
 8006baa:	4827      	ldr	r0, [pc, #156]	; (8006c48 <_svfiprintf_r+0x1e4>)
 8006bac:	1c7e      	adds	r6, r7, #1
 8006bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bb2:	f7ff fb53 	bl	800625c <memchr>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d038      	beq.n	8006c2c <_svfiprintf_r+0x1c8>
 8006bba:	4b24      	ldr	r3, [pc, #144]	; (8006c4c <_svfiprintf_r+0x1e8>)
 8006bbc:	bb13      	cbnz	r3, 8006c04 <_svfiprintf_r+0x1a0>
 8006bbe:	9b03      	ldr	r3, [sp, #12]
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	9303      	str	r3, [sp, #12]
 8006bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bcc:	444b      	add	r3, r9
 8006bce:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd0:	e76d      	b.n	8006aae <_svfiprintf_r+0x4a>
 8006bd2:	fb05 3202 	mla	r2, r5, r2, r3
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	460f      	mov	r7, r1
 8006bda:	e7a6      	b.n	8006b2a <_svfiprintf_r+0xc6>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	250a      	movs	r5, #10
 8006be0:	4619      	mov	r1, r3
 8006be2:	3701      	adds	r7, #1
 8006be4:	9305      	str	r3, [sp, #20]
 8006be6:	4638      	mov	r0, r7
 8006be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bec:	3a30      	subs	r2, #48	; 0x30
 8006bee:	2a09      	cmp	r2, #9
 8006bf0:	d903      	bls.n	8006bfa <_svfiprintf_r+0x196>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0c8      	beq.n	8006b88 <_svfiprintf_r+0x124>
 8006bf6:	9105      	str	r1, [sp, #20]
 8006bf8:	e7c6      	b.n	8006b88 <_svfiprintf_r+0x124>
 8006bfa:	fb05 2101 	mla	r1, r5, r1, r2
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4607      	mov	r7, r0
 8006c02:	e7f0      	b.n	8006be6 <_svfiprintf_r+0x182>
 8006c04:	ab03      	add	r3, sp, #12
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	4622      	mov	r2, r4
 8006c0a:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <_svfiprintf_r+0x1ec>)
 8006c0c:	a904      	add	r1, sp, #16
 8006c0e:	4640      	mov	r0, r8
 8006c10:	f7fe f8ee 	bl	8004df0 <_printf_float>
 8006c14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c18:	4681      	mov	r9, r0
 8006c1a:	d1d6      	bne.n	8006bca <_svfiprintf_r+0x166>
 8006c1c:	89a3      	ldrh	r3, [r4, #12]
 8006c1e:	065b      	lsls	r3, r3, #25
 8006c20:	f53f af35 	bmi.w	8006a8e <_svfiprintf_r+0x2a>
 8006c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c26:	b01d      	add	sp, #116	; 0x74
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	ab03      	add	r3, sp, #12
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4622      	mov	r2, r4
 8006c32:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <_svfiprintf_r+0x1ec>)
 8006c34:	a904      	add	r1, sp, #16
 8006c36:	4640      	mov	r0, r8
 8006c38:	f7fe fb86 	bl	8005348 <_printf_i>
 8006c3c:	e7ea      	b.n	8006c14 <_svfiprintf_r+0x1b0>
 8006c3e:	bf00      	nop
 8006c40:	080083cc 	.word	0x080083cc
 8006c44:	080083d2 	.word	0x080083d2
 8006c48:	080083d6 	.word	0x080083d6
 8006c4c:	08004df1 	.word	0x08004df1
 8006c50:	080069b1 	.word	0x080069b1

08006c54 <_sbrk_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	2300      	movs	r3, #0
 8006c58:	4c05      	ldr	r4, [pc, #20]	; (8006c70 <_sbrk_r+0x1c>)
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	4608      	mov	r0, r1
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	f7fb faca 	bl	80021f8 <_sbrk>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d102      	bne.n	8006c6e <_sbrk_r+0x1a>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	b103      	cbz	r3, 8006c6e <_sbrk_r+0x1a>
 8006c6c:	602b      	str	r3, [r5, #0]
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	200006f8 	.word	0x200006f8

08006c74 <__ascii_mbtowc>:
 8006c74:	b082      	sub	sp, #8
 8006c76:	b901      	cbnz	r1, 8006c7a <__ascii_mbtowc+0x6>
 8006c78:	a901      	add	r1, sp, #4
 8006c7a:	b142      	cbz	r2, 8006c8e <__ascii_mbtowc+0x1a>
 8006c7c:	b14b      	cbz	r3, 8006c92 <__ascii_mbtowc+0x1e>
 8006c7e:	7813      	ldrb	r3, [r2, #0]
 8006c80:	600b      	str	r3, [r1, #0]
 8006c82:	7812      	ldrb	r2, [r2, #0]
 8006c84:	1c10      	adds	r0, r2, #0
 8006c86:	bf18      	it	ne
 8006c88:	2001      	movne	r0, #1
 8006c8a:	b002      	add	sp, #8
 8006c8c:	4770      	bx	lr
 8006c8e:	4610      	mov	r0, r2
 8006c90:	e7fb      	b.n	8006c8a <__ascii_mbtowc+0x16>
 8006c92:	f06f 0001 	mvn.w	r0, #1
 8006c96:	e7f8      	b.n	8006c8a <__ascii_mbtowc+0x16>

08006c98 <memmove>:
 8006c98:	4288      	cmp	r0, r1
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	eb01 0302 	add.w	r3, r1, r2
 8006ca0:	d807      	bhi.n	8006cb2 <memmove+0x1a>
 8006ca2:	1e42      	subs	r2, r0, #1
 8006ca4:	4299      	cmp	r1, r3
 8006ca6:	d00a      	beq.n	8006cbe <memmove+0x26>
 8006ca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cac:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006cb0:	e7f8      	b.n	8006ca4 <memmove+0xc>
 8006cb2:	4283      	cmp	r3, r0
 8006cb4:	d9f5      	bls.n	8006ca2 <memmove+0xa>
 8006cb6:	1881      	adds	r1, r0, r2
 8006cb8:	1ad2      	subs	r2, r2, r3
 8006cba:	42d3      	cmn	r3, r2
 8006cbc:	d100      	bne.n	8006cc0 <memmove+0x28>
 8006cbe:	bd10      	pop	{r4, pc}
 8006cc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cc4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006cc8:	e7f7      	b.n	8006cba <memmove+0x22>

08006cca <__malloc_lock>:
 8006cca:	4770      	bx	lr

08006ccc <__malloc_unlock>:
 8006ccc:	4770      	bx	lr

08006cce <_realloc_r>:
 8006cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	4614      	mov	r4, r2
 8006cd4:	460e      	mov	r6, r1
 8006cd6:	b921      	cbnz	r1, 8006ce2 <_realloc_r+0x14>
 8006cd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006cdc:	4611      	mov	r1, r2
 8006cde:	f7ff be0d 	b.w	80068fc <_malloc_r>
 8006ce2:	b922      	cbnz	r2, 8006cee <_realloc_r+0x20>
 8006ce4:	f7ff fdbe 	bl	8006864 <_free_r>
 8006ce8:	4625      	mov	r5, r4
 8006cea:	4628      	mov	r0, r5
 8006cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cee:	f000 f821 	bl	8006d34 <_malloc_usable_size_r>
 8006cf2:	42a0      	cmp	r0, r4
 8006cf4:	d20f      	bcs.n	8006d16 <_realloc_r+0x48>
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7ff fdff 	bl	80068fc <_malloc_r>
 8006cfe:	4605      	mov	r5, r0
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d0f2      	beq.n	8006cea <_realloc_r+0x1c>
 8006d04:	4631      	mov	r1, r6
 8006d06:	4622      	mov	r2, r4
 8006d08:	f7ff fab6 	bl	8006278 <memcpy>
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4638      	mov	r0, r7
 8006d10:	f7ff fda8 	bl	8006864 <_free_r>
 8006d14:	e7e9      	b.n	8006cea <_realloc_r+0x1c>
 8006d16:	4635      	mov	r5, r6
 8006d18:	e7e7      	b.n	8006cea <_realloc_r+0x1c>

08006d1a <__ascii_wctomb>:
 8006d1a:	b149      	cbz	r1, 8006d30 <__ascii_wctomb+0x16>
 8006d1c:	2aff      	cmp	r2, #255	; 0xff
 8006d1e:	bf8b      	itete	hi
 8006d20:	238a      	movhi	r3, #138	; 0x8a
 8006d22:	700a      	strbls	r2, [r1, #0]
 8006d24:	6003      	strhi	r3, [r0, #0]
 8006d26:	2001      	movls	r0, #1
 8006d28:	bf88      	it	hi
 8006d2a:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d2e:	4770      	bx	lr
 8006d30:	4608      	mov	r0, r1
 8006d32:	4770      	bx	lr

08006d34 <_malloc_usable_size_r>:
 8006d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d38:	1f18      	subs	r0, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bfbc      	itt	lt
 8006d3e:	580b      	ldrlt	r3, [r1, r0]
 8006d40:	18c0      	addlt	r0, r0, r3
 8006d42:	4770      	bx	lr

08006d44 <_init>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

08006d50 <_fini>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr
